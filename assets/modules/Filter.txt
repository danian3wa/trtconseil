/**
 * @property {HTMLElement} pagination
 * @property {HTMLElement} content
 * @property {HTMLFormElement} form
 */
export default class Filter {

  /**
   * @param {HTMLElement|null} element
   */
  constructor(element) {
    if (element === null) {
      return
    }
    this.pagination = element.querySelector('.js-filter-pagination')
    this.content = element.querySelector('.js-filter-content')
    this.form = element.querySelector('.js-filter-form')
    this.bindEvents()
  }

  /**
  * Ajoute les comportements aux diffÃ©rents Ã©lÃ©ments
  */
  bindEvents() {
    const aClickListener = e => {
      if (e.target.tagName === 'A') {
        e.preventDefault()
        this.loadUrl(e.target.getAttribute('href'))
      }
    }

    this.pagination.addEventListener('click', aClickListener)

    // Add keyup listener for qInput
    const qInput = document.querySelector('.js-filter-form input[name="q"]')
    qInput.addEventListener('keyup', this.loadForm.bind(this))
    /*
    this.form.querySelector('input[name="q"]').forEach(input => {
      input.addEventListener('keyup', this.loadForm.bind(this))
    })*/
    console.log(this.form);
    this.form.querySelectorAll('input').forEach(input => {
      input.addEventListener('change', this.loadForm.bind(this))
     // input.addEventListener('keyup', this.loadForm.bind(this))
    })
    this.form.querySelectorAll('select').forEach(select => {
      select.addEventListener('change', this.loadForm.bind(this))
    })
  }

  async loadForm() {
    //console.log(this.form);
    const data = new FormData(this.form)
    const url = new URL(this.form.getAttribute('action') || window.location.href)
    const params = new URLSearchParams()
    //params.append('q', this.form.elements.q.value)
    data.forEach((value, key) => {
      params.append(key, value)
    })
    //debugger;
    return this.loadUrl(url.pathname + '?' + params.toString())
  }

  async loadUrl(url) {
    const ajaxUrl = url + '&ajax=1'
    const response = await fetch(ajaxUrl, {
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    if (response.status >= 200 && response.status < 300) {
      const data = await response.json()
      //console.log(data)
      this.content.innerHTML = data.content
      this.pagination.innerHTML = data.pagination
      history.replaceState({}, '', url)  // pushState pour l'historique
    } else {
      console.error(response)
    }

  }
}