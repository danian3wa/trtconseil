Cale: config//bundles.php
Nume: bundles.php
Continut:
<?php

return [
    Symfony\Bundle\FrameworkBundle\FrameworkBundle::class => ['all' => true],
    Doctrine\Bundle\DoctrineBundle\DoctrineBundle::class => ['all' => true],
    Doctrine\Bundle\MigrationsBundle\DoctrineMigrationsBundle::class => ['all' => true],
    Symfony\Bundle\DebugBundle\DebugBundle::class => ['dev' => true],
    Symfony\Bundle\TwigBundle\TwigBundle::class => ['all' => true],
    Symfony\Bundle\WebProfilerBundle\WebProfilerBundle::class => ['dev' => true, 'test' => true],
    Symfony\UX\StimulusBundle\StimulusBundle::class => ['all' => true],
    Symfony\UX\Turbo\TurboBundle::class => ['all' => true],
    Twig\Extra\TwigExtraBundle\TwigExtraBundle::class => ['all' => true],
    Symfony\Bundle\SecurityBundle\SecurityBundle::class => ['all' => true],
    Symfony\Bundle\MonologBundle\MonologBundle::class => ['all' => true],
    Symfony\Bundle\MakerBundle\MakerBundle::class => ['dev' => true],
    JMS\SerializerBundle\JMSSerializerBundle::class => ['all' => true],
    Symfony\WebpackEncoreBundle\WebpackEncoreBundle::class => ['all' => true],
    Doctrine\Bundle\FixturesBundle\DoctrineFixturesBundle::class => ['dev' => true, 'test' => true],
    Knp\Bundle\PaginatorBundle\KnpPaginatorBundle::class => ['all' => true],
];

-------------------------------------
Cale: config//packages/asset_mapper.yaml
Nume: asset_mapper.yaml
Continut:
framework:
    asset_mapper:
        # The paths to make available to the asset mapper.
        paths:
            - assets/

-------------------------------------
Cale: config//packages/cache.yaml
Nume: cache.yaml
Continut:
framework:
    cache:
        # Unique name of your app: used to compute stable namespaces for cache keys.
        #prefix_seed: your_vendor_name/app_name

        # The "app" cache stores to the filesystem by default.
        # The data in this cache should persist between deploys.
        # Other options include:

        # Redis
        #app: cache.adapter.redis
        #default_redis_provider: redis://localhost

        # APCu (not recommended with heavy random-write workloads as memory fragmentation can cause perf issues)
        #app: cache.adapter.apcu

        # Namespaced pools use the above "app" backend by default
        #pools:
            #my.dedicated.cache: null

-------------------------------------
Cale: config//packages/debug.yaml
Nume: debug.yaml
Continut:
when@dev:
    debug:
        # Forwards VarDumper Data clones to a centralized server allowing to inspect dumps on CLI or in your browser.
        # See the "server:dump" command to start a new server.
        dump_destination: "tcp://%env(VAR_DUMPER_SERVER)%"

-------------------------------------
Cale: config//packages/doctrine.yaml
Nume: doctrine.yaml
Continut:
doctrine:
    dbal:
        host: '%env(DBHOST)%'
        port: '%env(DBPORT)%'
        driver: pdo_mysql
        dbname: '%env(DBNAME)%'
        user: '%env(MYSQL_DB_USER)%'
        #password: '%env(DATABASE_PASSWORD)%'
        #url: '%env(resolve:DATABASE_URL)%'

        # IMPORTANT: You MUST configure your server version,
        # either here or in the DATABASE_URL env var (see .env file)
        #server_version: '16'

        profiling_collect_backtrace: '%kernel.debug%'
        use_savepoints: true
    orm:
        auto_generate_proxy_classes: true
        enable_lazy_ghost_objects: true
        report_fields_where_declared: true
        validate_xml_mapping: true
        naming_strategy: doctrine.orm.naming_strategy.underscore_number_aware
        auto_mapping: true
        mappings:
            App:
                type: attribute
                is_bundle: false
                dir: '%kernel.project_dir%/src/Entity'
                prefix: 'App\Entity'
                alias: App
        controller_resolver:
            auto_mapping: false

when@test:
    doctrine:
        dbal:
            # "TEST_TOKEN" is typically set by ParaTest
            dbname_suffix: '_test%env(default::TEST_TOKEN)%'

when@prod:
    doctrine:
        orm:
            auto_generate_proxy_classes: false
            proxy_dir: '%kernel.build_dir%/doctrine/orm/Proxies'
            query_cache_driver:
                type: pool
                pool: doctrine.system_cache_pool
            result_cache_driver:
                type: pool
                pool: doctrine.result_cache_pool

    framework:
        cache:
            pools:
                doctrine.result_cache_pool:
                    adapter: cache.app
                doctrine.system_cache_pool:
                    adapter: cache.system

-------------------------------------
Cale: config//packages/doctrine_migrations.yaml
Nume: doctrine_migrations.yaml
Continut:
doctrine_migrations:
    migrations_paths:
        # namespace is arbitrary but should be different from App\Migrations
        # as migrations classes should NOT be autoloaded
        'DoctrineMigrations': '%kernel.project_dir%/migrations'
    enable_profiler: false

-------------------------------------
Cale: config//packages/framework.yaml
Nume: framework.yaml
Continut:
# see https://symfony.com/doc/current/reference/configuration/framework.html
framework:
    secret: '%env(APP_SECRET)%'
    #csrf_protection: true

    # Note that the session will be started ONLY if you read or write from it.
    session: true

    #esi: true
    #fragments: true

when@test:
    framework:
        test: true
        session:
            storage_factory_id: session.storage.factory.mock_file

-------------------------------------
Cale: config//packages/jms_serializer.yaml
Nume: jms_serializer.yaml
Continut:
jms_serializer:
    visitors:
        xml_serialization:
            format_output: '%kernel.debug%'
#    metadata:
#        auto_detection: false
#        directories:
#            any-name:
#                namespace_prefix: "My\\FooBundle"
#                path: "@MyFooBundle/Resources/config/serializer"
#            another-name:
#                namespace_prefix: "My\\BarBundle"
#                path: "@MyBarBundle/Resources/config/serializer"

when@prod:
    jms_serializer:
        visitors:
            json_serialization:
                options:
                    - JSON_UNESCAPED_SLASHES
                    - JSON_PRESERVE_ZERO_FRACTION

when@dev:
    jms_serializer:
        visitors:
            json_serialization:
                options:
                    - JSON_PRETTY_PRINT
                    - JSON_UNESCAPED_SLASHES
                    - JSON_PRESERVE_ZERO_FRACTION

-------------------------------------
Cale: config//packages/knp_paginator.yaml
Nume: knp_paginator.yaml
Continut:
knp_paginator:
    page_range: 5                       # number of links shown in the pagination menu (e.g: you have 10 pages, a page_range of 3, on the 5th page you'll see links to page 4, 5, 6)
    default_options:
        page_name: page                 # page query parameter name
        sort_field_name: sort           # sort field query parameter name
        sort_direction_name: direction  # sort direction query parameter name
        distinct: true                  # ensure distinct results, useful when ORM queries are using GROUP BY statements
        filter_field_name: filterField  # filter field query parameter name
        filter_value_name: filterValue  # filter value query parameter name
    template:
        pagination: '@KnpPaginator/Pagination/twitter_bootstrap_v4_pagination.html.twig' #'@KnpPaginator/Pagination/sliding.html.twig'     # sliding pagination controls template  replaced  twitter_bootstrap_v5_pagination.html.twig
        sortable: 'pagination/sortable.html.twig' #'pagination/sortable.html.twig' # sort link template
        filtration: '@KnpPaginator/Pagination/filtration.html.twig'  # filters template
-------------------------------------
Cale: config//packages/mailer.yaml
Nume: mailer.yaml
Continut:
framework:
    mailer:
        dsn: '%env(MAILER_DSN)%'

-------------------------------------
Cale: config//packages/messenger.yaml
Nume: messenger.yaml
Continut:
framework:
    messenger:
        failure_transport: failed

        transports:
            # https://symfony.com/doc/current/messenger.html#transport-configuration
            #async:
            #    dsn: '%env(MESSENGER_TRANSPORT_DSN)%'
            #    options:
            #        use_notify: true
            #        check_delayed_interval: 60000
            #    retry_strategy:
            #        max_retries: 3
            #        multiplier: 2
            failed: 'doctrine://default?queue_name=failed'
            # sync: 'sync://'

        #default_bus: messenger.bus.default

        #buses:
            #messenger.bus.default: []

        routing:
            #Symfony\Component\Mailer\Messenger\SendEmailMessage: async
            #Symfony\Component\Notifier\Message\ChatMessage: async
            #Symfony\Component\Notifier\Message\SmsMessage: async

            # Route your messages to the transports
            # 'App\Message\YourMessage': async

-------------------------------------
Cale: config//packages/monolog.yaml
Nume: monolog.yaml
Continut:
monolog:
    channels:
        - deprecation # Deprecations are logged in the dedicated "deprecation" channel when it exists

when@dev:
    monolog:
        handlers:
            main:
                type: stream
                path: "%kernel.logs_dir%/%kernel.environment%.log"
                level: debug
                channels: ["!event"]
            # uncomment to get logging in your browser
            # you may have to allow bigger header sizes in your Web server configuration
            #firephp:
            #    type: firephp
            #    level: info
            #chromephp:
            #    type: chromephp
            #    level: info
            console:
                type: console
                process_psr_3_messages: false
                channels: ["!event", "!doctrine", "!console"]

when@test:
    monolog:
        handlers:
            main:
                type: fingers_crossed
                action_level: error
                handler: nested
                excluded_http_codes: [404, 405]
                channels: ["!event"]
            nested:
                type: stream
                path: "%kernel.logs_dir%/%kernel.environment%.log"
                level: debug

when@prod:
    monolog:
        handlers:
            main:
                type: fingers_crossed
                action_level: error
                handler: nested
                excluded_http_codes: [404, 405]
                buffer_size: 50 # How many messages should be saved? Prevent memory leaks
            nested:
                type: stream
                path: php://stderr
                level: debug
                formatter: monolog.formatter.json
            console:
                type: console
                process_psr_3_messages: false
                channels: ["!event", "!doctrine"]
            deprecation:
                type: stream
                channels: [deprecation]
                path: php://stderr
                formatter: monolog.formatter.json

-------------------------------------
Cale: config//packages/notifier.yaml
Nume: notifier.yaml
Continut:
framework:
    notifier:
        chatter_transports:
        texter_transports:
        channel_policy:
            # use chat/slack, chat/telegram, sms/twilio or sms/nexmo
            urgent: ['email']
            high: ['email']
            medium: ['email']
            low: ['email']
        admin_recipients:
            - { email: admin@example.com }

-------------------------------------
Cale: config//packages/routing.yaml
Nume: routing.yaml
Continut:
framework:
    router:
        # Configure how to generate URLs in non-HTTP contexts, such as CLI commands.
        # See https://symfony.com/doc/current/routing.html#generating-urls-in-commands
        #default_uri: http://localhost

when@prod:
    framework:
        router:
            strict_requirements: null

-------------------------------------
Cale: config//packages/security.yaml
Nume: security.yaml
Continut:
security:
    role_hierarchy:
      ROLE_CANDIDAT: ROLE_USER
      ROLE_RECRUTEUR: ROLE_CANDIDAT
      ROLE_CONSULTANT: ROLE_RECRUTEUR
      ROLE_ADMIN: ROLE_CONSULTANT

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/(login|register), roles: PUBLIC_ACCESS}
        #- { path: ^/, roles: IS_AUTHENTICATED_FULLY}

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

-------------------------------------
Cale: config//packages/translation.yaml
Nume: translation.yaml
Continut:
framework:
    default_locale: en
    translator:
        default_path: '%kernel.project_dir%/translations'
        fallbacks:
            - en
        providers:

-------------------------------------
Cale: config//packages/twig.yaml
Nume: twig.yaml
Continut:
twig:
    file_name_pattern: '*.twig'
    form_themes: ['bootstrap_5_layout.html.twig']

when@test:
    twig:
        strict_variables: true

-------------------------------------
Cale: config//packages/validator.yaml
Nume: validator.yaml
Continut:
framework:
    validation:
        # Enables validator auto-mapping support.
        # For instance, basic validation constraints will be inferred from Doctrine's metadata.
        #auto_mapping:
        #    App\Entity\: []

when@test:
    framework:
        validation:
            not_compromised_password: false

-------------------------------------
Cale: config//packages/web_profiler.yaml
Nume: web_profiler.yaml
Continut:
when@dev:
    web_profiler:
        toolbar: true
        intercept_redirects: false

    framework:
        profiler:
            only_exceptions: false
            collect_serializer_data: true

when@test:
    web_profiler:
        toolbar: false
        intercept_redirects: false

    framework:
        profiler: { collect: false }

-------------------------------------
Cale: config//packages/webpack_encore.yaml
Nume: webpack_encore.yaml
Continut:
webpack_encore:
    # The path where Encore is building the assets - i.e. Encore.setOutputPath()
    output_path: '%kernel.project_dir%/public/build'
    # If multiple builds are defined (as shown below), you can disable the default build:
    # output_path: false

    # Set attributes that will be rendered on all script and link tags
    script_attributes:
        defer: true
        # Uncomment (also under link_attributes) if using Turbo Drive
        # https://turbo.hotwired.dev/handbook/drive#reloading-when-assets-change
        # 'data-turbo-track': reload
    # link_attributes:
        # Uncomment if using Turbo Drive
        # 'data-turbo-track': reload

    # If using Encore.enableIntegrityHashes() and need the crossorigin attribute (default: false, or use 'anonymous' or 'use-credentials')
    # crossorigin: 'anonymous'

    # Preload all rendered script and link tags automatically via the HTTP/2 Link header
    # preload: true

    # Throw an exception if the entrypoints.json file is missing or an entry is missing from the data
    # strict_mode: false

    # If you have multiple builds:
    # builds:
        # frontend: '%kernel.project_dir%/public/frontend/build'

        # pass the build name as the 3rd argument to the Twig functions
        # {{ encore_entry_script_tags('entry1', null, 'frontend') }}

framework:
    assets:
        json_manifest_path: '%kernel.project_dir%/public/build/manifest.json'

#when@prod:
#    webpack_encore:
#        # Cache the entrypoints.json (rebuild Symfony's cache when entrypoints.json changes)
#        # Available in version 1.2
#        cache: true

#when@test:
#    webpack_encore:
#        strict_mode: false

-------------------------------------
Cale: config//preload.php
Nume: preload.php
Continut:
<?php

if (file_exists(dirname(__DIR__).'/var/cache/prod/App_KernelProdContainer.preload.php')) {
    require dirname(__DIR__).'/var/cache/prod/App_KernelProdContainer.preload.php';
}

-------------------------------------
Cale: config//routes/framework.yaml
Nume: framework.yaml
Continut:
when@dev:
    _errors:
        resource: '@FrameworkBundle/Resources/config/routing/errors.xml'
        prefix: /_error

-------------------------------------
Cale: config//routes/security.yaml
Nume: security.yaml
Continut:
_security_logout:
    resource: security.route_loader.logout
    type: service

-------------------------------------
Cale: config//routes/web_profiler.yaml
Nume: web_profiler.yaml
Continut:
when@dev:
    web_profiler_wdt:
        resource: '@WebProfilerBundle/Resources/config/routing/wdt.xml'
        prefix: /_wdt

    web_profiler_profiler:
        resource: '@WebProfilerBundle/Resources/config/routing/profiler.xml'
        prefix: /_profiler

-------------------------------------
Cale: config//routes.yaml
Nume: routes.yaml
Continut:
controllers:
    resource:
        path: ../src/Controller/
        namespace: App\Controller
    type: attribute

-------------------------------------
Cale: config//services.yaml
Nume: services.yaml
Continut:
# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    uploads_cv: '%kernel.project_dir%/public/uploads/uploads_cv'
    app.contact.email: "daniel.webappdev@gmail.com"

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

-------------------------------------
Cale: src//Controller/.gitignore
Nume: .gitignore
Continut:

-------------------------------------
Cale: src//Controller/AdminController.php
Nume: AdminController.php
Continut:
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use App\Entity\User;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Doctrine\Persistence\ManagerRegistry;
//use Symfony\Bundle\SecurityBundle\Security;

class AdminController extends AbstractController
{
  private $doctrine;

  public function __construct(ManagerRegistry $doctrine)
  {
    $this->doctrine = $doctrine;
  }

  #[Route('/admin/{id}', name: 'app_admin', requirements: ['id' => '\d+'])]
  public function index(int $id): Response
  {
    $this->denyAccessUnlessGranted('ROLE_ADMIN');
    $admin = $this->getUser();
    return $this->render('admin/index.html.twig', [
      'admin' => $admin,
    ]);
  }

  #[Route('/admin/valider/{id}', name: 'admin_valider', requirements: ['id' => '\d+'])]
  #[Route('/admin/bloquer/{id}', name: 'admin_bloquer', requirements: ['id' => '\d+'])]
  public function role(User $admin = null, Request $request): Response
  {
    $em = $this->doctrine->getManager();
    $this->denyAccessUnlessGranted('ROLE_ADMIN');
    $role = '';
    $roles = '';

    if ($request->attributes->get('_route') === 'admin_bloquer') {
      $role = 'admin_tovalid';
      $roles = ['ROLE_ADMIN_TOVALID'];
    }

    if ($request->attributes->get('_route') === 'admin_valider') {
      $role = 'admin';
      $roles = ['ROLE_ADMIN'];
    }

    if ($role !== '') {
      $admin->setRole($role);
      $admin->setRoles($roles);
      $em->persist($admin);
      $em->flush();
    }

    return $this->redirectToRoute('admins');
  } // FIN function VALIDER ou BLOQUER

  #[Route('/admin/create/', name: 'admin_create')]
  #[Route('/admin/update/{id}/{back}', name: 'admin_update', requirements: ['id' => '\d+'])]
  public function edit(User $admin = null, Request $request, UserPasswordHasherInterface $userPasswordHasher, $back = 'admins'): Response
  {
    $this->denyAccessUnlessGranted('ROLE_ADMIN');
    // Savoir si on est en MODIFICATION (edit) ou AJOUT d'un consultant
    $editMode = true;

    if (!$admin) {
      $admin = new User();
      $editMode = false;
    }

    $form = $this->createFormBuilder($admin)
      ->add('nom')
      ->add('prenom')
      ->add('email')
      ->add('password')
      /* ->add('password_confirm') */
      ->add('role')
      ->getForm();

    $form->handleRequest($request);

    if ($form->isSubmitted() && $form->isValid()) {

      if ($admin->getRole() === 'admin') {
        $admin->setRoles(['ROLE_ADMIN']);
      } else {
        $admin->setRoles(['ROLE_ADMIN_TOVALID']);
      }
      // encodage du password
      $admin->setPassword(
        $userPasswordHasher->hashPassword(
          $admin,
          $form->get('password')->getData()
        )
      );

  /* $admin->setPasswordConfirm(
        $userPasswordHasher->hashPassword(
          $admin,
          $form->get('password_confirm')->getData()
        )
      ); */
      // FIN de l'encodage du PASSWORD    

      $em = $this->doctrine->getManager();
      $em->persist($admin);
      $em->flush();

      return $this->redirectToRoute($back);
    }

    return $this->render('admin/create.html.twig', [
      'formAdmin' => $form->createView(),
      'editMode' => $editMode,
      'back' => $back
    ]);
  } // FIN function create


  #[Route('/admin_remove/{id}', name: 'admin_remove')]
  public function remove(int $id): Response
  {
    $this->denyAccessUnlessGranted('ROLE_ADMIN');
    // Entity manager de Symfony
    $em = $this->doctrine->getManager();
    // On récupère le consultant (User) concerné
    $admin = $em->getRepository(User::class)->findBy(['id' => $id])[0];

    $em->remove($admin);
    $em->flush();

    return $this->redirectToRoute('admins');
  }
} // FIN de la classe


-------------------------------------
Cale: src//Controller/AnnonceController.php
Nume: AnnonceController.php
Continut:
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;
use App\Entity\Annonce;
use App\Entity\Candidature;
use App\Entity\Candidat;
use App\Entity\User;
use App\Entity\Recruteur;
use Doctrine\Persistence\ManagerRegistry;

class AnnonceController extends AbstractController
{
  private $doctrine;

  public function __construct(ManagerRegistry $doctrine)
  {
    $this->doctrine = $doctrine;
  }

  #[Route('/annonce/{id}', name: 'app_annonce', requirements: ['id' => '\d+'])]
  public function index(int $id): Response
  {
    $this->denyAccessUnlessGranted('ROLE_CANDIDAT');
    $em = $this->doctrine->getManager();
    $annonce = $em->getRepository(Annonce::class)->findOneBy(['id' => $id]);

    $candidatures = $em->getRepository(Candidature::class)->findBy(['annonce' => $annonce]);
    $candidat = $em->getRepository(Candidat::class)->findOneBy(['candidat_user' => $this->getUser()]);
    return $this->render('annonce/index.html.twig', [
      'annonce' => $annonce,
      'candidatures' => $candidatures,
      'candidat' => $candidat,
    ]);
  }


  #[Route('/annonce/valider/{id}', name: 'annonce_valider', requirements: ['id' => '\d+'])]
  #[Route('/annonce/bloquer/{id}', name: 'annonce_bloquer', requirements: ['id' => '\d+'])]
  public function role($id, Annonce $annonce = null, Request $request): Response
  {
    $this->denyAccessUnlessGranted('ROLE_RECRUTEUR');
    $em = $this->doctrine->getManager();

    $validation = false;

    if ($request->attributes->get('_route') === 'annonce_bloquer') {
      $validation = false;
    }

    if ($request->attributes->get('_route') === 'annonce_valider') {
      $validation = true;
    }

    if ($validation !== '') {
      //$consultant = $this->getUser();
      $consultant = $em->getRepository(User::class)->findOneBy(['id' => $id]);
      $annonce->setConsultant($consultant);
      $annonce->setValidation($validation);
      $em->persist($annonce);
      $em->flush();
    }

    return $this->redirectToRoute('annonces');
  } // FIN function VALIDER ou BLOQUER


  #[Route('/annonce/update/{id}', name: 'annonce_update', requirements: ['id' => '\d+'])]
  #[Route('/annonce/create/{recruteur}', name: 'annonce_create', requirements: ['recruteur' => '\d+'])]
  public function edit(Annonce $annonce = null, Request $request, int $recruteur = 0): Response
  {
    $this->denyAccessUnlessGranted('ROLE_RECRUTEUR');
    $em = $this->doctrine->getManager();

    // Savoir si on est en MODIFICATION (edit) ou AJOUT d'un annonce
    $editMode = true;

    if (!$annonce || $request->attributes->get("_route") === "annonce_create") {
      $annonce = new Annonce();


      // TROUVER LE RECRUTEUR qui est connecté !
      $recruteurObjet = $em->getRepository(Recruteur::class)->find($recruteur);
      $annonce->setRecruteur($recruteurObjet);

      $editMode = false;
    }

    //$form = $this->createForm(UserType::class, $annonce);
    $form = $this->createFormBuilder($annonce)
      ->add('titre')
      ->add('typecontrat')
      ->add('poste')
      ->add('ville')
      ->add('datedebut')
      ->add('datefin')
      ->add('nombreheures')
      ->add('salaire')
      ->add('description')
      ->getForm();

    /* , TextareaType::class, [
                        'attr' => array('cols' => '5', 'rows' => '5')]                     */

    $form->handleRequest($request);

    if ($form->isSubmitted() && $form->isValid()) {
      // Si l'annonce n'existe pas encore, on met une date de création.
      if (!$annonce->getId()) {
        $annonce->setDateajout(new \DateTime());
        $annonce->setValidation(false);
      }

      $em->persist($annonce);
      $em->flush();

      //unset($annonce);
      //unset($recruteurObjet);

      return $this->redirectToRoute('annonces');
      //return $this->render('annonce', ['id' => $recruteur->getId()]);
    }

    return $this->render('annonce/create.html.twig', [
      'formAnnonce' => $form->createView(),
      'editMode' => $editMode
    ]);
  } // FIN function create


  #[Route('/annonce_remove/{id}', name: 'annonce_remove')]
  public function remove(int $id): Response
  {
    $this->denyAccessUnlessGranted('ROLE_RECRUTEUR');
    // Entity manager de Symfony
    $em = $this->doctrine->getManager();
    // On récupère le annonce (User) concerné
    $annonce = $em->getRepository(Annonce::class)->findBy(['id' => $id])[0];

    // 1. Suppression de toutes les candidatures à cette annonce
    $candidatures = $em->getRepository(Candidature::class)->findBy(['annonce' => $annonce]);

    for ($i = 0; $i < count($candidatures); $i++) {
      $em->remove($candidatures[$i]);
      $em->flush();
    }

    // 2. Suppression de l'annonce
    $em->remove($annonce);
    $em->flush();

    return $this->redirectToRoute('annonces');
  }
}


-------------------------------------
Cale: src//Controller/Api/AnnoncesController.php
Nume: AnnoncesController.php
Continut:
<?php

namespace App\Controller\Api;


use JMS\Serializer\SerializerInterface;
use JMS\Serializer\SerializationContext;
use App\Repository\AnnonceRepository;
use Knp\Component\Pager\PaginatorInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;

class AnnoncesController extends AbstractController
{
  #[Route(path: 'api/annonces', name: "api_annonces_index", methods: ['GET'])]
  public function index(AnnonceRepository $annoncesRepository, SerializerInterface $serializer): JsonResponse
  {
    $annonces = $annoncesRepository->findAll();

    $context = SerializationContext::create()->setGroups("getAnnonces");
    $jsonannonces = $serializer->serialize($annonces, 'json', $context);

    return new JsonResponse($jsonannonces, Response::HTTP_OK, [], true);
  }

  #[Route(path: 'api/annoncesby', name: "api_annoncesby_index", methods: ['GET'])]
  public function annoncesBy(AnnonceRepository $annoncesRepository, SerializerInterface $serializer, PaginatorInterface $paginator, Request $request): JsonResponse
  {
    $annonces = $annoncesRepository->findBy([], []);
    $annoncesPager = $paginator->paginate(
      $annonces,
      $request->query->getInt('page', 1),
      9
    );

    $data = [];
    foreach ($annoncesPager->getItems() as $key => $value) {
      $dataItem = [
        'annonces' => $value
      ];
      $data[] = $dataItem;
    }

    $getData = [
      'data' => $data,
      'curent_page_number' => $annoncesPager->getCurrentPageNumber(),
      'number_per_page' => $annoncesPager->getItemNumberPerPage(),
      'total_count' => $annoncesPager->getTotalItemCount()
    ];

    $context = SerializationContext::create()->setGroups("getAnnonces");

    $jsonannonces = $serializer->serialize($getData, 'json', $context);

    return new JsonResponse($jsonannonces, Response::HTTP_OK, [], true);
  }

  #[Route(path: 'api/annonce/{id}', name: "api_annonce_show", methods: ['GET'])]
  public function showProduct(int $id, AnnonceRepository $annoncesRepository, SerializerInterface $serializer): JsonResponse
  {
    $annonces = $annoncesRepository->find($id);
    $context = SerializationContext::create()->setGroups("getAnnonces");
    $jsonannonces = $serializer->serialize($annonces, 'json', $context);

    return new JsonResponse($jsonannonces, Response::HTTP_OK, [], true);
  }

  #[Route(path: 'api/annoncesby/{poste}', name: "api_annoncesby_poste", methods: ['GET'])]
  public function annoncesByPoste(AnnonceRepository $annoncesRepository, SerializerInterface $serializer, PaginatorInterface $paginator, Request $request, string $poste): JsonResponse 
  {
    // Use the repository to get annonces filtered by poste
    $annonces = $annoncesRepository->findByPoste($poste);

    // Paginate the results
    $annoncesPager = $paginator->paginate(
      $annonces,
      $request->query->getInt('page', 1),
      9
    );

    // Transform the paginated data into the desired format
    $data = [];
    foreach ($annoncesPager->getItems() as $key => $value) {
      $dataItem = [
        'annonces' => $value
      ];
      $data[] = $dataItem;
    }

    $getData = [
      'data' => $data,
      'current_page_number' => $annoncesPager->getCurrentPageNumber(),
      'number_per_page' => $annoncesPager->getItemNumberPerPage(),
      'total_count' => $annoncesPager->getTotalItemCount()
    ];

    // Serialize and return the response
    $context = SerializationContext::create()->setGroups("getAnnonces");
    $jsonannonces = $serializer->serialize($getData, 'json', $context);

    return new JsonResponse($jsonannonces, Response::HTTP_OK, [], true);
  }

  #[Route(path: 'api/annoncesbyposte/{id}', name: "api_annoncesbyposte_id", methods: ['GET'])]
    public function annoncesByPosteId(int $id, AnnonceRepository $annonceRepository): JsonResponse 
    {
        // Retrieve annonces by poste ID using the repository method
        $annonces = $annonceRepository->findByPosteId($id);

        // Serialize the annonces and return the response
        // You can use a serializer or simply return the array as JSON
        $serializedAnnonces = $this->serializeAnnonces($annonces);

        return new JsonResponse($serializedAnnonces, Response::HTTP_OK);
    }

    /**
     * Serializes the given array of annonces.
     *
     * @param array $annonces An array of Annonce entities
     * @return array The serialized array of annonces
     */
    private function serializeAnnonces(array $annonces): array
    {
        $serializedAnnonces = [];

        foreach ($annonces as $annonce) {
            // Serialize each annonce as needed
            $serializedAnnonce = [
                'id' => $annonce->getId(),
                'titre' => $annonce->getTitre(),
                'typecontrat' => $annonce->getTypecontrat(),
                'poste' => $annonce->getPoste()->getLibelle(),
                'ville' => $annonce->getVille(),
                'datedebut' => $annonce->getDatedebut(),
                'datefin' => $annonce->getDatefin(),
                'nombreheures' => $annonce->getNombreheures(),
                'salaire' => $annonce->getSalaire(),
                'description' => $annonce->getDescription(),
                'validation' => $annonce->isValidation(),
                'recruteur' => $annonce->getRecruteur()->getNom(),
                'dateajout' => $annonce->getDateajout(),
                // Add more fields as needed
            ];

            $serializedAnnonces[] = $serializedAnnonce;
        }

        return $serializedAnnonces;
    }
}

-------------------------------------
Cale: src//Controller/CandidatController.php
Nume: CandidatController.php
Continut:
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;
use App\Entity\Candidat;
use App\Entity\User;
use App\Form\UserType;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\HttpFoundation\File\UploadedFile;

class CandidatController extends AbstractController
{
  private $doctrine;

  public function __construct(ManagerRegistry $doctrine)
  {
    $this->doctrine = $doctrine;
  }


  #[Route('/candidat/{id}', name: 'app_candidat', requirements: ['id' => '\d+'])]
  #[Route('/candidat/{id}/{annonce}', name: 'app_candidat_annonce', requirements: ['id' => '\d+'])]
  public function index(int $id, int $annonce = null): Response
  {
    $this->denyAccessUnlessGranted('ROLE_CANDIDAT');
    $em = $this->doctrine->getManager();
    $candidat = $em->getRepository(Candidat::class)->findOneBy(['id' => $id]);
    //$cv = $candidat->getCv();
    // dd($cv);
    return $this->render('candidat/index.html.twig', [
      'candidat' => $candidat,
      'annonce' => $annonce
    ]);
  }


  #[Route('/candidat/valider/{id}', name: 'candidat_valider', requirements: ['id' => '\d+'])]
  #[Route('/candidat/bloquer/{id}', name: 'candidat_bloquer', requirements: ['id' => '\d+'])]
  public function role($id, Candidat $candidat = null, Request $request): Response
  {
    $this->denyAccessUnlessGranted('ROLE_CONSULTANT');
    $em = $this->doctrine->getManager();
    $role = '';
    $roles = '';

    if ($request->attributes->get('_route') === 'candidat_bloquer') {
      $role = 'candidat_tovalid';
      $roles = ['ROLE_CANDIDAT_TOVALID'];
    }

    if ($request->attributes->get('_route') === 'candidat_valider') {
      $role = 'candidat';
      $roles = ['ROLE_CANDIDAT'];
    }

    if ($role !== '') {
      //$consultant = $this->getUser();
      $consultant = $em->getRepository(User::class)->findOneBy(['id' => $id]);
      $candidat->setConsultant($consultant);
      $candidat->getCandidatUser()->setRole($role);
      $candidat->getCandidatUser()->setRoles($roles);
      $em->persist($candidat);
      $em->flush();
    }

    return $this->redirectToRoute('candidats');
  } // FIN function VALIDER ou BLOQUER


  #[Route('/candidat/update/{id}/{back}', name: 'candidat_update', requirements: ['id' => '\d+'])]
  #[Route('/candidat/create/', name: 'candidat_create')]
  public function edit($id, Candidat $candidat = null, User $user = null, UserPasswordHasherInterface $userPasswordHasher, Request $request, $back = 'candidats'): Response
  {
    $this->denyAccessUnlessGranted('ROLE_CANDIDAT');
    $em = $this->doctrine->getManager();

    //$user = $this->getUser();
    $user = $em->getRepository(User::class)->findOneBy(['id' => $id]);
    //dd($user);
    if ($user->getRole() === 'candidat' || $user->getRole() === 'candidat_tovalid') {
      $candidat = $em->getRepository(Candidat::class)->findBy(['candidat_user' => $user])[0];
    }
    //dd($candidat);
    // Savoir si on est en MODIFICATION (edit) ou AJOUT d'un candidat
    $editMode = true;

    if (!$candidat) {
      //$candidat = new Candidat();
      $editMode = false;
    }

    if (!$user) {
      $user = $em->getRepository(User::class)->findOneBy(['id' => $candidat->getCandidatUser()->getId()]);

      $editMode = false;
    }
    /*
    if ($request->request->get('formUser')) {
      $user->setNom($request->request->get('formUser')['nom']);
      $user->setPrenom($request->request->get('formUser')['prenom']);
      $user->setEmail($request->request->get('formUser')['email']);
      $user->setPassword($request->request->get('formUser')['password']);
      $user->setRole($request->request->get('formUser')['role']);
    }*/
    $formUserData = $request->request->get('formUser');
    if (isset($formUserData['nom'])) {
      $user->setNom($formUserData['nom']);
    }
    if (isset($formUserData['prenom'])) {
      $user->setPrenom($formUserData['prenom']);
    }
    if (isset($formUserData['email'])) {
      $user->setEmail($formUserData['email']);
    }
    if (isset($formUserData['password'])) {
      $user->setPassword($formUserData['password']);
    }
    if (isset($formUserData['role'])) {
      $user->setRole($formUserData['role']);
    }


    $candidat->setCandidatUser($user);

    // Concaténation du chemin de téléchargement configuré avec le nom de fichier stocké et création d'une nouvelle classe File.
    if ($candidat->getCv() !== null) {

      $candidat->setCv(
        /* new File($this->getParameter('uploads_cv').'/'.$candidat->getCv()) */
        ($candidat->getCv())
      );
    }


    // Champs du formulaire, partie USER
    $formUser = $this->createForm(UserType::class, $user);
    /* var_dump($formUser); */

    //$formUser = $this->get('form.factory')->createNamedBuilder('formUser', UserType::class, $user)->getForm();

    // Champs du formulaire CANDIDAT (CV uniquement)
    $form = $this->createFormBuilder($candidat)
      ->add('cv', FileType::class, array('data_class' => null))
      ->getForm();

    $form->handleRequest($request);
    $formUser->handleRequest($request);

    if ($form->isSubmitted() && $form->isValid()) {
      // Traitement du fichier PDF du CV

      // Récupération des données du formulaire
      $file = $form['cv']->getData();

      if ($file && $file->guessExtension() === 'pdf') {

        $originalFilename = pathinfo($file->getClientOriginalName(), PATHINFO_FILENAME);
        //dd($originalFilename);
        // this is needed to safely include the file name as part of the URL
        $safeFilename = transliterator_transliterate('Any-Latin; Latin-ASCII; [^A-Za-z0-9_] remove; Lower()', $originalFilename);
        //$safeFilename = "";
        $newFilename = $safeFilename . '-' . uniqid() . '.' . $file->guessExtension();
        //dd($newFilename);
        // Move the file to the directory where CV are stored
        try {
          $file->move($this->getParameter('uploads_cv'), $newFilename);
          //$file->move_uploaded_file($_FILES['file']['tmp_name'], 'uploads_cv' . $newFilename);
        } catch (FileException $e) {
          // ... handle exception if something happens during file upload
          echo "File could not be upload. Error: " . $e->getMessage();
        }

        // updates the 'cvFilename' property to store the PDF file name
        // instead of its contents
        $candidat->setCv($newFilename);

        $em->persist($candidat);
        $em->flush();
      } else {
        echo "File could not be upload.";
        $this->addFlash('warning', 'Le fichier n\'a pas été enregistré.');
        return $this->redirectToRoute('compte');
      } // FIN du IF($file)


      return $this->redirectToRoute($back);
      //return $this->render('candidat', ['id' => $candidat->getId()]);
    } // FIN du IF formulaire CV validé

    if ($formUser->isSubmitted() && $formUser->isValid()) {
      //var_dump("valide user");

      // SET ROLES []
      if ($user->getRole() === 'candidat') {
        $user->setRoles(['ROLE_CANDIDAT']);
      } else {
        $user->setRoles(['ROLE_CANDIDAT_TOVALID']);
      } // Fin SET ROLES []

      // encodage du password
      $user->setPassword(
        $userPasswordHasher->hashPassword(
          $user,
          $formUser->get('password')->getData()
        )
      );


      $em->persist($user);
      $em->flush();

      return $this->redirectToRoute($back);
      //return $this->render('candidat', ['id' => $candidat->getId()]);
    } else if (!$formUser->isSubmitted()) {
      //var_dump("pas soumis");
    }

    return $this->render('candidat/create.html.twig', [
      'formCandidat' => $form->createView(),
      'formUser' => $formUser->createView(),
      'editMode' => $editMode,
      'back' => $back
    ]);
  } // FIN function EDIT


  #[Route('/candidat_remove/{id}', name: 'candidat_remove')]
  public function remove(int $id): Response
  {
    $this->denyAccessUnlessGranted('ROLE_CONSULTANT');
    // Entity manager de Symfony
    $em = $this->doctrine->getManager();
    // On récupère le candidat (User) concerné
    $candidat = $em->getRepository(Candidat::class)->findBy(['id' => $id])[0];

    // Suppression de l'arbre
    $em->remove($candidat);
    $em->flush();
    $em->remove($candidat->getUser());
    $em->flush();

    return $this->redirectToRoute('candidats');
  }
}

-------------------------------------
Cale: src//Controller/CandidatureController.php
Nume: CandidatureController.php
Continut:
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use App\Entity\Candidature;
use App\Entity\Candidat;
use App\Entity\Annonce;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\Mailer\MailerInterface;
use Symfony\Component\Mime\Email;
use Symfony\Component\Mime\Part\File;
use Symfony\Component\Mime\Part\DataPart;
use Symfony\Component\Mailer\Exception\TransportExceptionInterface;

class CandidatureController extends AbstractController
{
  private $doctrine;

  public function __construct(ManagerRegistry $doctrine)
  {
    $this->doctrine = $doctrine;
  }

  #[Route('/candidature/{id}', name: 'candidature', requirements: ['id' => '\d+'])]
  public function index(int $id): Response
  {
    $this->denyAccessUnlessGranted('ROLE_CONSULTANT');
    $em = $this->doctrine->getManager();

    $candidature = $em->getRepository(Candidature::class)->findOneBy(['id' => $id]);

    $candidatId = $candidature->getCandidat();
    $annonceId = $candidature->getAnnonce();
    $annonce = $em->getRepository(Annonce::class)->findOneBy(['id' => $annonceId]);
    //dd($annonce);
    /* Ajout d'un candidat fictif pour pouvoir tester le bouton POSTULER A UNE ANNONCE */
    $candidat = $em->getRepository(Candidat::class)->findOneBy(['id' => $candidatId]);
    //dd($candidat);
    return $this->render('candidature/index.html.twig', [
      'annonce' => $annonce,
      /* 'recruteur' => $recruteur, */
      'candidature' => $candidature,
      'candidat' => $candidat,
    ]);
  }

  #[Route('/candidatures', name: 'candidatures')]
  public function allCandidatures(): Response
  {
    $this->denyAccessUnlessGranted('ROLE_CONSULTANT');
    $em = $this->doctrine->getManager();
    $consultant = $this->getUser();

    $candidatures = $em->getRepository(Candidature::class)->findAll();
    $candidat = $em->getRepository(Candidat::class)->findAll();
    //dd($candidatures);


    $this->denyAccessUnlessGranted('ROLE_CANDIDAT');
    return $this->render('candidature/all.html.twig', [
      'controller_name' => 'CandidatureController',
      'candidatures' => $candidatures,
      'candidat' => $candidat,
    ]);
  }

  #[Route('/candidature/valider/{id}', name: 'candidature_valider', requirements: ['id' => '\d+'])]
  #[Route('/candidature/bloquer/{id}', name: 'candidature_bloquer', requirements: ['id' => '\d+'])]
  public function etat($id, Candidature $candidature = null, MailerInterface $mailer, Request $request): Response
  {
    $this->denyAccessUnlessGranted('ROLE_CONSULTANT');
    $em = $this->doctrine->getManager();
    $etat = '';

    if ($request->attributes->get('_route') === 'candidature_bloquer') {
      $etat = 'tovalid';
    }

    if ($request->attributes->get('_route') === 'candidature_valider') {
      $etat = 'valid';

      $candidature = $em->getRepository(Candidature::class)->findOneBy(['id' => $id]);
      $annonceObjet = $candidature->getAnnonce();
      $candidatObjet = $candidature->getCandidat();
      $cv = $candidatObjet->getCV();
      $mailRecruteur = $annonceObjet->getRecruteur()->getRecruteurUser()->getEmail();
      $recruterName = $annonceObjet->getRecruteur()->getNom();
      $nom = $candidatObjet->getCandidatUser()->getNom();
      $prenom = $candidatObjet->getCandidatUser()->getPrenom();
      if ($cv !== "") {
        // Create the email
        $email = (new Email())
          ->priority(Email::PRIORITY_HIGH)
          ->from('test@mail.com')
          ->to($mailRecruteur)
          ->subject('Candidature à une annonce')
          ->text('Votre annonce a un nouveau candidat, il s\'agit de ' . $nom . ' ' . $prenom . '.');

        // Embed CV attachment

        $cvPath = $this->getParameter('uploads_cv') . '/' . $cv;
        //if (file_exists($cvPath)) {
        $attachment = (new File($cvPath));
        $email->addPart(new DataPart($attachment));


        try {
          // Send the email
          $mailer->send($email);
          //dd($mailer);
          $this->addFlash('success', 'Un email a été envoyé au recruteur.');
        } catch (TransportExceptionInterface $e) {
          $this->addFlash('error', 'There was a problem sending the email. Please try again later.');
          echo "Message could not be sent. Mailer Error: " . $e->getMessage();
        }

        $_SESSION["resultat_mail"] = "Envoie du mail au recruteur : " . $recruterName;
      } else {
        // Handle case where CV file is not found
        $etat = 'tovalid';
        $this->addFlash('warning', 'Le CV du candidat n\'a pas été trouvé. Merci de contacter le candidat ' . $nom . ' ' . $prenom . '.');
        $this->addFlash('warning', 'Email non envoyé au recruteur : ' . $recruterName);
        //$_SESSION["resultat_mail"] = "Email non envoyé au recruteur : " . $recruterName;
      }
    }

    if ($etat !== '') {
      $consultant = $this->getUser();
      $candidature->setConsultantApproval($consultant);
      $candidature->setEtat($etat);
      try {
        $em->persist($candidature);
        $em->flush();
      } catch (\Doctrine\DBAL\Exception $e) {
        // Handle exception
        $this->addFlash('error', 'There was a problem saving the data. Please try again later.');
      }
    }

    return $this->redirectToRoute('candidatures');
  } // FIN function VALIDER ou BLOQUER

  #[Route('/candidature/create/{annonce}/{candidat}', name: 'candidature_create', requirements: ['annonce' => '\d+', 'candidat' => '\d+'])]
  public function createOnly(int $annonce, int $candidat): Response
  {
    $this->denyAccessUnlessGranted('ROLE_CANDIDAT');
    $candidature = new Candidature();

    $em = $this->doctrine->getManager();

    $annonceObjet = $em->getRepository(Annonce::class)->find($annonce);

    // TROUVER LE CANDIDAT qui est connecté !
    $candidatObjet = $em->getRepository(Candidat::class)->find($candidat);

    $candidature->setAnnonce($annonceObjet);
    $candidature->setCandidat($candidatObjet);
    $candidature->setEtat('tovalid');
    $em->persist($candidature);
    $em->flush();
    return $this->redirectToRoute('annonces');
  } // FIN function create
}

-------------------------------------
Cale: src//Controller/CompteController.php
Nume: CompteController.php
Continut:
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;
use Doctrine\Persistence\ManagerRegistry;
use App\Entity\User;
use App\Entity\Recruteur;
use App\Entity\Candidat;

class CompteController extends AbstractController
{
  private $doctrine;
 

  public function __construct(ManagerRegistry $doctrine)
  {
    $this->doctrine = $doctrine;
  }

  #[Route('/compte', name: 'compte')]
  public function index(): Response
  {
    $message='';

    $em = $this->doctrine->getManager();
    $user = $em->getRepository(User::class)->find($this->getUser());
    //$user = $this->getUser();

    //$userRole = $user->getRole();
    //dd($user);
    if ($user !== null) {
      if ($user->getRole() === 'admin' || $user->getRole() === 'admin_tovalid') {
        return $this->render('admin/index.html.twig', [
          'admin' => $user,
          'back' => 'compte'
        ]);
      } else if ($user->getRole() === 'consultant' || $user->getRole() === 'ROLE_CONSULTANT_TOVALID') {
        return $this->render('consultant/index.html.twig', [
          'consultant' => $user,
          'back' => 'compte'
        ]);
      } else if ($user->getRole() === 'recruteur' || $user->getRole() === 'recruteur_tovalid') {
        $recruteur = $em->getRepository(Recruteur::class)->findBy(['recruteur_user' => $user])[0];
        //$recruteur = $em->getRepository(Recruteur::class)->findOneBy(['recruteur_user' => $user]);
        return $this->render('recruteur/index.html.twig', [
          'recruteur' => $recruteur,
          'back' => 'compte'
        ]);
      } else if ($user->getRole() === 'candidat' || $user->getRole() === 'candidat_tovalid') {
        $candidat = $em->getRepository(Candidat::class)->findBy(['candidat_user' => $user])[0];
        
        //$candidat = $em->getRepository(Candidat::class)->findOneBy(['candidat_user' => $user]);
        //dd($candidat);
        return $this->render('candidat/index.html.twig', [ //candidat/index.html.twig
          'candidat' => $candidat,
          'back' => 'compte'
        ]);
      }
    } else {
      $message = "Vous devez vous connecter pour accéder à votre compte utilisateur.";
    }
    return $this->render('compte/index.html.twig', [
      'message' => $message,
    ]);
  
  }
}

-------------------------------------
Cale: src//Controller/ConsultantController.php
Nume: ConsultantController.php
Continut:
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use App\Entity\User;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class ConsultantController extends AbstractController
{
  private $doctrine;

  public function __construct(ManagerRegistry $doctrine)
  {
    $this->doctrine = $doctrine;
  }
 
  #[Route('/consultant/{id}', name: 'app_consultant', requirements: ['id' => '\d+'])]
  public function index(int $id): Response
  {
    $this->denyAccessUnlessGranted('ROLE_ADMIN');
    $em = $this->doctrine->getManager();
    $consultant = $em->getRepository(User::class)->findOneBy(['id' => $id, 'role' => 'consultant']);

    return $this->render('consultant/index.html.twig', [
      'consultant' => $consultant,
    ]);
  }


  #[Route('/consultant/create/', name: 'consultant_create')]
  #[Route('/consultant/update/{id}/{back}', name: 'consultant_update', requirements: ['id' => '\d+'])]
  public function edit(User $consultant = null, UserPasswordHasherInterface $userPasswordHasher, Request $request, $back = 'consultants'): Response
  {
    $this->denyAccessUnlessGranted('ROLE_CONSULTANT');
    // Savoir si on est en MODIFICATION (edit) ou AJOUT d'un consultant
    $editMode = true;

    if (!$consultant) {
      $consultant = new User();
      $editMode = false;
      $consultant->setRoles(['ROLE_CONSULTANT']);
    }

    $form = $this->createFormBuilder($consultant)
      ->add('nom')
      ->add('prenom')
      ->add('email')
      ->add('password')
      /* ->add('password_confirm') */
      ->add('role')
      ->getForm();

    $form->handleRequest($request);

    if ($form->isSubmitted() && $form->isValid()) {

      // SET ROLES []
      if ($consultant->getRole() === 'consultant') {
        $consultant->setRoles(['ROLE_CONSULTANT']);
      } else {
        $consultant->setRoles(['ROLE_CONSULTANT_TOVALID']);
      } // Fin SET ROLES []
      // encodage du password
      $consultant->setPassword(
        $userPasswordHasher->hashPassword(
          $consultant,
          $form->get('password')->getData()
        )
      );

      /* $consultant->setPasswordConfirm(
          $userPasswordHasher->hashPassword(
            $consultant,
              $form->get('password_confirm')->getData()
          )
        ); */
      // FIN de l'encodage du PASSWORD    


      $em = $this->doctrine->getManager();
      $em->persist($consultant);
      $em->flush();

      return $this->redirectToRoute($back);
      //return $this->render('consultant', ['id' => $consultant->getId()]);
    }

    return $this->render('consultant/create.html.twig', [
      'formConsultant' => $form->createView(),
      'editMode' => $editMode,
      'back' => $back
    ]);
  } // FIN function create

  
  #[Route('/consultant_remove/{id}', name: 'consultant_remove')]
  public function remove(int $id): Response
  {
    $this->denyAccessUnlessGranted('ROLE_ADMIN');
    // Entity manager de Symfony
    $em = $this->doctrine->getManager();
    // On récupère le consultant (User) concerné
    $consultant = $em->getRepository(User::class)->findBy(['id' => $id])[0];

    // Suppression de l'arbre
    $em->remove($consultant);
    $em->flush();

    return $this->redirectToRoute('consultants');
  }
} // FIN de la classe

-------------------------------------
Cale: src//Controller/HomeController.php
Nume: HomeController.php
Continut:
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\JsonResponse;
use App\Repository\AnnonceRepository;
use App\Data\SearchData;
use App\Form\SearchForm;
use App\Entity\User;
use App\Entity\Recruteur;
use App\Entity\Candidat;
use App\Entity\Candidature;
use App\Entity\Annonce;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;

class HomeController extends AbstractController
{
  private $doctrine;

  public function __construct(ManagerRegistry $doctrine)
  {
    $this->doctrine = $doctrine;
  }

  #[Route('/', name: 'home')]
  public function index(AnnonceRepository $annonceRepository,  User $connectedUser, TokenInterface $token, Request $request): Response
  {
    $em = $this->doctrine->getManager();
    //$connectedUser = $this->getUser();

    if (!$connectedUser === null) {
        /** @var User $user */ // Added type hint
        $connectedUser = $token->getUser();
      $user = $em->getRepository(User::class)->find($connectedUser);
    } else {
      $user = null;
    }
    //$user = $em->getRepository(User::class)->find($this->getUser());
    $candidat = 0;
    if ($user !== null) {
      if ($user->getRole() === 'candidat') {
        $candidat = $em->getRepository(Candidat::class)->findBy(['candidat_user' => $user])[0];
      }
    }
    $data = new SearchData();
    $data->page = $request->get('page', 1);
    $form = $this->createForm(SearchForm::class, $data);
    $form->handleRequest($request);
    $annonces = $annonceRepository->findSearch($data);
    
    //$liste = $em->getRepository(Annonce::class)->findAll();
    if ($request->get('ajax')) {
      //dd($annonces);
      //dd($form);
      return new JsonResponse([
        'content' => $this->renderView('home/_annonces.html.twig', ['annonces' => $annonces, 'candidat' => $candidat]),
        'pagination' => $this->renderView('home/_pagination.html.twig', ['annonces' => $annonces, 'candidat' => $candidat]),
      ]);
    }
    return $this->render('home/index.html.twig', [
      'controller_name' => 'HomeController',
      'user' => $user,
      'annonces' => $annonces,
      'form' => $form->createView(),
      'candidat' => $candidat
    ]);
  }

  #[Route('/admins', name: 'admins')]
  public function allAdmins(): Response
  {
    $this->denyAccessUnlessGranted('ROLE_ADMIN');
    // On récupère l'Entity Manager de Symfony
    $em = $this->doctrine->getManager();
    $adminsValidated = $em->getRepository(User::class)->findBy(['role' => 'admin']);
    $adminsLocked = $em->getRepository(User::class)->findBy(['role' => 'admin_tovalid']);

    return $this->render('admin/all.html.twig', [
      'admins' => $adminsValidated,
      'admins_locked' => $adminsLocked
    ]);
  }

  #[Route('/consultants', name: 'consultants')]
  public function allConsultants(): Response
  {
    $this->denyAccessUnlessGranted('ROLE_CONSULTANT');
    // On récupère l'Entity Manager de Symfony
    $em = $this->doctrine->getManager();
    $consultants = $em->getRepository(User::class)->findBy(['role' => 'consultant']);

    return $this->render('consultant/all.html.twig', [
      'consultants' => $consultants,
    ]);
  }

  #[Route('/recruteurs', name: 'recruteurs')]
  public function allRecruteurs(): Response
  {
    $this->denyAccessUnlessGranted('ROLE_RECRUTEUR');
    // On récupère l'Entity Manager de Symfony
    $em = $this->doctrine->getManager();

    $liste = $em->getRepository(Recruteur::class)->findAll();
    //dd($liste);
    return $this->render('recruteur/all.html.twig', [
      'recruteurs' => $liste
    ]);
  }

  #[Route('/candidats', name: 'candidats')]
  public function allCandidats(): Response
  {
    $this->denyAccessUnlessGranted('ROLE_CONSULTANT');
    // On récupère l'Entity Manager de Symfony
    $em = $this->doctrine->getManager();

    $liste = $em->getRepository(Candidat::class)->findAll();
    //dd($liste);
    return $this->render('candidat/all.html.twig', [
      'candidats' => $liste
    ]);
  }

  #[Route('/annonces', name: 'annonces')]
  public function allAnnonces(): Response
  {
    $this->denyAccessUnlessGranted('ROLE_CANDIDAT');
    // On récupère l'Entity Manager de Symfony
    $em = $this->doctrine->getManager();
    $resultatMail = isset($_SESSION["resultat_mail"]) ? $_SESSION["resultat_mail"] : "";
    //dd($resultatMail);
    //dd($_SESSION["resultat_mail"]);
    //dd(isset($_SESSION["resultat_mail"]));
    // Si le USER est RECRUTEUR, on n'affiche que SES annonces
    // Si le USER est CANDIDAT, on n'affiche que les annonces VALIDES et on indique celles où il a déjà postulé
    $recruteurId = 0;
    $candidatId = 0;
    $dejaPostule = [];
    $connectedUser = $this->getUser();
    if ($connectedUser !== null) {
      $user = $em->getRepository(User::class)->find($connectedUser);
    } else {
      $user = null;
    }
    //$user = $em->getRepository(User::class)->find($this->getUser());
    $userRole = $user->getRole();
    /*if ($this->security->getUser()->getRole() === 'recruteur') {*/
    if ($userRole === 'recruteur') {
      $recruteur = $em->getRepository(Recruteur::class)->findOneBy(['recruteur_user' => $this->getUser()]);
      $recruteurId = $recruteur->getId();
      $liste = $em->getRepository(Annonce::class)->findBy(['recruteur' => $recruteur->getId()]);
    } elseif ($userRole === 'candidat') {
      $liste = $em->getRepository(Annonce::class)->findBy(['validation' => '1']);
      $candidat = $em->getRepository(Candidat::class)->findOneBy(['candidat_user' => $this->getUser()]);
      $candidatId = $candidat->getId();
      $dejaPostuleObjects = $em->getRepository(Candidature::class)->findBy(['candidat' => $candidat]);

      for ($dj = 0; $dj < count($dejaPostuleObjects); $dj++) {
        array_push($dejaPostule, $dejaPostuleObjects[$dj]->getAnnonce()->getId());
      }

      //$dejaPostule = $dejaPostuleArray[0]->getAnnonce()->getId();

    } else {
      $liste = $em->getRepository(Annonce::class)->findAll();
    }
    return $this->render('annonce/all.html.twig', [
      'annonces' => $liste,
      'mailok' => $resultatMail,
      'id_recruteur' => $recruteurId,
      'id_candidat' => $candidatId,
      'deja_postule' => $dejaPostule
    ]);
  }
}

-------------------------------------
Cale: src//Controller/PagesController.php
Nume: PagesController.php
Continut:
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class PagesController extends AbstractController
{
  #[Route('/apropos', name: 'app_apropos')]
  public function apropos(): Response
  {
    //$currentPage = basename($_SERVER['SCRIPT_NAME']);
    //var_dump($currentPage);
    return $this->render('pages/apropos.html.twig', [
      'title' => 'A propos',
    ]);
  }

  #[Route('/mentions', name: 'mentions_legales')]
  public function contact(): Response
  {
    return $this->render('pages/mentions.html.twig', [
      'controller_name' => 'PagesController',
      'title' => 'Mentions légales',
    ]);
  }

  #[Route('/cgu', name: 'page_cgu')]
  public function cgu(): Response
  {
    return $this->render('pages/cgu.html.twig', [
      'controller_name' => 'PagesController',
      'title' => 'CGU',
    ]);
  }
}

-------------------------------------
Cale: src//Controller/RecruteurController.php
Nume: RecruteurController.php
Continut:
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Request;
use App\Entity\Recruteur;
use App\Entity\User;
use App\Entity\Annonce;
use App\Entity\Candidature;
use App\Form\UserType;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\Form\FormFactoryInterface;


class RecruteurController extends AbstractController
{

  private $doctrine;
  private $formFactory;

  public function __construct(ManagerRegistry $doctrine, FormFactoryInterface $formFactory)
  {
    $this->doctrine = $doctrine;
    $this->formFactory = $formFactory;
  }


  #[Route('/recruteur/{id}', name: 'app_recruteur', requirements: ['id' => '\d+'])]
  public function index(int $id): Response
  {
    $this->denyAccessUnlessGranted('ROLE_RECRUTEUR');
    $em = $this->doctrine->getManager();
    $recruteur = $em->getRepository(Recruteur::class)->findOneBy(['id' => $id]);
    //dd($recruteur);
    return $this->render('recruteur/index.html.twig', [
      'recruteur' => $recruteur,
    ]);
  }


  #[Route('/recruteur/valider/{id}', name: 'recruteur_valider', requirements: ['id' => '\d+'])]
  #[Route('/recruteur/bloquer/{id}', name: 'recruteur_bloquer', requirements: ['id' => '\d+'])]
  public function role($id, Recruteur $recruteur = null, Request $request): Response
  {
    $this->denyAccessUnlessGranted('ROLE_CONSULTANT');
    $em = $this->doctrine->getManager();
    //$user = new User();
    //$user = $em->getRepository(User::class)->findOneBy(['id'=>$recruteur->getUser()->getId()]);

    $role = '';
    $roles = '';

    if ($request->attributes->get('_route') === 'recruteur_bloquer') {
      $role = 'recruteur_tovalid';
      $roles = ['ROLE_RECRUTEUR_TOVALID'];
    }

    if ($request->attributes->get('_route') === 'recruteur_valider') {
      $role = 'recruteur';
      $roles = ['ROLE_RECRUTEUR'];
    }

    if ($role !== '') {
      //$consultant = $this->getUser();
      $consultant = $em->getRepository(User::class)->findOneBy(['id' => $id]);
      $recruteur->setConsultant($consultant);
      $recruteur->getRecruteurUser()->setRole($role);
      $recruteur->getRecruteurUser()->setRoles($roles);
      $em->persist($recruteur);
      $em->flush();
    }

    return $this->redirectToRoute('recruteurs');
  } // FIN function VALIDER ou BLOQUER


  #[Route('/recruteur/update/{id}/{back}', name: 'recruteur_update', requirements: ['id' => '\d+'])]
  #[Route('/recruteur/create/', name: 'recruteur_create')]
  public function edit(Recruteur $recruteur = null, User $user = null, UserPasswordHasherInterface $userPasswordHasher, Request $request, $back = 'recruteurs'): Response
  {
    $this->denyAccessUnlessGranted('ROLE_RECRUTEUR');
    $em = $this->doctrine->getManager();
    $user = $this->getUser();
    // Savoir si on est en MODIFICATION (edit) ou AJOUT d'un recruteur
    $editMode = true;
    // dd($recruteur);
    if (!$recruteur) {
      //$recruteur = new Recruteur();
      $editMode = false;
    }
    //dd($user);
    if (!$user) {
      $user = $em->getRepository(User::class)->findOneBy(['id' => $recruteur->getRecruteurUser()->getId()]);
      $editMode = false;
    }
    /*
    if ($request->request->get('formUser')) {
      $user->setNom($request->request->get('formUser')['nom']);
      $user->setPrenom($request->request->get('formUser')['prenom']);
      $user->setEmail($request->request->get('formUser')['email']);
      $user->setPassword($request->request->get('formUser')['password']);
      $user->setRole($request->request->get('formUser')['role']);
    }*/
    $formUserData = $request->request->get('formUser');
    if (isset($formUserData['nom'])) {
      $user->setNom($formUserData['nom']);
    }
    if (isset($formUserData['prenom'])) {
      $user->setPrenom($formUserData['prenom']);
    }
    if (isset($formUserData['email'])) {
      $user->setEmail($formUserData['email']);
    }
    if (isset($formUserData['password'])) {
      $user->setPassword($formUserData['password']);
    }
    if (isset($formUserData['role'])) {
      $user->setRole($formUserData['role']);
    }


    $recruteur->setRecruteurUser($user);

    // Champs du formulaire, partie USER
    $formUser = $this->createForm(UserType::class, $user);
    // var_dump($formUser); 

    $formUser = $this->formFactory->createNamedBuilder('formUser', UserType::class, $user)
      //$formUser = $this->formFactory->createNamed('formUser', UserType::class, $user) 
      /*$formUser = $this->createFormBuilder($user)
      ->add('nom')
      ->add('prenom')
      ->add('email')
      ->add('password')
      ->add('role')*/
      ->getForm();



    // Champs du formulaire RECRUTEUR
    //$form = $this->createForm(RecruteurType::class, $recruteur); 
    $form = $this->createFormBuilder($recruteur)
      ->add('nom')
      ->add('adresse')
      ->add('code_postal')
      ->add('ville')
      //->add('recruteuruser')
      ->getForm();

    $form->handleRequest($request);
    $formUser->handleRequest($request);

    if ($form->isSubmitted() && $form->isValid()) {


      $em->persist($recruteur);
      $em->flush();

      return $this->redirectToRoute($back);
      //return $this->render('recruteur', ['id' => $recruteur->getId()]);
    }

    if ($formUser->isSubmitted() && $formUser->isValid()) {
      //var_dump("valide user");

      // SET ROLES []
      if ($user->getRole() === 'recruteur') {
        $user->setRoles(['ROLE_RECRUTEUR']);
      } else {
        $user->setRoles(['ROLE_RECRUTEUR_TOVALID']);
      } // Fin SET ROLES []

      // encodage du password
      $user->setPassword(
        $userPasswordHasher->hashPassword(
          $user,
          $formUser->get('password')->getData()
        )
      );


      $em->persist($user);
      $em->flush();

      return $this->redirectToRoute($back);
      //return $this->render('recruteur', ['id' => $recruteur->getId()]);
    } else if (!$formUser->isSubmitted()) {

      //var_dump("pas soumis");
    }



    return $this->render('recruteur/create.html.twig', [
      'formRecruteur' => $form->createView(),
      'formUser' => $formUser->createView(),
      'editMode' => $editMode,
      'back' => $back
    ]);
  } // FIN function create


  #[Route('/recruteur_remove/{id}', name: 'recruteur_remove')]
  public function remove(int $id): Response
  {
    $this->denyAccessUnlessGranted('ROLE_CONSULTANT');
    // Entity manager de Symfony
    $em = $this->doctrine->getManager();
    // 1. On récupère le recruteur (User) concerné
    $recruteur = $em->getRepository(Recruteur::class)->findBy(['id' => $id])[0];

    // 2. On récupère toutes les annonces du recruteur
    $annonces = $em->getRepository(Annonce::class)->findBy(['recruteur' => $recruteur]);

    for ($i = 0; $i < count($annonces); $i++) {

      // 3. On récupère toutes les candidatures à ces annonces
      $candidatures = $em->getRepository(Candidature::class)->findBy(['annonce' => $annonces[$i]]);
      for ($j = 0; $j < count($candidatures); $j++) {
        $em->remove($candidatures[$j]);
        $em->flush();
      }
      $candidatures = array();

      $em->remove($annonces[$i]);
      $em->flush();
    } // FIN du for i

    // 4. Suppression du recruteur
    $em->remove($recruteur);
    $em->flush();
    $em->remove($recruteur->getUser());
    $em->flush();

    return $this->redirectToRoute('recruteurs');
  }
}

-------------------------------------
Cale: src//Controller/RegistrationController.php
Nume: RegistrationController.php
Continut:
<?php

namespace App\Controller;

use App\Entity\User;
use App\Entity\Recruteur;
use App\Entity\Candidat;
use App\Form\RegistrationFormType;
use App\Security\LoginAuthenticator;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Bundle\SecurityBundle\Security;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use Symfony\Component\Routing\Attribute\Route;

class RegistrationController extends AbstractController
{
  #[Route('/register', name: 'app_register')]
  public function register(Request $request, UserPasswordHasherInterface $userPasswordHasher, Security $security, EntityManagerInterface $entityManager): Response
  {
    $user = new User();
    $form = $this->createForm(RegistrationFormType::class, $user);
    $form->handleRequest($request);

    if ($form->isSubmitted() && $form->isValid()) {
      // encode the plain password
      $user->setPassword(
        $userPasswordHasher->hashPassword(
          $user,
          $form->get('plainPassword')->getData()
        )
      );

      $user->setPasswordConfirm(
        $userPasswordHasher->hashPassword(
          $user,
          $form->get('password_confirm')->getData()
        )
      );
      /* ********** ADMIN **************** */
      // Si le nouvel utilisateur est ADMIN
      if ($user->getRole() == "admin_tovalid") {
        // ROLES
        $user->setRoles(['ROLE_ADMIN_TOVALID']);
      }

      $entityManager->persist($user);
      $entityManager->flush();

      // do anything else you need here, like send an email

      /* ********** RECRUTEUR **************** */
      // Si le nouvel utilisateur est un recruteur, alors il faut également créer une nouvelle
      // entité RECRUTEUR
      if ($user->getRole() == "recruteur_tovalid") {

        // ROLES
        $user->setRoles(['ROLE_RECRUTEUR_TOVALID']);

        $recruteur = new Recruteur();
        // On récupère l'id du User
        $user_created = $entityManager->getRepository(User::class)->findOneBy(['role' => 'recruteur_tovalid'], ['id' => 'DESC']);

        // On enregistre le recruteur
        $recruteur->setRecruteurUser($user_created);
        $entityManager->persist($recruteur);
        $entityManager->flush();
      } // FIN si RECRUTEUR


      /* ********** CANDIDAT **************** */
      // Si le nouvel utilisateur est un candidat, alors il faut également créer une nouvelle
      // entité CANDIDAT
      if ($user->getRole() == "candidat_tovalid") {
        // ROLES
        $user->setRoles(['ROLE_CANDIDAT_TOVALID']);

        $candidat = new Candidat();
        // On récupère l'id du User
        $user_created = $entityManager->getRepository(User::class)->findOneBy(['role' => 'candidat_tovalid'], ['id' => 'DESC']);

        // On enregistre le candidat
        $candidat->setCandidatUser($user_created);
        $entityManager->persist($candidat);
        $entityManager->flush();
      } // FIN si CANDIDAT

      return $security->login($user, LoginAuthenticator::class, 'main');
    }

    return $this->render('registration/register.html.twig', [
      'registrationForm' => $form,
    ]);
  }
}

-------------------------------------
Cale: src//Controller/SecurityController.php
Nume: SecurityController.php
Continut:
<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;
use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;

class SecurityController extends AbstractController
{
    #[Route(path: '/login', name: 'app_login')]
    public function login(AuthenticationUtils $authenticationUtils): Response
    {
        // if ($this->getUser()) {
        //     return $this->redirectToRoute('target_path');
        // }

        // get the login error if there is one
        $error = $authenticationUtils->getLastAuthenticationError();
        // last username entered by the user
        $lastUsername = $authenticationUtils->getLastUsername();

        return $this->render('security/login.html.twig', ['last_username' => $lastUsername, 'error' => $error]);
    }

    #[Route(path: '/logout', name: 'app_logout')]
    public function logout(): void
    {
        throw new \LogicException('This method can be blank - it will be intercepted by the logout key on your firewall.');
    }
}

-------------------------------------
Cale: src//Data/SearchData.php
Nume: SearchData.php
Continut:
<?php
namespace App\Data;

use App\Entity\Poste;

class SearchData
{

    /**
     * @var int
     */
    public $page = 1;

    /**
     * @var string
     */
    public $q = '';

    /**
     * @var Poste[]
     */
    public $poste = [];

}
-------------------------------------
Cale: src//DataFixtures/PosteFixtures.php
Nume: PosteFixtures.php
Continut:
<?php

namespace App\DataFixtures;

use App\Entity\Poste;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Persistence\ObjectManager;

class PosteFixtures extends Fixture
{
  private $counter = 1;

  public function load(ObjectManager $manager): void
  {
    $postes = [
      'Barman',
      'Barmaid',
      'Cuisinier',
      'Cuisinière',
      'Consultant',
      'Consultante',
      'Directeur de restaurant',
      'Directrice de restaurant',
      'Directeur d\'hôtel',
      'Directrice d\'hôtel',
      'Employé de restaurant',
      'Employée de restaurant',
      'Femme de chambre',
      'Valet de chambre',
      'Garçon de café',
      'Serveuse',
      'Gérant de restauration collective',
      'Gérante de restauration collective',
      'Gouvernant',
      'Gouvernante',
      'Maître d\'hôtel',
      'Maîtresse d\'hôtel',
      'Pâtissier',
      'Pâtissière',
      'Personnel de hall d\'hôtel de luxe',
      'Réceptionniste',
      'Sommelier',
      'Sommelière',
    ];

    foreach ($postes as $posteNom) {

      $poste = new Poste();
      $poste->setLibelle($posteNom);
      $manager->persist($poste);

      $this->addReference('post-' . $this->counter, $poste);
      //var_dump("Reference from Poste: post-".$this->counter);
      $this->counter++;
    }

    $manager->flush();
  }
}

-------------------------------------
Cale: src//DataFixtures/UserFixtures.php
Nume: UserFixtures.php
Continut:
<?php

namespace App\DataFixtures;

use App\Entity\User;
use App\Entity\Recruteur;
use App\Entity\Candidat;
use App\Entity\Annonce;
use App\Entity\Candidature;
use Doctrine\Bundle\FixturesBundle\Fixture;
use Doctrine\Persistence\ObjectManager;
use Doctrine\Common\DataFixtures\DependentFixtureInterface;
use Faker;

class UserFixtures extends Fixture

{
  private $counter = 1;
  public function load(ObjectManager $manager): void
  {
    $faker = Faker\Factory::create('fr_FR');
    $admin = new User();
    $admin->setEmail("admin@mail.com");
    $admin->setPassword("$2y$13$6rM/mQQX1NUI3E.m7fFtr.uTcOLD7xsIkrHla4vuyL9qP2SaSBkGO");
    $admin->setRoles(['ROLE_ADMIN']);
    $admin->setNom("TRT");
    $admin->setPrenom("Conseil");
    $admin->setRole("admin");
    $manager->persist($admin);
    $this->addReference('admin-' . $this->counter, $admin);
    $this->counter++;

    $consultant = new User();
    $consultant->setEmail("consultant@mail.com");
    $consultant->setPassword("$2y$13$6rM/mQQX1NUI3E.m7fFtr.uTcOLD7xsIkrHla4vuyL9qP2SaSBkGO");
    $consultant->setRoles(['ROLE_CONSULTANT']);
    $consultant->setNom("JONES");
    $consultant->setPrenom("Adele");
    $consultant->setRole("consultant");
    $manager->persist($consultant);
    $this->addReference('cons-' . $this->counter, $consultant);
    $this->counter++;

    $user_recruteur = new User();
    $user_recruteur->setEmail("recruteur@mail.com");
    $user_recruteur->setPassword("$2y$13$6rM/mQQX1NUI3E.m7fFtr.uTcOLD7xsIkrHla4vuyL9qP2SaSBkGO");
    $user_recruteur->setRoles(['ROLE_RECRUTEUR_TOVALID']);
    $user_recruteur->setNom("MICHELLE");
    $user_recruteur->setPrenom("Eda");
    $user_recruteur->setRole("recruteur_tovalid");
    $manager->persist($user_recruteur);
    $this->addReference('recr-' . $this->counter, $user_recruteur);
    $this->counter++;

    $recruteur = new Recruteur();
    $recruteur->setRecruteurUser($user_recruteur);
    $recruteur->setNom($faker->word);
    $manager->persist($recruteur);

    $user_candidat = new User();
    $user_candidat->setEmail("candidat@mail.com");
    $user_candidat->setPassword("$2y$13$6rM/mQQX1NUI3E.m7fFtr.uTcOLD7xsIkrHla4vuyL9qP2SaSBkGO");
    $user_candidat->setRoles(['ROLE_CANDIDAT_TOVALID']);
    $user_candidat->setNom("MARY");
    $user_candidat->setPrenom("Lea");
    $user_candidat->setRole("candidat_tovalid");
    $manager->persist($user_candidat);
    $this->addReference('user-' . $this->counter, $user_candidat);
    $this->counter++;

    $candidat = new Candidat();
    $candidat->setCandidatUser($user_candidat);
    $manager->persist($candidat);

    for ($i = 1; $i < 29; $i++) {
      $annonce = new Annonce();
      $annonce->setTitre($faker->sentence);
      $annonce->setTypecontrat("CDI");
      $poste = $this->getReference('post-' .$i);
      $annonce->setPoste($poste);
      $annonce->setVille($faker->city);
      $annonce->setNombreheures($faker->numberBetween(35, 40));
      $datedebut = new \DateTime(); // Current date and time
      $randomDays = mt_rand(1, 100); // Generate a random number of days between 1 and 100
      $datedebut->modify('+' . $randomDays . ' days'); // Add the random number of days
      $annonce->setDatedebut($datedebut);
      $annonce->setDateajout(new \DateTime());
      $annonce->setSalaire($faker->numberBetween(1650, 7000));
      $annonce->setValidation(true);
      $annonce->setDescription($faker->paragraph(10));
      $annonce->setRecruteur($recruteur);
      $annonce->setConsultant($consultant); // Ici, le USER doit être un consultant (voir rôle)
      $manager->persist($annonce);
      $this->addReference('annon-' . $this->counter, $annonce);
      $this->counter++;
    }
    $manager->flush();
  }

  public function getDependencies(): array
  {
    return [
      PosteFixtures::class,
    ];
  }
}

-------------------------------------
Cale: src//Entity/.gitignore
Nume: .gitignore
Continut:

-------------------------------------
Cale: src//Entity/Annonce.php
Nume: Annonce.php
Continut:
<?php

namespace App\Entity;

use App\Repository\AnnonceRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;
use JMS\Serializer\Annotation\Groups;

#[ORM\Entity(repositoryClass: AnnonceRepository::class)]
class Annonce
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    #[Groups(["getAnnonces"])]
    private ?int $id = null;

    #[ORM\Column(length: 100)]
    #[Groups(["getAnnonces"])]
    private ?string $titre = null;

    #[ORM\Column(length: 20)]
    #[Groups(["getAnnonces"])]
    private ?string $typecontrat = null;

    #[ORM\ManyToOne(inversedBy: 'annonces')]
    #[ORM\JoinColumn(nullable: false)]
    #[Groups(["getAnnonces"])]
    private ?Poste $poste = null;

    #[ORM\Column(length: 60)]
    #[Groups(["getAnnonces"])]
    private ?string $ville = null;

    #[ORM\Column(type: Types::DATE_MUTABLE)]
    #[Groups(["getAnnonces"])]
    private ?\DateTimeInterface $datedebut = null;

    #[ORM\Column(type: Types::DATE_MUTABLE, nullable: true)]
    #[Groups(["getAnnonces"])]
    private ?\DateTimeInterface $datefin = null;

    #[ORM\Column]
    #[Groups(["getAnnonces"])]
    private ?int $nombreheures = null;

    #[ORM\Column]
    #[Groups(["getAnnonces"])]
    private ?int $salaire = null;

    #[ORM\Column(type: Types::TEXT)]
    #[Groups(["getAnnonces"])]
    private ?string $description = null;

    #[ORM\Column(type: Types::DATETIME_MUTABLE)]
    #[Groups(["getAnnonces"])]
    private ?\DateTimeInterface $dateajout = null;

    #[ORM\Column]
    #[Groups(["getAnnonces"])]
    private ?bool $validation = null;

    #[ORM\OneToMany(targetEntity: Candidature::class, mappedBy: 'annonce')]
    #[Groups(["getAnnonces"])]
    private Collection $candidatures;

    #[ORM\ManyToOne(inversedBy: 'annonces')]
    #[ORM\JoinColumn(nullable: false)]
    #[Groups(["getAnnonces"])]
    private ?Recruteur $recruteur = null;

    #[ORM\ManyToOne(inversedBy: 'annonces')]
    #[Groups(["getAnnonces"])]
    private ?User $consultant = null;

    public function __construct()
    {
        $this->candidatures = new ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getTitre(): ?string
    {
        return $this->titre;
    }

    public function setTitre(string $titre): static
    {
        $this->titre = $titre;

        return $this;
    }

    public function getVille(): ?string
    {
        return $this->ville;
    }

    public function setVille(string $ville): static
    {
        $this->ville = $ville;

        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(string $description): static
    {
        $this->description = $description;

        return $this;
    }

    public function getDateajout(): ?\DateTimeInterface
    {
        return $this->dateajout;
    }

    public function setDateajout(\DateTimeInterface $dateajout): static
    {
        $this->dateajout = $dateajout;

        return $this;
    }

    public function getDatedebut(): ?\DateTimeInterface
    {
        return $this->datedebut;
    }

    public function setDatedebut(\DateTimeInterface $datedebut): static
    {
        $this->datedebut = $datedebut;

        return $this;
    }

    public function isValidation(): ?bool
    {
        return $this->validation;
    }

    public function setValidation(bool $validation): static
    {
        $this->validation = $validation;

        return $this;
    }

    public function getTypecontrat(): ?string
    {
        return $this->typecontrat;
    }

    public function setTypecontrat(string $typecontrat): static
    {
        $this->typecontrat = $typecontrat;

        return $this;
    }

    public function getNombreheures(): ?int
    {
        return $this->nombreheures;
    }

    public function setNombreheures(int $nombreheures): static
    {
        $this->nombreheures = $nombreheures;

        return $this;
    }

    public function getSalaire(): ?int
    {
        return $this->salaire;
    }

    public function setSalaire(int $salaire): static
    {
        $this->salaire = $salaire;

        return $this;
    }

    /**
     * @return Collection<int, Candidature>
     */
    public function getCandidatures(): Collection
    {
        return $this->candidatures;
    }

    public function addCandidature(Candidature $candidature): static
    {
        if (!$this->candidatures->contains($candidature)) {
            $this->candidatures->add($candidature);
            $candidature->setAnnonce($this);
        }

        return $this;
    }

    public function removeCandidature(Candidature $candidature): static
    {
        if ($this->candidatures->removeElement($candidature)) {
            // set the owning side to null (unless already changed)
            if ($candidature->getAnnonce() === $this) {
                $candidature->setAnnonce(null);
            }
        }

        return $this;
    }

    public function getRecruteur(): ?Recruteur
    {
        return $this->recruteur;
    }

    public function setRecruteur(?Recruteur $recruteur): static
    {
        $this->recruteur = $recruteur;

        return $this;
    }

    public function getConsultant(): ?User
    {
        return $this->consultant;
    }

    public function setConsultant(?User $consultant): static
    {
        $this->consultant = $consultant;

        return $this;
    }

    public function getPoste(): ?Poste
    {
        return $this->poste;
    }

    public function setPoste(?Poste $poste): static
    {
        $this->poste = $poste;

        return $this;
    }

    public function getDatefin(): ?\DateTimeInterface
    {
        return $this->datefin;
    }

    public function setDatefin(?\DateTimeInterface $datefin): static
    {
        $this->datefin = $datefin;

        return $this;
    }
}

-------------------------------------
Cale: src//Entity/Candidat.php
Nume: Candidat.php
Continut:
<?php

namespace App\Entity;

use App\Repository\CandidatRepository;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use JMS\Serializer\Annotation\Groups;

#[ORM\Entity(repositoryClass: CandidatRepository::class)]
class Candidat
{
  #[ORM\Id]
  #[ORM\GeneratedValue]
  #[ORM\Column]
  #[Groups(["getAnnonces"])]
  private ?int $id = null;

  #[ORM\Column(length: 255, nullable: true)]
  #[Groups(["getAnnonces"])]
  private ?string $cv = null;

  #[ORM\OneToMany(targetEntity: Candidature::class, mappedBy: 'candidat')]
  private Collection $candidatures;

  #[ORM\ManyToOne(inversedBy: 'candidats')]
  #[ORM\JoinColumn(nullable: false)]
  #[Groups(["getAnnonces"])]
  private ?User $candidat_user = null;

  #[ORM\ManyToOne(inversedBy: 'consultant_candidats')]
  private ?User $consultant = null;

  public function __construct()
  {
    $this->candidatures = new ArrayCollection();
  }

  public function getId(): ?int
  {
    return $this->id;
  }

  public function getCv(): ?string
  {
    return $this->cv;
  }

  public function setCv(?string $cv): static
  {
    $this->cv = $cv;

    return $this;
  }

  /**
   * @return Collection<int, Candidature>
   */
  public function getCandidatures(): Collection
  {
    return $this->candidatures;
  }

  public function addCandidature(Candidature $candidature): static
  {
    if (!$this->candidatures->contains($candidature)) {
      $this->candidatures->add($candidature);
      $candidature->setCandidat($this);
    }

    return $this;
  }

  public function removeCandidature(Candidature $candidature): static
  {
    if ($this->candidatures->removeElement($candidature)) {
      // set the owning side to null (unless already changed)
      if ($candidature->getCandidat() === $this) {
        $candidature->setCandidat(null);
      }
    }

    return $this;
  }

  public function getCandidatUser(): ?User
  {
    return $this->candidat_user;
  }

  public function setCandidatUser(?User $candidat_user): static
  {
    $this->candidat_user = $candidat_user;

    return $this;
  }

  public function getConsultant(): ?User
  {
    return $this->consultant;
  }

  public function setConsultant(?User $consultant): static
  {
    $this->consultant = $consultant;

    return $this;
  }
}

-------------------------------------
Cale: src//Entity/Candidature.php
Nume: Candidature.php
Continut:
<?php

namespace App\Entity;

use App\Repository\CandidatureRepository;
use Doctrine\ORM\Mapping as ORM;
use JMS\Serializer\Annotation\Groups;

#[ORM\Entity(repositoryClass: CandidatureRepository::class)]
class Candidature
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    #[Groups(["getAnnonces"])]
    private ?int $id = null;

    #[ORM\ManyToOne(inversedBy: 'candidatures')]
    #[ORM\JoinColumn(nullable: false)]
    private ?Annonce $annonce = null;

    #[ORM\ManyToOne(inversedBy: 'candidatures')]
    #[ORM\JoinColumn(nullable: false)]
    #[Groups(["getAnnonces"])]
    private ?Candidat $candidat = null;

    #[ORM\ManyToOne(inversedBy: 'candidatures')]
    private ?User $consultant_approval = null;

    #[ORM\Column(length: 10)]
    #[Groups(["getAnnonces"])]
    private ?string $etat = null;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getAnnonce(): ?Annonce
    {
        return $this->annonce;
    }

    public function setAnnonce(?Annonce $annonce): static
    {
        $this->annonce = $annonce;

        return $this;
    }

    public function getCandidat(): ?Candidat
    {
        return $this->candidat;
    }

    public function setCandidat(?Candidat $candidat): static
    {
        $this->candidat = $candidat;

        return $this;
    }

    public function getConsultantApproval(): ?User
    {
        return $this->consultant_approval;
    }

    public function setConsultantApproval(?User $consultant_approval): static
    {
        $this->consultant_approval = $consultant_approval;

        return $this;
    }

    public function getEtat(): ?string
    {
        return $this->etat;
    }

    public function setEtat(string $etat): static
    {
        $this->etat = $etat;

        return $this;
    }
}

-------------------------------------
Cale: src//Entity/Poste.php
Nume: Poste.php
Continut:
<?php

namespace App\Entity;

use App\Repository\PosteRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use JMS\Serializer\Annotation\Groups;

#[ORM\Entity(repositoryClass: PosteRepository::class)]
class Poste
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    #[Groups(["getAnnonces"])]
    private ?int $id = null;

    #[ORM\Column(length: 80)]
    #[Groups(["getAnnonces"])]
    private ?string $libelle = null;

    #[ORM\OneToMany(targetEntity: Annonce::class, mappedBy: 'poste')]
    private Collection $annonces;

    public function __construct()
    {
        $this->annonces = new ArrayCollection();
    }

    public function __toString(): string
    {
        return $this->getLibelle();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getLibelle(): ?string
    {
        return $this->libelle;
    }

    public function setLibelle(string $libelle): static
    {
        $this->libelle = $libelle;

        return $this;
    }

    /**
     * @return Collection<int, Annonce>
     */
    public function getAnnonces(): Collection
    {
        return $this->annonces;
    }

    public function addAnnonce(Annonce $annonce): static
    {
        if (!$this->annonces->contains($annonce)) {
            $this->annonces->add($annonce);
            $annonce->setPoste($this);
        }

        return $this;
    }

    public function removeAnnonce(Annonce $annonce): static
    {
        if ($this->annonces->removeElement($annonce)) {
            // set the owning side to null (unless already changed)
            if ($annonce->getPoste() === $this) {
                $annonce->setPoste(null);
            }
        }

        return $this;
    }
}

-------------------------------------
Cale: src//Entity/Recruteur.php
Nume: Recruteur.php
Continut:
<?php

namespace App\Entity;

use App\Repository\RecruteurRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use JMS\Serializer\Annotation\Groups;

#[ORM\Entity(repositoryClass: RecruteurRepository::class)]
class Recruteur
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    #[Groups(["getAnnonces"])]
    private ?int $id = null;

    #[ORM\Column(length: 255, nullable: true)]
    #[Groups(["getAnnonces"])]
    private ?string $nom = null;

    #[ORM\Column(length: 255, nullable: true)]
    #[Groups(["getAnnonces"])]
    private ?string $adresse = null;

    #[ORM\Column(nullable: true)]
    #[Groups(["getAnnonces"])]
    private ?int $code_postal = null;

    #[ORM\Column(length: 255, nullable: true)]
    #[Groups(["getAnnonces"])]
    private ?string $ville = null;

    #[ORM\OneToMany(targetEntity: Annonce::class, mappedBy: 'recruteur')]
    private Collection $annonces;

    #[ORM\ManyToOne(inversedBy: 'recruteurs')]
    #[ORM\JoinColumn(nullable: false)]
    private ?User $recruteur_user = null;

    #[ORM\ManyToOne(inversedBy: 'consultant_recruteurs')]
    private ?User $consultant = null;
/*
    #[ORM\ManyToOne(inversedBy: 'recruteurs')]
    private ?User $consultant = null;
*/
    public function __construct()
    {
        $this->annonces = new ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getNom(): ?string
    {
        return $this->nom;
    }

    public function setNom(?string $nom): static
    {
        $this->nom = $nom;

        return $this;
    }

    public function getAdresse(): ?string
    {
        return $this->adresse;
    }

    public function setAdresse(?string $adresse): static
    {
        $this->adresse = $adresse;

        return $this;
    }

    public function getCodePostal(): ?int
    {
        return $this->code_postal;
    }

    public function setCodePostal(?int $code_postal): static
    {
        $this->code_postal = $code_postal;

        return $this;
    }

    public function getVille(): ?string
    {
        return $this->ville;
    }

    public function setVille(?string $ville): static
    {
        $this->ville = $ville;

        return $this;
    }

    /**
     * @return Collection<int, Annonce>
     */
    public function getAnnonces(): Collection
    {
        return $this->annonces;
    }

    public function addAnnonce(Annonce $annonce): static
    {
        if (!$this->annonces->contains($annonce)) {
            $this->annonces->add($annonce);
            $annonce->setRecruteur($this);
        }

        return $this;
    }

    public function removeAnnonce(Annonce $annonce): static
    {
        if ($this->annonces->removeElement($annonce)) {
            // set the owning side to null (unless already changed)
            if ($annonce->getRecruteur() === $this) {
                $annonce->setRecruteur(null);
            }
        }

        return $this;
    }

    public function getRecruteurUser(): ?User
    {
        return $this->recruteur_user;
    }

    public function setRecruteurUser(?User $recruteur_user): static
    {
        $this->recruteur_user = $recruteur_user;

        return $this;
    }

    public function getConsultant(): ?User
    {
        return $this->consultant;
    }

    public function setConsultant(?User $consultant): static
    {
        $this->consultant = $consultant;

        return $this;
    }

}

-------------------------------------
Cale: src//Entity/User.php
Nume: User.php
Continut:
<?php

namespace App\Entity;

use App\Repository\UserRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use JMS\Serializer\Annotation\Groups;
#[ORM\Entity(repositoryClass: UserRepository::class)]
#[ORM\Table(name: '`user`')]
#[ORM\UniqueConstraint(name: 'UNIQ_IDENTIFIER_EMAIL', fields: ['email'])]
#[UniqueEntity(fields: ['email'], message: 'There is already an account with this email')]
class User implements UserInterface, PasswordAuthenticatedUserInterface
{
  #[ORM\Id]
  #[ORM\GeneratedValue]
  #[ORM\Column]
  #[Groups(["getAnnonces"])]
  private ?int $id = null;

  #[ORM\Column(length: 180)]
  private ?string $email = null;

  /**
   * @var list<string> The user roles
   */
  #[ORM\Column]
  private array $roles = [];

  /**
   * @var string The hashed password
   * @Assert\Length(min=8, max=255, minMessage="Au moins 8 caractères")
   */
  #[ORM\Column]
  private ?string $password = null;

  /**
   * @var string The hashed password
   * @Assert\EqualTo(propertyPath="password", message="Les 2 mots de passe doivent être identiques." )
   */
  private $password_confirm;

  #[ORM\Column(length: 50)]
  #[Groups(["getAnnonces"])]
  private ?string $nom = null;

  #[ORM\Column(length: 50)]
  #[Groups(["getAnnonces"])]
  private ?string $prenom = null;

  #[ORM\Column(length: 40)]
  private ?string $role = null;
  
  #[ORM\OneToMany(targetEntity: Candidature::class, mappedBy: 'consultant_approval')]
  private Collection $candidatures;

  #[ORM\OneToMany(targetEntity: Annonce::class, mappedBy: 'consultant')]
  private Collection $annonces;

  #[ORM\OneToMany(targetEntity: Recruteur::class, mappedBy: 'recruteur_user')]
  private Collection $recruteurs;

  #[ORM\OneToMany(targetEntity: Candidat::class, mappedBy: 'candidat_user')]
  private Collection $candidats;

  #[ORM\OneToMany(targetEntity: Candidat::class, mappedBy: 'consultant')]
  private Collection $consultant_candidats;

  #[ORM\OneToMany(targetEntity: Recruteur::class, mappedBy: 'consultant')]
  private Collection $consultant_recruteurs;

  public function __construct()
  {
      $this->candidats = new ArrayCollection();
      $this->candidatures = new ArrayCollection();
      $this->annonces = new ArrayCollection();
      $this->recruteurs = new ArrayCollection();
      $this->consultant_candidats = new ArrayCollection();
      $this->consultant_recruteurs = new ArrayCollection();
  }

  public function getId(): ?int
  {
    return $this->id;
  }

  public function getEmail(): ?string
  {
    return $this->email;
  }

  public function setEmail(string $email): static
  {
    $this->email = $email;

    return $this;
  }

  /**
   * A visual identifier that represents this user.
   *
   * @see UserInterface
   */
  public function getUserIdentifier(): string
  {
    return (string) $this->email;
  }

  /**
   * @see UserInterface
   *
   * @return list<string>
   */
  public function getRoles(): array
  {
    $roles = $this->roles;
    // guarantee every user at least has ROLE_USER
    //$roles[] = '';

    return array_unique($roles);
  }

  /**
   * @param list<string> $roles
   */
  public function setRoles(array $roles): static
  {
    $this->roles = $roles;

    return $this;
  }

  /**
   * @see PasswordAuthenticatedUserInterface
   */
  public function getPassword(): string
  {
    return $this->password;
  }

  public function setPassword(string $password): static
  {
    $this->password = $password;

    return $this;
  }

  public function getPasswordConfirm(): ?string
  {
    return $this->password_confirm;
  }

  public function setPasswordConfirm(string $password): self
  {
    $this->password_confirm = $password;

    return $this;
  }

  /**
   * @see UserInterface
   */
  public function eraseCredentials(): void
  {
    // If you store any temporary, sensitive data on the user, clear it here
    // $this->plainPassword = null;
  }

  public function getNom(): ?string
  {
    return $this->nom;
  }

  public function setNom(string $nom): static
  {
    $this->nom = $nom;

    return $this;
  }

  public function getPrenom(): ?string
  {
    return $this->prenom;
  }

  public function setPrenom(string $prenom): static
  {
    $this->prenom = $prenom;

    return $this;
  }

  public function getRole(): ?string
  {
    return $this->role;
  }

  public function setRole(string $role): static
  {
    $this->role = $role;

    return $this;
  }

  /**
   * @return Collection<int, Candidature>
   */
  public function getCandidatures(): Collection
  {
      return $this->candidatures;
  }

  public function addCandidature(Candidature $candidature): static
  {
      if (!$this->candidatures->contains($candidature)) {
          $this->candidatures->add($candidature);
          $candidature->setConsultantApproval($this);
      }

      return $this;
  }

  public function removeCandidature(Candidature $candidature): static
  {
      if ($this->candidatures->removeElement($candidature)) {
          // set the owning side to null (unless already changed)
          if ($candidature->getConsultantApproval() === $this) {
              $candidature->setConsultantApproval(null);
          }
      }

      return $this;
  }

  /**
   * @return Collection<int, Annonce>
   */
  public function getAnnonces(): Collection
  {
      return $this->annonces;
  }

  public function addAnnonce(Annonce $annonce): static
  {
      if (!$this->annonces->contains($annonce)) {
          $this->annonces->add($annonce);
          $annonce->setConsultant($this);
      }

      return $this;
  }

  public function removeAnnonce(Annonce $annonce): static
  {
      if ($this->annonces->removeElement($annonce)) {
          // set the owning side to null (unless already changed)
          if ($annonce->getConsultant() === $this) {
              $annonce->setConsultant(null);
          }
      }

      return $this;
  }

  /**
   * @return Collection<int, Candidat>
   */
  public function getCandidats(): Collection
  {
      return $this->candidats;
  }

  public function addCandidat(Candidat $candidat): static
  {
      if (!$this->candidats->contains($candidat)) {
          $this->candidats->add($candidat);
          $candidat->setCandidatUser($this);
      }

      return $this;
  }

  public function removeCandidat(Candidat $candidat): static
  {
      if ($this->candidats->removeElement($candidat)) {
          // set the owning side to null (unless already changed)
          if ($candidat->getCandidatUser() === $this) {
              $candidat->setCandidatUser(null);
          }
      }

      return $this;
  }

  /**
   * @return Collection<int, Candidat>
   */
  public function getConsultantCandidats(): Collection
  {
      return $this->consultant_candidats;
  }

  public function addConsultantCandidat(Candidat $consultantCandidat): static
  {
      if (!$this->consultant_candidats->contains($consultantCandidat)) {
          $this->consultant_candidats->add($consultantCandidat);
          $consultantCandidat->setConsultant($this);
      }

      return $this;
  }

  public function removeConsultantCandidat(Candidat $consultantCandidat): static
  {
      if ($this->consultant_candidats->removeElement($consultantCandidat)) {
          // set the owning side to null (unless already changed)
          if ($consultantCandidat->getConsultant() === $this) {
              $consultantCandidat->setConsultant(null);
          }
      }

      return $this;
  }

  /**
   * @return Collection<int, Recruteur>
   */
  public function getConsultantRecruteurs(): Collection
  {
      return $this->consultant_recruteurs;
  }

  public function addConsultantRecruteur(Recruteur $consultantRecruteur): static
  {
      if (!$this->consultant_recruteurs->contains($consultantRecruteur)) {
          $this->consultant_recruteurs->add($consultantRecruteur);
          $consultantRecruteur->setConsultant($this);
      }

      return $this;
  }

  public function removeConsultantRecruteur(Recruteur $consultantRecruteur): static
  {
      if ($this->consultant_recruteurs->removeElement($consultantRecruteur)) {
          // set the owning side to null (unless already changed)
          if ($consultantRecruteur->getConsultant() === $this) {
              $consultantRecruteur->setConsultant(null);
          }
      }

      return $this;
  }

  /**
   * @return Collection<int, Recruteur>
   */
  public function getRecruteurs(): Collection
  {
    return $this->recruteurs;
  }

  public function addRecruteur(Recruteur $recruteur): static
  {
    if (!$this->recruteurs->contains($recruteur)) {
      $this->recruteurs->add($recruteur);
      $recruteur->setRecruteurUser($this);
    }

    return $this;
  }

  public function removeRecruteur(Recruteur $recruteur): static
  {
    if ($this->recruteurs->removeElement($recruteur)) {
      // set the owning side to null (unless already changed)
      if ($recruteur->getRecruteurUser() === $this) {
        $recruteur->setRecruteurUser(null);
      }
    }

    return $this;
  }
}

-------------------------------------
Cale: src//Form/RecruteurType.php
Nume: RecruteurType.php
Continut:
<?php

namespace App\Form;

use App\Entity\Recruteur;
use App\Form\UserType;
use Symfony\Component\Form\Extension\Core\Type\CollectionType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;


class RecruteurType extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder
            ->add('entreprise_nom')
            ->add('entreprise_adresse')
            ->add('entreprise_code_postal')
            ->add('entreprise_ville')
            //->add('user', UserType::class)
            ->add('consultant')
        ;
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Recruteur::class,
            'allow_extra_fields' => true,
            'extra_fields' => 'nom, prenom',
            'allow_add' => true, 
        ]);
    }
}

-------------------------------------
Cale: src//Form/RegistrationFormType.php
Nume: RegistrationFormType.php
Continut:
<?php

namespace App\Form;

use App\Entity\User;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Validator\Constraints\IsTrue;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\NotBlank;

class RegistrationFormType extends AbstractType
{
  public function buildForm(FormBuilderInterface $builder, array $options): void
  {
    $builder
      ->add('email', EmailType::class, ['attr' => ['placeholder' => 'nom@email.com']])
      ->add('role', ChoiceType::class, [
        'choices' => [
          'candidat' => 'candidat_tovalid',
          'recruteur' => 'recruteur_tovalid',
        ]
      ])
      ->add('nom', TextType::class, ['attr' => ['placeholder' => 'nom']])
      ->add('prenom', TextType::class, ['attr' => ['placeholder' => 'prénom']])

      ->add('agreeTerms', CheckboxType::class, [
        'mapped' => false,
        'constraints' => [
          new IsTrue([
            'message' => 'Vous devez accepter nos Conditions Générales d\'Utilisation.',
          ]),
        ],
      ])
      ->add('plainPassword', PasswordType::class, [
        // instead of being set onto the object directly,
        // this is read and encoded in the controller
        'mapped' => false,
        'attr' => [
          'label' => "Votr mot de passe",
          'autocomplete' => 'new-password',
          'placeholder' => 'minimum 8 caractères'
        ],
        'constraints' => [
          new NotBlank([
            'message' => 'Please enter a password',
          ]),
          new Length([
            'min' => 8,
            'minMessage' => 'Your password should be at least {{ limit }} characters',
            // max length allowed by Symfony for security reasons
            'max' => 4096,
          ]),
        ],
      ])
      ->add('password_confirm', PasswordType::class, [
        // instead of being set onto the object directly,
        // this is read and encoded in the controller
        'mapped' => false,
        'attr' => [
          'autocomplete' => 'new-password',
          'placeholder' => 'minimum 8 caractères'
        ],
        'constraints' => [
          new NotBlank([
            'message' => 'Entrez un mot de passe',
          ]),
          new Length([
            'min' => 8,
            'minMessage' => 'Your password should be at least {{ limit }} characters',
            // max length allowed by Symfony for security reasons
            'max' => 4096,
          ]),
        ],
      ]);
  }

  public function configureOptions(OptionsResolver $resolver): void
  {
    $resolver->setDefaults([
      'data_class' => User::class,
    ]);
  }
}

-------------------------------------
Cale: src//Form/SearchForm.php
Nume: SearchForm.php
Continut:
<?php

namespace App\Form;

use App\Data\SearchData;
use App\Entity\Poste;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;

class SearchForm extends AbstractType
{

  public function buildForm(FormBuilderInterface $builder, array $options): void
  {
    $builder
      ->add('q', TextType::class, [
        'label' => false,
        'required' => false,
        'attr' => [
          'placeholder' => 'Rechercher'
        ]
      ])
      ->add('poste', EntityType::class, [
        'label' => false,
        'required' => false,
        'class' => Poste::class,
        'expanded' => false,
        'multiple' => true
      ]);
  }

  public function configureOptions(OptionsResolver $resolver): void
  {
    $resolver->setDefaults([
      'data_class' => SearchData::class,
      'method' => 'GET',
      'csrf_protection' => false  // formulaire de recherche, pas de probleme de Cross Scripting
    ]);
  }

  public function getBlockPrefix()
  {
    return '';
  }
}

-------------------------------------
Cale: src//Form/UserType.php
Nume: UserType.php
Continut:
<?php

namespace App\Form;

use App\Entity\User;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Validator\Constraints\NotBlank;

class UserType extends AbstractType
{
  public function buildForm(FormBuilderInterface $builder, array $options): void
  {
    $builder
      ->add(
        'email',
        EmailType::class,
        [
          'label' => 'Email*',
          'constraints' => [
            new NotBlank([
              'message' => 'Ce champ ne peut être vide'
            ])
          ]
        ]
      )
      /* ->add('roles') */
      ->add('password')
      ->add('nom')
      ->add('prenom')
      ->add('role');
    /* } */
  }

  public function configureOptions(OptionsResolver $resolver): void
  {
    $resolver->setDefaults([
      'data_class' => User::class,
      'allow_extra_fields' => true,
    ]);
  }
}

-------------------------------------
Cale: src//Kernel.php
Nume: Kernel.php
Continut:
<?php

namespace App;

use Symfony\Bundle\FrameworkBundle\Kernel\MicroKernelTrait;
use Symfony\Component\HttpKernel\Kernel as BaseKernel;

class Kernel extends BaseKernel
{
    use MicroKernelTrait;
}

-------------------------------------
Cale: src//Repository/.gitignore
Nume: .gitignore
Continut:

-------------------------------------
Cale: src//Repository/AnnonceRepository.php
Nume: AnnonceRepository.php
Continut:
<?php

namespace App\Repository;

use App\Data\SearchData;
use App\Entity\Annonce;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;
use Knp\Component\Pager\PaginatorInterface;
use Knp\Component\Pager\Pagination\PaginationInterface;

/**
 * @extends ServiceEntityRepository<Annonce>
 *
 * @method Annonce|null find($id, $lockMode = null, $lockVersion = null)
 * @method Annonce|null findOneBy(array $criteria, array $orderBy = null)
 * @method Annonce[]    findAll()
 * @method Annonce[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class AnnonceRepository extends ServiceEntityRepository
{
  /**
   * @var PaginatorInterface
   */

  private $paginator;

  public function __construct(ManagerRegistry $registry, PaginatorInterface $paginator)
  {
    parent::__construct($registry, Annonce::class);
    $this->paginator = $paginator;
  }

  private function getSearchQuery(SearchData $search): QueryBuilder
  {
    $query = $this
      ->createQueryBuilder('p')
      ->select('c', 'p')
      ->join('p.poste', 'c')
      ->orderBy('p.id', 'DESC');

    if (!empty($search->q)) {
      $query = $query
        ->andWhere('p.titre LIKE :q')
        ->setParameter('q', "%{$search->q}%");
    }

    if (!empty($search->poste)) {
      $query = $query
        ->andWhere('c.id IN (:poste)')
        ->setParameter('poste', $search->poste);
    }

    return $query;
  }

  /**
   * Récupère les annonces en lien avec une recherce
   * @return PaginationInterface
   */

  public function findSearch(SearchData $search): PaginationInterface
  {
    $query = $this->getSearchQuery($search)->getQuery();
    return $this->paginator->paginate(
      $query,
      $search->page,
      6
    );
  }

   /**
     * Finds annonces by poste.
     *
     * @param string $poste The label of the poste to search for
     * @return array An array of annonces
     */
    public function findByPoste(string $poste): array
    {
        return $this->createQueryBuilder('a')
            ->join('a.poste', 'p')
            ->andWhere('p.libelle = :poste')
            ->setParameter('poste', $poste)
            ->getQuery()
            ->getResult();
    }

    /**
     * Finds annonces by poste ID.
     *
     * @param int $postId The ID of the poste to search for
     * @return array An array of annonces
     */
    public function findByPosteId(int $postId): array
    {
        return $this->createQueryBuilder('a')
            ->join('a.poste', 'p')
            ->andWhere('p.id = :postId')
            ->setParameter('postId', $postId)
            ->getQuery()
            ->getResult();
    }

  //    /**
  //     * @return Annonce[] Returns an array of Annonce objects
  //     */
  //    public function findByExampleField($value): array
  //    {
  //        return $this->createQueryBuilder('a')
  //            ->andWhere('a.exampleField = :val')
  //            ->setParameter('val', $value)
  //            ->orderBy('a.id', 'ASC')
  //            ->setMaxResults(10)
  //            ->getQuery()
  //            ->getResult()
  //        ;
  //    }

  //    public function findOneBySomeField($value): ?Annonce
  //    {
  //        return $this->createQueryBuilder('a')
  //            ->andWhere('a.exampleField = :val')
  //            ->setParameter('val', $value)
  //            ->getQuery()
  //            ->getOneOrNullResult()
  //        ;
  //    }
}

-------------------------------------
Cale: src//Repository/CandidatRepository.php
Nume: CandidatRepository.php
Continut:
<?php

namespace App\Repository;

use App\Entity\Candidat;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Candidat>
 *
 * @method Candidat|null find($id, $lockMode = null, $lockVersion = null)
 * @method Candidat|null findOneBy(array $criteria, array $orderBy = null)
 * @method Candidat[]    findAll()
 * @method Candidat[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class CandidatRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Candidat::class);
    }

    //    /**
    //     * @return Candidat[] Returns an array of Candidat objects
    //     */
    //    public function findByExampleField($value): array
    //    {
    //        return $this->createQueryBuilder('c')
    //            ->andWhere('c.exampleField = :val')
    //            ->setParameter('val', $value)
    //            ->orderBy('c.id', 'ASC')
    //            ->setMaxResults(10)
    //            ->getQuery()
    //            ->getResult()
    //        ;
    //    }

    //    public function findOneBySomeField($value): ?Candidat
    //    {
    //        return $this->createQueryBuilder('c')
    //            ->andWhere('c.exampleField = :val')
    //            ->setParameter('val', $value)
    //            ->getQuery()
    //            ->getOneOrNullResult()
    //        ;
    //    }
}

-------------------------------------
Cale: src//Repository/CandidatureRepository.php
Nume: CandidatureRepository.php
Continut:
<?php

namespace App\Repository;

use App\Entity\Candidature;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Candidature>
 *
 * @method Candidature|null find($id, $lockMode = null, $lockVersion = null)
 * @method Candidature|null findOneBy(array $criteria, array $orderBy = null)
 * @method Candidature[]    findAll()
 * @method Candidature[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class CandidatureRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Candidature::class);
    }

    //    /**
    //     * @return Candidature[] Returns an array of Candidature objects
    //     */
    //    public function findByExampleField($value): array
    //    {
    //        return $this->createQueryBuilder('c')
    //            ->andWhere('c.exampleField = :val')
    //            ->setParameter('val', $value)
    //            ->orderBy('c.id', 'ASC')
    //            ->setMaxResults(10)
    //            ->getQuery()
    //            ->getResult()
    //        ;
    //    }

    //    public function findOneBySomeField($value): ?Candidature
    //    {
    //        return $this->createQueryBuilder('c')
    //            ->andWhere('c.exampleField = :val')
    //            ->setParameter('val', $value)
    //            ->getQuery()
    //            ->getOneOrNullResult()
    //        ;
    //    }
}

-------------------------------------
Cale: src//Repository/PosteRepository.php
Nume: PosteRepository.php
Continut:
<?php

namespace App\Repository;

use App\Entity\Poste;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Poste>
 *
 * @method Poste|null find($id, $lockMode = null, $lockVersion = null)
 * @method Poste|null findOneBy(array $criteria, array $orderBy = null)
 * @method Poste[]    findAll()
 * @method Poste[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class PosteRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Poste::class);
    }

    //    /**
    //     * @return Poste[] Returns an array of Poste objects
    //     */
    //    public function findByExampleField($value): array
    //    {
    //        return $this->createQueryBuilder('p')
    //            ->andWhere('p.exampleField = :val')
    //            ->setParameter('val', $value)
    //            ->orderBy('p.id', 'ASC')
    //            ->setMaxResults(10)
    //            ->getQuery()
    //            ->getResult()
    //        ;
    //    }

    //    public function findOneBySomeField($value): ?Poste
    //    {
    //        return $this->createQueryBuilder('p')
    //            ->andWhere('p.exampleField = :val')
    //            ->setParameter('val', $value)
    //            ->getQuery()
    //            ->getOneOrNullResult()
    //        ;
    //    }
}

-------------------------------------
Cale: src//Repository/RecruteurRepository.php
Nume: RecruteurRepository.php
Continut:
<?php

namespace App\Repository;

use App\Entity\Recruteur;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @extends ServiceEntityRepository<Recruteur>
 *
 * @method Recruteur|null find($id, $lockMode = null, $lockVersion = null)
 * @method Recruteur|null findOneBy(array $criteria, array $orderBy = null)
 * @method Recruteur[]    findAll()
 * @method Recruteur[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class RecruteurRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Recruteur::class);
    }

    //    /**
    //     * @return Recruteur[] Returns an array of Recruteur objects
    //     */
    //    public function findByExampleField($value): array
    //    {
    //        return $this->createQueryBuilder('r')
    //            ->andWhere('r.exampleField = :val')
    //            ->setParameter('val', $value)
    //            ->orderBy('r.id', 'ASC')
    //            ->setMaxResults(10)
    //            ->getQuery()
    //            ->getResult()
    //        ;
    //    }

    //    public function findOneBySomeField($value): ?Recruteur
    //    {
    //        return $this->createQueryBuilder('r')
    //            ->andWhere('r.exampleField = :val')
    //            ->setParameter('val', $value)
    //            ->getQuery()
    //            ->getOneOrNullResult()
    //        ;
    //    }
}

-------------------------------------
Cale: src//Repository/UserRepository.php
Nume: UserRepository.php
Continut:
<?php

namespace App\Repository;

use App\Entity\User;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface;
use Symfony\Component\Security\Core\User\PasswordUpgraderInterface;

/**
 * @extends ServiceEntityRepository<User>
 *
 * @method User|null find($id, $lockMode = null, $lockVersion = null)
 * @method User|null findOneBy(array $criteria, array $orderBy = null)
 * @method User[]    findAll()
 * @method User[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class UserRepository extends ServiceEntityRepository implements PasswordUpgraderInterface
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, User::class);
    }

    /**
     * Used to upgrade (rehash) the user's password automatically over time.
     */
    public function upgradePassword(PasswordAuthenticatedUserInterface $user, string $newHashedPassword): void
    {
        if (!$user instanceof User) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $user::class));
        }

        $user->setPassword($newHashedPassword);
        $this->getEntityManager()->persist($user);
        $this->getEntityManager()->flush();
    }

    //    /**
    //     * @return User[] Returns an array of User objects
    //     */
    //    public function findByExampleField($value): array
    //    {
    //        return $this->createQueryBuilder('u')
    //            ->andWhere('u.exampleField = :val')
    //            ->setParameter('val', $value)
    //            ->orderBy('u.id', 'ASC')
    //            ->setMaxResults(10)
    //            ->getQuery()
    //            ->getResult()
    //        ;
    //    }

    //    public function findOneBySomeField($value): ?User
    //    {
    //        return $this->createQueryBuilder('u')
    //            ->andWhere('u.exampleField = :val')
    //            ->setParameter('val', $value)
    //            ->getQuery()
    //            ->getOneOrNullResult()
    //        ;
    //    }
}

-------------------------------------
Cale: src//Security/LoginAuthenticator.php
Nume: LoginAuthenticator.php
Continut:
<?php

namespace App\Security;

use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Http\Authenticator\AbstractLoginFormAuthenticator;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\CsrfTokenBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\RememberMeBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Badge\UserBadge;
use Symfony\Component\Security\Http\Authenticator\Passport\Credentials\PasswordCredentials;
use Symfony\Component\Security\Http\Authenticator\Passport\Passport;
use Symfony\Component\Security\Http\SecurityRequestAttributes;
use Symfony\Component\Security\Http\Util\TargetPathTrait;

class LoginAuthenticator extends AbstractLoginFormAuthenticator
{
    use TargetPathTrait;

    public const LOGIN_ROUTE = 'app_login';

    public function __construct(private UrlGeneratorInterface $urlGenerator)
    {
    }

    public function authenticate(Request $request): Passport
    {
        $email = $request->getPayload()->getString('email');

        $request->getSession()->set(SecurityRequestAttributes::LAST_USERNAME, $email);

        return new Passport(
            new UserBadge($email),
            new PasswordCredentials($request->getPayload()->getString('password')),
            [
                new CsrfTokenBadge('authenticate', $request->getPayload()->getString('_csrf_token')),
                new RememberMeBadge(),
            ]
        );
    }

    public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response
    {
        if ($targetPath = $this->getTargetPath($request->getSession(), $firewallName)) {
            return new RedirectResponse($targetPath);
        }
        return new RedirectResponse($this->urlGenerator->generate('compte'));
        // For example:
        // return new RedirectResponse($this->urlGenerator->generate('some_route'));
        // throw new \Exception('TODO: provide a valid redirect inside '.__FILE__);
    }

    protected function getLoginUrl(Request $request): string
    {
        return $this->urlGenerator->generate(self::LOGIN_ROUTE);
    }
}

-------------------------------------
Cale: templates//_partials/_footer.html.twig
Nume: _footer.html.twig
Continut:
<footer class="container-fluid bg-dark text-white text-center py-2">
	<div class="row">
		<div class="col-md-4 mb-3 text-center text-md-center">
    <div class="d-inline-flex align-items-center text-white">
			<p><br>Repo GitHub<br>
      <a href="https://github.com/danian3wa/trtconseil" target="_blank" title="Repo GitHub Application WEB TRT Conseil" class="text-white px-2"><i class="fa-brands fa-github"></i></a></p>
		</div>
    </div>
		<div class="col-md-4 mt-3 mb-3">
			<p>© Copyright 2024<br></p>
      <p>Retrouvez-nous sur:</p>
			<a href="https://www.x.com" target="_blank" title="X" class="text-white px-2"><i class="fa-brands fa-x"></i></a>
			<a href="https://www.instagram.com" target="_blank" title="Instagram" class="text-white px-2"><i class="fa-brands fa-instagram"></i></a>
      <a href="https://www.facebook.com" target="_blank" title="Facebook" class="text-white px-2"><i class="fa-brands fa-facebook"></i></a>
      <a href="https://www.linkedin.com" target="_blank" title="Linkedin" class="text-white px-2"><i class="fa-brands fa-linkedin"></i></a>
      <a href="https://www.youtube.com" target="_blank" title="YouTube" class="text-white px-2"><i class="fa-brands fa-youtube"></i></a>
      
		</div>
		<div class="col-md-4 mt-3">
      <a class="nav-link" href="{{path('app_apropos')}}">A propos</a>
			<a class="nav-link" href="{{path('page_cgu')}}">CGU</a>
			<a class="nav-link" href="{{path('mentions_legales')}}">Mentions légales</a>
			<p><br><br>
				<i class="fa-solid fa-location-dot fa-bounce"></i>
				Adresse :<a class="nav-link" href="https://www.google.com/maps/place/Notre+Dame,+Paris,+France/@48.8539602,2.3482883" target="_blank">France</a>
			</p>
		</div>
	</div>
  <div class="bg-dark text-center py-2 text-white">
    Site Web démonstratif -> Application web réalisé pour une évaluation en cours de formation.
  </div>
</footer>

-------------------------------------
Cale: templates//_partials/_header.html.twig
Nume: _header.html.twig
Continut:
{# NAVBAR #}
        
{% if app.user %}
  {% if app.user.role is same as 'admin' %}
    {% set navbar = {
      "home":"Accueil",
      "compte":"Compte",
      "admins":"Administrateurs",
      "consultants":"Consultants",
      "recruteurs":"Recruteurs",
      "candidats":"Candidats",
      "annonces":"Annonces",
      "app_logout":"Se déconnecter"
    } 
  %}

  {% elseif app.user.role is same as 'consultant' %}
    {% set navbar = {
      "home":"Accueil",
      "compte":"Compte",
      "recruteurs":"Recruteurs",
      "candidats":"Candidats",
      "annonces":"Annonces",
      "candidatures":"Candidatures",
      "app_logout":"Se déconnecter"
    } 
  %}

  {% elseif app.user.role is same as 'recruteur' %}
    {% set navbar = {
      "home":"Accueil",
      "compte":"Compte",
      "annonces":"Annonces",
      "app_logout":"Se déconnecter"
    } 
  %}

  {% elseif app.user.role is same as 'candidat' %}
    {% set navbar = {
      "home":"Accueil",
      "compte":"Compte",
      "annonces":"Annonces",
      "app_logout":"Se déconnecter",
    } 
  %}

  {% else %}
    {% set navbar = {
      "home":"Accueil",
      "compte":"Compte",
      "app_logout":"Se déconnecter"
    }
  %}
  {% endif %}
{% else %}
  {% set navbar = {
    "app_login":"Se connecter",
    "app_register":"Créer un compte",
  } %}
{% endif %}
<nav class="navbar navbar-expand-lg navbar-dark bg-dark text-white">
  <div class="container-fluid">
    <a class="navbar-brand" href="{{path('home')}}">
      <img src="/images/logo.png" alt="TRT Conseil" width="200" >
    </a>
    <i class="fa-sharp fa-solid fa-phone fa-shake"></i>
    <a class="navbar-brand ms-2" href="tel://+33123456789" title="Appelez-nous">01 23 45 67 89</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarColor02" aria-controls="navbarColor02" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarColor02">
      <ul class="navbar-nav ms-auto">
        {% for a,b in navbar %}
          <li class="nav-item">
            <a class="nav-link" href="{{path(a)}}">{{b}}</a>
	        </li>
        {% endfor %}
      </ul>
    </div>
  </div>
</nav>




           {# <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
              <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarSupportedContent">
              <ul class="navbar-nav me-auto mb-2 mb-lg-0" id="ok""></ul>
            </div>
            <div>
              <p>
                {% for a,b in navbar %}
                
                  <a href="{{ path(a) }}" class="btn btn-secondary">{{b}}</a> 
                {% endfor %}
              </p>
            </div>
        </div>
      </nav>#}
    {# FIN NAVBAR #}  
-------------------------------------
Cale: templates//admin/all.html.twig
Nume: all.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Liste des administrateurs{% endblock %}

{% block body %}
<style>
    .locked { background-color : silver; }
    .validated { background-color : lightgray; }

</style>

<div class="example-wrapper locked mt-1 p-2">
    <h1 class="px-2">Liste des administrateurs</h1>
    <a href="{{ path('admin_create', {}) }}" role="button" class="btn btn-success">Ajouter un administrateur</a>
</div>
<div class="p-2 locked my-1">
    <table>
        <tbody>
            {%for c in admins_locked %}
            
                <tr class="mb-1">
                    <td>
                        <a href="{{ path('app_admin', {'id': c.id}) }}" class="btn btn-info mb-2 mx-1">Voir</a>
                    </td>
                    <td>
                        {{ c.nom|upper }} {{c.prenom|capitalize}}
                    </td>
                    <td>
                        <span class="mx-3 badge bg-dark"> {{c.email|lower}} </span>
                    </td>
                    <td>
                        <a href="{{ path('admin_valider', {'id': c.id}) }}" class="btn btn-warning mx-1">Valider</a>
                        <a href="{{ path('admin_update', {'id': c.id}) }}" role="button" class="btn btn-primary mx-1">Modifier</a>
                        <a href="{{ path('admin_remove', {'id': c.id}) }}" role="button" class="btn btn-danger mx-1"
                            onClick="return confirm('Confirmer la suppression de cet administrateur ? ')">Supprimer</a>
                    </td>
                </tr>
                
            {% else %}
                <tr><td><em>Aucun administrateur trouvé.</em></td></tr>
            {% endfor %}
        </tbody>
    </table>
</div>

<div class="p-2 validated my-1">
    <table>
        <tbody>
            {%for c in admins %}
                    
                <tr class="mb-1">
                    <td>
                        <a href="{{ path('app_admin', {'id': c.id}) }}" class="btn btn-info mb-2 mx-1">Voir</a>
                    </td>
                    <td>
                        {{ c.nom|upper }} {{c.prenom|capitalize}}
                    </td>        
                    <td>
                        <span  class="mx-3 badge bg-dark"> {{c.email|lower}} </span>
                    </td>        
                    <td>
                        {# Un admin ne peut pas bloquer lui-même, sinon l'application le déconnecte et il n'y a plus accès #}
                        {% if c.id is not same as app.user.id %}
                            <a href="{{ path('admin_bloquer', {'id': c.id}) }}" class="btn btn-warning mx-1">Bloquer</a>
                        {% else %}
                            <button class="btn btn-warning mx-1" disabled>Bloquer</button>
                        {% endif %}
                        <a href="{{ path('admin_update', {'id': c.id}) }}" role="button" class="btn btn-primary mx-1">Modifier</a>
                        
                        {# Un admin ne peut pas se supprimer lui-même, sinon l'application le déconnecte et il n'y a plus accès #}
                        {% if c.id is not same as app.user.id %}
                            <a href="{{ path('admin_remove', {'id': c.id}) }}" role="button" class="btn btn-danger mx-1"
                                onClick="return confirm('Confirmer la suppression de cet administrateur ? ')">Supprimer</a>                        
                        {% else %}
                            <button class="btn btn-danger mx-1" disabled>Supprimer</button>
                        {% endif %}


                </tr>
                
            {% else %}
                <tr><td><em>Aucun administrateur trouvé.</em></td></tr>
            {% endfor %}
        </tbody>
    </table>
</div>


{% endblock %}

-------------------------------------
Cale: templates//admin/create.html.twig
Nume: create.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Administrateur{% endblock %}

{% block body %}

<h1>
{% if editMode %}
    Gestion
{% else %}
    Création
{% endif %}
 d'un administrateur</h1>

{{ form_start(formAdmin) }}

{{ form_row(formAdmin.email, {label: 'Email', 'attr' : { 'placeholder' : 'mail'}}) }}
{{ form_row(formAdmin.nom, {label: 'Nom', 'attr' : { 'placeholder' : 'nom'}}) }}
{{ form_row(formAdmin.prenom, {label: 'Prénom', 'attr' : { 'placeholder' : 'prénom'}}) }}
{{ form_row(formAdmin.password, {label: 'Mot de passe', 'type' : 'password', 'attr' : { 'placeholder' : 'minimum 8 caractères'}}) }}
{# {{ form_row(formAdmin.password_confirm, {'type' : 'password', 'label': 'Confirmer le mot de passe','attr' : { 'placeholder' : 'minimum 8 caractères'}}) }} #}
{{ form_row(formAdmin.role, {'attr' : { 'placeholder' : 'role', 'value' : 'admin', 'readonly' : 'true'}}) }}

<input type="hidden" name="roles" placeholder="roles" value="[]"/>

{# Si on vient de la home page #}
{% if back is defined and back is not same as 'admins' %}
    <a href="{{ path('compte') }}" role="button" class="btn btn-dark">Retour</a>
{# Si on vient de la liste des admins #}
{% else %}
    {# <a href="{{ path('admins') }}" role="button" class="btn btn-dark">Retour à la liste des administrateurs</a> #}
    <a href="/admins" role="button" class="btn btn-dark">Retour à la liste des administrateurs</a>
{% endif %}


<button type="submit" class="btn btn-primary">
    {% if editMode %}
        Enregistrer les modifications
    {% else %}
        Ajouter l'administrateur
    {% endif %}
</button>

{{ form_end(formAdmin) }}


{% endblock %}
-------------------------------------
Cale: templates//admin/index.html.twig
Nume: index.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Administrateur 
    {% if admin %}
        {{admin.nom}}
    {% endif %}
{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<h1 class="mt-5">Compte administrateur</h1>

<div>

    {% if admin %}
        <div>N° id : {{admin.id}}</div>
        <div>Email : {{admin.email|lower}}</div>
        <div>Nom : {{admin.nom|upper }}</div>
        <div>Prénom : {{admin.prenom|capitalize}}</div>        
    {% else %}
        <em>Données de l'administrateur non trouvées.</em>
    {% endif %}

</div>
<br/><br/>

{# Si on vient de la home page #}
{% if back is defined and back is not same as 'admins' %}
    {# <a href="{{ path('home') }}" role="button" class="btn btn-dark">Retour</a> #}
    <a href="{{ path('admin_update', {'id': admin.id, 'back': 'compte'}) }}" role="button" class="btn btn-primary">Modifier</a>
{# Si on vient de la liste des admins #}
{% else %}
    <a href="{{ path('admins') }}" role="button" class="btn btn-dark">Retour à la liste des administrateurs</a>
{% endif %}

{% endblock %}

-------------------------------------
Cale: templates//annonce/all.html.twig
Nume: all.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Liste des annonces{% endblock %}



{% block body %}
<style>
    {# .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; } #}
    
    .locked { background-color : silver; }
    .validated { background-color : lightgray; }
</style>

<div class="mt-5 p-2 validated my-1">
    <h1>Annonces</h1>

    {% if app.user.role is same as "recruteur" %}
        <a href="{{ path('annonce_create', {'recruteur': id_recruteur}) }}" role="button" class="btn btn-success">Ajouter une annonce</a>
    {% endif %}
</div>

<div class="alert alert-dismissible alert-info">
{% if mailok is defined %}
{{ mailok }}
{% endif %}
</div>

    {# Visible par tous SAUF par un CANDIDAT #}
    {% if app.user.role is not same as "candidat" %}
        <div class="example-wrapper locked mt-1">


            <h2 class="px-2">Liste des annonces à valider</h2>
            <ul class="pb-1">
                {%for r in annonces %}
                
                    {# Liste des annonces à valider #}
                    {% if r.validation is same as false %}

                        <li class="mb-1">
                            <a href="{{ path('app_annonce', {'id': r.id})}}" class="btn btn-info">Voir</a> 
                            {{ r.titre|capitalize }} {{r.typecontrat|upper}} {{r.poste|capitalize}} {{r.ville|upper}}
                            {# <a href="{{ path('app_recruteur', {'id': r.id}) }}">Détail</a> -  #}
                            {% if app.user.role is same as "consultant" %}
                            <a href="{{ path('annonce_valider', {'id': r.id}) }}" class="btn btn-warning mx-2 my-2">Valider</a> 
                            {% endif %}
                            <a href="{{ path('annonce_update', {'id': r.id}) }}" role="button" class="btn btn-primary mx-2 my-2">Modifier</a> 
                            <a href="{{ path('annonce_remove', {'id': r.id}) }}" role="button" class="btn btn-danger"
                                onClick="return confirm('Confirmer la suppression de cette annonce et de toutes les candidatures qui y sont liées ? ')">Supprimer</a>
                            
                        </li>
                    {% endif %}
                {% else %}
                    <li><em>Aucune annonce trouvée.</em></li>
                {% endfor %}
            </ul>
        </div>

        <div class="example-wrapper validated">


            <h2 class="px-2">Liste des annonces validées</h2>
            <ul class="pb-1">
                {%for r in annonces %}
                    {# Liste des annonces déjà validées #}
                    {% if r.validation is same as true %}
                      <li class="mb-1">
                        <a href="{{ path('app_annonce', {'id': r.id})}}" class="btn btn-info">Voir</a> 
                        {{ r.titre|capitalize }} {{r.typecontrat|upper}} {{r.poste|capitalize}} {{r.ville|upper}}
                        {% if app.user.role is same as "consultant" %}
                          
                       
                          {# <a href="{{ path('app_annonce', {'id': r.id}) }}">Détail</a> -  #}
                          <a href="{{ path('annonce_bloquer', {'id': r.id}) }}" class="btn btn-warning mx-2 my-2">Bloquer</a>
                        {% endif %}
                         
                        <a href="{{ path('annonce_update', {'id': r.id}) }}" role="button" class="btn btn-primary  my-2">Modifier</a> 
                        <a href="{{ path('annonce_remove', {'id': r.id}) }}" role="button" class="btn btn-danger mx-2"
                            onClick="return confirm('Confirmer la suppression de cette annonce et de toutes les candidatures qui y sont liées ? ')">Supprimer</a>
                        
                    </li>
                    {% endif %}
                {% else %}
                    <li><em>Aucune annonce trouvée.</em></li>
                {% endfor %}
            </ul>
        </div>
    
    {# Uniquement visible par le CANDIDAT #}
    {% elseif app.user.role is same as "candidat" %}

        <div class="example-wrapper locked mt-1">


            <h2 class="px-2">Liste des annonces</h2>
            <ul class="pb-1">


                {%for r in annonces %}
                
                    {# Liste des annonces à valider #}
                    {% if r.validation is same as true %}

                        <li class="mb-1">
                            <a href="{{ path('app_annonce', {'id': r.id})}}" class="btn btn-info">Voir</a> 
                            
                            {# Annonce déjà postulée ? #}
                            {% if r.id in deja_postule %}
                                <img src={{ asset('icons/tick.png')}} title="Vous avez déjà postulé à cette annonce" alt="déjà postulé" class="icon"/>
                            {% else %}
                                <img src={{ asset('icons/stop.png')}} title="Vous n'avez pas encore postulé" alt="pas encore postulé" class="icon"/>
                            {% endif %}

                            {{ r.titre|capitalize }} {{r.poste|capitalize}} {{r.ville|upper}}

                      
                        </li>
                    {% endif %}
                {% else %}
                    <li><em>Aucune annonce trouvée.</em></li>
                {% endfor %}
            </ul>
        </div>

    {% endif %}

{% endblock %}

-------------------------------------
Cale: templates//annonce/create.html.twig
Nume: create.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Annonce{% endblock %}
{% form_theme formAnnonce 'bootstrap_5_layout.html.twig' %}
{% block body %}

<h1>Gestion d'une annonce</h1>
<style>
        .invisible{
            display:none;
        }
        .container{
            width: 100%;
            border: 1px solid #ddd;
            padding-top: 13px;
            border-radius: 10px;
            background-color: #F9F9FA;
            color: #413C49;
            margin-top: 20px;
            padding-bottom: 13px;
        }

        .error{
            color: red;
            font-weight: 600;
        }

        .has-error ul{
            color: red;
            list-style-type: none;
            padding-left: 0;
            padding-top: 5px;
            font-style: italic;
        }

        .btn-lg{
            color: #fff;
            margin: auto;
            margin-top: 30px;
        }
    </style>
{{ form_start(formAnnonce) }}

{{ form_row(formAnnonce.titre, {label: 'Titre', 'attr' : { 'placeholder' : 'Titre'}}) }}
{{ form_row(formAnnonce.typecontrat, {label: 'Type de contrat','attr' : { 'placeholder' : 'Type de contrat'}}) }}
{{ form_row(formAnnonce.poste, {label: 'Poste', 'attr' : { 'placeholder' : 'Poste'}}) }}
{{ form_row(formAnnonce.ville, {label: 'Ville', 'attr' : { 'placeholder' : 'Ville'}}) }}
{{ form_row(formAnnonce.datedebut, {label: 'Date de debut du contrat', 'attr' : { 'placeholder' : 'Date de debut'}}) }}
{{ form_row(formAnnonce.datefin, {label: 'Date de fin du contrat', 'attr' : { 'placeholder' : 'Date de fin'}}) }}
{{ form_row(formAnnonce.nombreheures, {label: 'Nombre heures par semaine', 'attr' : { 'placeholder' : 'Nombre heures'}}) }}
{{ form_row(formAnnonce.salaire, {label: 'Salaire', 'attr' : { 'placeholder' : 'Salaire'}}) }}
{{ form_row(formAnnonce.description, {'mapped':'false', 'disabled':'true', 'attr' : { 'placeholder' : 'Description', 'rows':'4', 'class':'invisible'}}) }} 

<textarea rows='4' id="form_description" name="form[description]" required="required" class="form-control">{{formAnnonce.description.vars['data']}}</textarea>

<a href="/annonces" role="button" class="btn btn-dark my-2">Retour à la liste des annonces</a>
<button type="submit" class="btn btn-primary">
    {% if editMode %}
        Enregistrer les modifications
    {% else %}
        Ajouter l'annonce
    {% endif %}
</button>

{{ form_end(formAnnonce) }}



{% endblock %}
-------------------------------------
Cale: templates//annonce/index.html.twig
Nume: index.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Annonce 
    {% if annonce %}
        {{annonce.titre}}
    {% endif %}
{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<h1 class="mt-5">Annonce</h1>

<div>

    {% if annonce %}
    {#{{ dump(annonce) }}#}
        <div class="alert alert-dismissible alert-primary">
            <div>ANNONCE n°{{annonce.id}}</div>
            <div>TITRE : {{annonce.titre}}</div>
            <div>TYPE DE CONTRAT : {{annonce.typecontrat|upper }}</div>
            <div>POSTE : {{annonce.poste|upper}}</div>
            <div>LIEU : {{annonce.ville|capitalize }}</div>
            <div>DATE DEBUT: {{annonce.datedebut|date('d-m-Y')}}</div> 
            {% if annonce.datefin is not same as null %}
              <div>DATE FIN: {{annonce.datefin|date('d-m-Y')}}</div>
            {% endif %}
            <div>NOMBRE HEURES : {{annonce.nombreheures }}</div>
            <div>SALAIRE : {{annonce.salaire }} €</div>
            <div>DATE AJOUT: {{annonce.dateajout|date('d-m-Y H:i:s')}}</div> 

        </div>
        <div class="alert alert-dismissible alert-secondary">DESCRIPTION<br/>{{annonce.description|raw|nl2br}}</div>        
        
        <h3>Recruteur</h3>
                <div class="alert alert-dismissible alert-light">
                    <div>{{annonce.getRecruteur().getNom()|upper}}</div>  
                    <div>{{annonce.getRecruteur().getAdresse()}}</div>
                    <div>{{annonce.getRecruteur().getCodePostal()}}</div>  
                    <div>{{annonce.getRecruteur().getVille()|upper}}</div>   
                </div>
    {% else %}
        <em>Données de l'annonce non trouvées.</em>
    {% endif %}

        
</div>

<br/>

{# Liste des candidats à cette annonce #}
{# A ne pas afficher si on est candidat #}
<h3>Candidatures</h3>
<div class="alert alert-dismissible alert-light">
    <ul>
    {% if candidatures is defined %}
        {% for c in candidatures %}
          {% if c.etat is same as "valid" %}
            <li style="list-style:none" class="my-1">
              <a href="{{ path('app_candidat_annonce', {'id': c.candidat.id, 'annonce':c.annonce.id})}}" class="btn btn-info mx-2">Voir</a> 
              {{c.candidat.candidatuser.nom}} - 
              {{c.candidat.candidatuser.prenom}} - 
              {{c.candidat.candidatuser.email}} - 
              {{c.candidat.cv}}
            </li>
          {% else %}
            <li style="list-style:none" class="my-1">La candidature n'a pas été validée.</li>
          {% endif %}
        {% endfor %}

    {% else %}
    <li><em>Aucune candidature trouvée.</em></li>
    {% endif %}
    <ul>
</div>


{# {{ dump(candidat)}}
{{ dump(candidatures)}} #}
{# Bouton POSTULER #}
{% set dejapostule = false %}
{# Afficher que si on est candidat #}
{% if candidat is not null %}
{# Si le candidat n'a pas déjà postulé #}
    {% if candidatures is not null %}
    
        {% for k in candidatures %}

            {% if k.candidat.id and k.candidat.id is same as candidat.id %}
                {% set dejapostule = true %}
            {% endif %}
        {% endfor %}
    {% endif %}
{% endif %}


{% if app.user.role is same as "candidat" and dejapostule is same as false %}
    
        <div>{# candidat.id #}
            <a href="{{ path('candidature_create', {'annonce':annonce.id, 'candidat': candidat.id })}}" role="button" class="btn btn-success"
            onClick="return confirm('Confirmer votre candidature à cette annonce ? ')">Postuler</a>
        </div>
    
{% endif %}


{# Bouton retour #}
<div class="mt-3">
<a href="{{ path('annonces') }}" role="button" class="btn btn-dark">Retour à la liste des annonces</a>
</div>
<div class="my-5"></div>
{% endblock %}

-------------------------------------
Cale: templates//base.html.twig
Nume: base.html.twig
Continut:
<!DOCTYPE html>
<html lang="fr">
    <head>
        <meta charset="UTF-8">
        <title>{% block title %}Welcome!{% endblock %}</title>
        <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 128 128%22><text y=%221.2em%22 font-size=%2296%22>⚫️</text></svg>">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        {% block stylesheets %}
          {{ encore_entry_link_tags('app') }}
          <link rel="stylesheet" href="{{ asset('/assets/css/style.css') }}">
          <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
          <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
			    <link rel="preconnect" href="https://fonts.googleapis.com">
			    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
			    <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap" rel="stylesheet">
        {% endblock %}

        {% block javascripts %}
            {{ encore_entry_script_tags('app') }}
            <script type='text/javascript' src='https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js' defer></script>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous" defer></script>
        {% endblock %}
    </head>
    <body class="d-flex flex-column justify-content-between min-vh-100 snippet-body" >
    {% include "_partials/_header.html.twig" %}
    <div class="flex-grow-1">
      <div class="container">
        {% block body %}{% endblock %}
      </div>
    </div>
    {% include "_partials/_footer.html.twig" %}
  </body>
</html>

-------------------------------------
Cale: templates//candidat/all.html.twig
Nume: all.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Liste des candidats{% endblock %}



{% block body %}
<style>
    .icon{
            width: 30px
        }
        .icon-link{
            text-decoration: none
        }
    
    .locked { background-color : silver; }
    .validated { background-color : lightgray; }

</style>


<div class="example-wrapper locked mt-1">
    <h1 class="px-2">Liste des candidats à valider</h1>
    <table class="mx-1">
        <tbody>
        {%for r in candidats %}
            {# Liste des candidats à valider #}
            {% if r.candidatuser.role is same as 'candidat_tovalid' %}

                <tr class="mb-1">
                    <td>
                        <a href="{{ path('app_candidat', {'id': r.id})}}" class="btn btn-info mb-2 mx-1">Voir</a> 
                    </td>
                    <td>
                        {{ r.candidatuser.nom|upper }} {{r.candidatuser.prenom|capitalize}}
                    </td>
                    <td>
                        <span class="mx-3 badge bg-dark"> {{r.candidatuser.email|lower}} </span>
                    </td>
                    <td>
                        {% if r.cv is not empty %}
                        <a href={{ asset('uploads/uploads_cv/' ~ r.cv) }} target="_blank" class="icon-link">
                            <img src={{ asset('icons/cv.png')}} title="CV" alt="cv" class="icon"/>
                        </a>
                        {% else %}
                            <img src={{ asset('icons/no-cv.png')}} title="pas de cv" alt="pas de cv" class="icon" />
                        {% endif %}
                    </td>
                    <td>
                        <a href="{{ path('candidat_valider', {'id': r.id}) }}" class="btn btn-warning mx-1">Valider</a>
                        {#<a href="{{ path('candidat_update', {'id': r.id}) }}" role="button" class="btn btn-primary mx-1">Modifier</a>#}
                        <a href="{{ path('candidat_remove', {'id': r.id}) }}" role="button" class="btn btn-danger mx-1"
                            onClick="return confirm('Confirmer la suppression de ce candidat et de ses candidatures ? ')">Supprimer</a>
                    </td>
                    
                </tr>
            {% endif %}
        {% else %}
            <tr><td><em>Aucun candidat trouvé.</em></td></tr>
        {% endfor %}
        </tbody>
    <table>
</div>

<div class="example-wrapper validated mt-1">
    <h1 class="px-2">Liste des candidats validés</h1>
    <table class="pb-1 mx-1">
        <tbody>
            {%for r in candidats %}
                {# Liste des candidats déjà validés #}
                {% if r.candidatuser.role is same as 'candidat' %}
                <tr>
                    <td>
                        <a href="{{ path('app_candidat', {'id': r.id})}}" class="btn btn-info my-2 mx-2">Voir</a> 
                    </td>
                    <td>
                        {{ r.candidatuser.nom|upper }} {{r.candidatuser.prenom|capitalize}}
                    </td>
                    <td>
                        <span class="mx-3 badge bg-dark"> {{r.candidatuser.email|lower}} </span>
                    </td>
                    <td>
                        {% if r.cv is not empty %}
                        <a href={{ asset('uploads/uploads_cv/' ~ r.cv) }} target="_blank" class="icon-link">
                            <img src={{ asset('icons/cv.png')}} title="CV" alt="cv" class="icon"/>
                        </a>
                        {% else %}
                            <img src={{ asset('icons/no-cv.png')}} title="pas de cv" alt="pas de cv" class="icon" />
                        {% endif %}
                    </td>
                    <td>
                        <a href="{{ path('candidat_bloquer', {'id': r.id}) }}" class="btn btn-warning mx-1">Bloquer</a>
                        {#<a href="{{ path('candidat_update', {'id': r.id}) }}" role="button" class="btn btn-primary mx-1">Modifier</a>#}
                        <a href="{{ path('candidat_remove', {'id': r.id}) }}" role="button" class="btn btn-danger mx-1"
                            onClick="return confirm('Confirmer la suppression de ce candidat et de ses candidatures ? ')">Supprimer</a>
                    </td>
                </tr>
                {% endif %}
            {% else %}
                <tr><td><em>Aucun candidat trouvé.</em></td></tr>
            {% endfor %}
        </tbody>
    </table>
</div>
<div class="my-4">
</div>
{% endblock %}

-------------------------------------
Cale: templates//candidat/create.html.twig
Nume: create.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Candidat{% endblock %}


{% block body %}

<h1>Gestion d'un candidat</h1>

{# ---------------------------------------------------------------- #}
{# -----------------  FORMULAIRE USER  --------------------------- #}
<h2 class="my-2">Données personnelles</h2>
  {{ form_start(formUser) }} 
{# <form name="formUser" method="post">  #}
    {{ form_errors(formUser) }}

    {{ form_row(formUser.nom, {label: 'Nom', 'attr': {'class': 'form-control mt-2', 'placeholder' :'Votre nom'}} ) }}
    {{ form_row(formUser.prenom, {label: 'Prenom', 'attr': {'class': 'form-control mt-2', 'placeholder' :'Votre prenom'}} ) }}
    {{ form_row(formUser.email, {label: 'Email', 'attr': {'class': 'form-control mt-2', 'placeholder' :'Votre email'}} ) }}
    {{ form_row(formUser.password, {'type' : 'password', label: 'Mot de passe', 'attr': {'class': 'form-control mt-2'}}) }}
    {{ form_row(formUser.role, {'type': 'hidden', 'label': false, 'attr' : { 'placeholder' : 'role', 'readonly' : 'true'}}) }}
    

    {# <input type="hidden" name="roles" placeholder="roles" value="[]"/> #}
    <button type="submit" class="btn btn-primary mt-3 mb-3 utilisateur">
        Enregistrer les modifications
    </button>
    
{# </form> #}
{{ form_end(formUser) }} 

{# ------------ CV ---------------- #}
<h2>CV - Fichier PDF obligatoire</h2>
{{ form_start(formCandidat) }}
    {{ form_errors(formCandidat) }}

    {% if formCandidat.cv.vars['data'] is not empty %}
        <a href={{ asset('uploads/uploads_cv/' ~ formCandidat.cv.vars['data']) }} target="_blank">Voir le CV (PDF)</a>
        {{ form_row(formCandidat.cv, {'label': false, 'attr' : { 'placeholder' : 'cv', 'class':'candidat my-2', 
        'onClick':'return confirm(\'Si vous uploadez un nouveau CV, le CV actuel sera écrasé. Continuer ? \')'
        }}) }}
    {% else %}
        {{ form_row(formCandidat.cv, {'label': false, 'attr' : { 'placeholder' : 'cv', 'class':'candidat my-2' }}) }}

    {% endif %}
    

    <button type="submit" class="btn btn-primary candidat">
            Enregistrer le CV
    </button>

{# Si on vient de la home page #}
{% if back is defined and back is not same as 'candidats' %}
    <a href="{{ path('compte') }}" role="button" class="btn btn-dark">Retour</a>
{# Si on vient de la liste des candidats #}
{% else %}
    <a href="{{ path('candidats') }}" role="button" class="btn btn-dark mx-2">Retour à la liste des candidats</a>
{% endif %}

{{ form_end(formCandidat) }}

<div class="my-5">&nbsp;</div>
{% endblock %}
-------------------------------------
Cale: templates//candidat/index.html.twig
Nume: index.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Candidat 
    {% if candidat %}
        {{candidat.candidatuser.nom}}
    {% endif %}
{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
    .icon{
            width: 60px
        }
        .icon-link{
            text-decoration: none
        }
</style>

<h1 class="mt-5 mb-3">Compte candidat</h1>

<div>

    {% if candidat %}
        <div>CANDIDAT n°{{candidat.id}}</div>
        <div>USER n°{{candidat.candidatuser.id}}</div>
        <div>Email : {{candidat.candidatuser.email|lower}}</div>
        <div>Nom : <strong>{{candidat.candidatuser.nom|upper }}</strong></div>
        <div>Prenom : <strong>{{candidat.candidatuser.prenom|capitalize}}</strong></div>        
        {#{{ dump(candidat)}}#}
        <h3>CV</h3>
        {# <div>{{candidat.getCv()}}</div>   #}
        {% if candidat.cv is not empty %}
        <a href="{{ asset('uploads/uploads_cv/' ~ candidat.cv) }}" target="_blank">
            <img src={{ asset('icons/cv.png')}} title="Voir le CV (pdf)" alt="cv" class="icon"/>
        </a>
        {% else %}
        pas de cv - Fichier PDF obligatoire
        {% endif %}
        {% if candidat.candidatuser.role is same as 'candidat_tovalid' %}
          <h2>Votre compte doit être validé.</h2>  
        {% endif %}
    {% else %}
        <em>Données du candidat non trouvées.</em>
    {% endif %}

</div>
<br/><br/>

{# Bouton retour sur l'annonce (pour le recruteur) #}
<div>
{% if annonce is defined %} {# not same as null #}
<a href="{{ path('app_annonce', {'id': annonce}) }}" role="button" class="btn btn-dark mb-2 ">Retour à l'annonce</a>
{% endif %}

</div>


{# Si on vient de la home page #}
{% if back is defined and back is not same as 'admins' %}
    {# <a href="{{ path('home') }}" role="button" class="btn btn-dark">Retour</a> #}
    {% if candidat.candidatuser.role is same as 'candidat' %}
          <a href="{{ path('candidat_update', {'id': candidat.candidatuser.id, 'back': 'compte'}) }}" role="button" class="btn btn-primary">Modifier</a>     
    {% endif %}
    
{# Si on vient de la liste des candidats #}
{% else %}
    {# Bouton retour à la liste des candidats #}
    <a href="{{ path('candidats') }}" role="button" class="btn btn-dark">Retour à la liste des candidats</a>
{% endif %}


{% endblock %}

-------------------------------------
Cale: templates//candidature/all.html.twig
Nume: all.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Liste des candidatures{% endblock %}



{% block body %}


<div class="mt-5 p-2 validated my-1">
    <h1>Candidatures</h1>

</div>

<div class="alert alert-dismissible alert-info">
{% if mailok is defined %}
{{ mailok }}
{% endif %}
{% for message in app.flashes('success') %}
	<div class="alert alert-success" role="alert">
		{{ message }}
	</div>
{% endfor %}
{% for message in app.flashes('error') %}
	<div class="alert alert-danger" role="alert">
		{{ message }}
	</div>
{% endfor %}
</div>

    {# Visible par tous SAUF par un CANDIDAT #}
    {% if app.user.role is same as "consultant" %}
        <div class="example-wrapper locked mt-1">


            <h2 class="px-2">Liste des candidatures à valider</h2>
            <ul class="pb-1">
                {%for candidature in candidatures %}
                
                    {# Liste des candidaturesà valider #}
                    {% if candidature.etat is same as 'tovalid' %}

                        <li class="mb-1">
                            <a href="{{ path('candidature', {'id': candidature.id})}}" class="btn btn-info">Voir</a> 
                            Titre annonce: {{ candidature.annonce.titre|capitalize }} - Type contrat : {{ candidature.annonce.typecontrat|upper }} - Recruteur : {{ candidature.annonce.recruteur.nom|upper }} - Candidat : {{ candidature.candidat.candidatuser.nom|upper }} {{ candidature.candidat.candidatuser.prenom|capitalize }}
                           
                            {% if app.user.role is same as "consultant" %}
                            <a href="{{ path('candidature_valider', {'id': candidature.id}) }}" class="btn btn-warning mx-2 my-2">Valider</a> 
                            {% endif %}
                            {#}
                            <a href="{{ path('candidature_remove', {'id': candidature.id}) }}" role="button" class="btn btn-danger"
                                onClick="return confirm('Confirmer la suppression de cette candidature et de toutes les candidatures qui y sont liées ? ')">Supprimer</a>#}
                            
                        </li>
                    {% endif %}
                {% else %}
                    <li><em>Aucune candidature trouvée.</em></li>
                {% endfor %}
            </ul>
        </div>

        <div class="example-wrapper validated">


            <h2 class="px-2">Liste des candidatures validées</h2>
            <ul class="pb-1">
                {%for candidature in candidatures %}
                    {# Liste des candidatures déjà validées #}
                    {% if candidature.etat is same as 'valid' %}
                      <li class="mb-1">
                        <a href="{{ path('candidature', {'id': candidature.id})}}" class="btn btn-info">Voir</a> 
                        Titre annonce: {{ candidature.annonce.titre|capitalize }} - Type contrat : {{ candidature.annonce.typecontrat|upper }} - Recruteur : {{ candidature.annonce.recruteur.nom|upper }} - Candidat : {{ candidature.candidat.candidatuser.nom|upper }} {{ candidature.candidat.candidatuser.prenom|capitalize }}
                        {% if app.user.role is same as "consultant" %}
                        
                          <a href="{{ path('candidature_bloquer', {'id': candidature.id}) }}" class="btn btn-warning mx-2 my-2">Bloquer</a>
                        {% endif %}
                         
                        {#
                        <a href="{{ path('candidature_remove', {'id': r.id}) }}" role="button" class="btn btn-danger mx-2"
                            onClick="return confirm('Confirmer la suppression de cette annonce et de toutes les candidatures qui y sont liées ? ')">Supprimer</a>#}
                        
                    </li>
                    {% endif %}
                {% else %}
                    <li><em>Aucune candidature trouvée.</em></li>
                {% endfor %}
            </ul>
        </div>
    
    {% endif %}

{% endblock %}

-------------------------------------
Cale: templates//candidature/index.html.twig
Nume: index.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Candidature
    {% if annonce %}
        {{annonce.titre}}
    {% endif %}
{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<h1 class="mt-5">Candidature</h1>
<div class="alert alert-dismissible alert-light">
    <ul>
    
          {% if candidature.etat is same as "valid" %}
            <li style="list-style:none" class="my-1">
             La candidature avec l'ID: {{candidature.id}} a été validée.
            </li>
          {% else %}
            <li style="list-style:none" class="my-1">La candidature avec l'ID: {{candidature.id}} n'a pas été validée.</li>
          {% endif %}
    
    </ul>
</div>

<h3>Candidat</h3>
<div class="alert alert-dismissible alert-light">
    <ul>
  
            <li style="list-style:none" class="my-1">
              <a href="{{ path('app_candidat_annonce', {'id': candidature.candidat.id, 'annonce':candidature.annonce.id})}}" class="btn btn-info mx-2">Voir</a> 
              {{candidature.candidat.candidatuser.nom}} 
              {{candidature.candidat.candidatuser.prenom}} - Email:
              {{candidature.candidat.candidatuser.email}} - 
              {% if candidature.candidat.cv is not same as ""  %}
              {{candidature.candidat.cv}}
              {% else %}
              Pas de CV.
              {% endif %}
            </li>
    
    </ul>
</div>

<h3>Annonce</h3>

<div>

    {% if annonce %}
    {#{{ dump(annonce) }}#}
        <div class="alert alert-dismissible alert-primary">
            <div>ANNONCE n°{{annonce.id}}</div>
            <div>TITRE : {{annonce.titre}}</div>
            <div>TYPE DE CONTRAT : {{annonce.typecontrat|upper }}</div>
            <div>POSTE : {{annonce.poste|upper}}</div>
            <div>LIEU : {{annonce.ville|capitalize }}</div>
            <div>DATE DEBU: {{annonce.datedebut|date('d-m-Y')}}</div> 
            {% if annonce.datefin is not same as null %}
              <div>DATE FIN: {{annonce.datefin|date('d-m-Y')}}</div>
            {% endif %}
            <div>NOMBRE HEURES : {{annonce.nombreheures }}</div>
            <div>SALAIRE : {{annonce.salaire }} €</div>
            <div>DATE AJOUT: {{annonce.dateajout|date('d-m-Y H:i:s')}}</div> 

        </div>
        <div class="alert alert-dismissible alert-secondary">DESCRIPTION<br/>{{annonce.description|raw|nl2br}}</div>        
        
        <h3>Recruteur</h3>
                <div class="alert alert-dismissible alert-light">
                    <div>{{annonce.getRecruteur().getNom()|upper}}</div>  
                    <div>{{annonce.getRecruteur().getAdresse()}}</div>
                    <div>{{annonce.getRecruteur().getCodePostal()}}</div>  
                    <div>{{annonce.getRecruteur().getVille()|upper}}</div>   
                </div>
    {% else %}
        <em>Données de l'annonce non trouvées.</em>
    {% endif %}

        
</div>

<br/>

{# Bouton retour #}
<div class="mt-3">
<a href="{{ path('candidatures') }}" role="button" class="btn btn-dark">Retour à la liste des candidatures</a>
</div>
<div class="my-5"></div>
{% endblock %}

-------------------------------------
Cale: templates//compte/index.html.twig
Nume: index.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Compte utilisateur{% endblock %}

{% block body %}
  <h1 class="mt-5">{{ message }}</h1>
{% endblock %}

-------------------------------------
Cale: templates//consultant/all.html.twig
Nume: all.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Liste des consultants{% endblock %}

{% block body %}
<style>
    .locked { background-color : silver; }
    .validated { background-color : lightgray; }

</style>

<div class="example-wrapper locked mt-1 p-2">
    <h1 class="px-2">Liste des consultants</h1>
    <a href="{{ path('consultant_create', {}) }}" role="button" class="btn btn-success">Ajouter un consultant</a>
</div>
<div class="p-2 validated my-1">
    <table>
        <tbody>
        {%for c in consultants %}
            <tr class="mb-1">
                    <td>
                        <a href="{{ path('app_consultant', {'id': c.id}) }}" class="btn btn-info mb-2 mx-1">Voir</a>
                    </td>
                    <td>
                         {{ c.nom|upper }} 
                        {{c.prenom|capitalize}} 
                    </td>
                    <td>
                        <span class="mx-3 badge bg-dark"> {{c.email|lower}} </span>
                    </td>
                    <td>
                        {#<a href="{{ path('consultant_update', {'id': c.id}) }}" role="button" class="btn btn-primary mx-1">Modifier</a>#}
                        <a href="{{ path('consultant_remove', {'id': c.id}) }}" role="button" class="btn btn-danger mx-1"
                            onClick="return confirm('Confirmer la suppression de ce consultant ? ')">Supprimer</a>
                    </td>
                
            </tr>
        {% else %}
            <li><em>Aucun consultant trouvé.</em></li>
        {% endfor %}
        </tbody>
    </table>
</div>


{% endblock %}


-------------------------------------
Cale: templates//consultant/create.html.twig
Nume: create.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Consultant{% endblock %}

{% form_theme formConsultant 'bootstrap_5_layout.html.twig' %}

{% block body %}
<style>
        .container{
            width: 100%;
            border: 1px solid #ddd;
            padding-top: 13px;
            border-radius: 10px;
            background-color: #F9F9FA;
            color: #413C49;
            margin-top: 20px;
            padding-bottom: 13px;
            margin-bottom: 20px;
        }

        .error{
            color: red;
            font-weight: 600;
        }

        .has-error ul{
            color: red;
            list-style-type: none;
            padding-left: 0;
            padding-top: 5px;
            font-style: italic;
        }

        .btn-lg{
            color: #fff;
            margin: auto;
            margin-top: 30px;
        }
    </style>
<h1>
    {% if editMode %}
        Gestion
    {% else %}
        Création
    {% endif %}
 d'un consultant</h1>

{{ form_start(formConsultant) }}

{{ form_row(formConsultant.nom, {label: 'Nom', 'attr' : { 'placeholder' : 'nom'}}) }}
{{ form_row(formConsultant.prenom, {label: 'Prénom', 'attr' : { 'placeholder' : 'prénom'}}) }}
{{ form_row(formConsultant.email, {label: 'Email', 'attr' : { 'placeholder' : 'mail'}}) }}
{{ form_row(formConsultant.password, {label: 'Mot de passe', 'type' : 'password', 'attr' : { 'placeholder' : 'minimum 8 caractères'}}) }}
{# {{ form_row(formConsultant.password_confirm, {'type' : 'password', 'label': 'Confirmer le mot de passe','attr' : { 'placeholder' : 'minimum 8 caractères'}}) }} #}
{{ form_row(formConsultant.role, {'attr' : { 'placeholder' : 'role', 'value' : 'consultant', 'readonly' : 'true'}}) }}

<input type="hidden" name="roles" placeholder="roles" value="[]"/>

{# Si on vient de la home page #}
{% if back is defined and back is not same as 'consultants' %}
    <a href="{{ path('compte') }}" role="button" class="btn btn-dark">Retour</a>
{# Si on vient de la liste des consultants #}
{% else %}
    <a href="/consultants" role="button" class="btn btn-dark">Retour à la liste des consultants</a>
{% endif %}





<button type="submit" class="btn btn-primary">
    {% if editMode %}
        Enregistrer les modifications
    {% else %}
        Ajouter le consultant
    {% endif %}
</button>

{{ form_end(formConsultant) }}



{% endblock %}
-------------------------------------
Cale: templates//consultant/index.html.twig
Nume: index.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Consultant 
    {% if consultant %}
        {{consultant.nom}}
    {% endif %}
{% endblock %}

{% block body %}

<h1 class="mt-5">Compte consultant</h1>

<div>

    {% if consultant %}
        <div>Consultant ID n°{{consultant.id}}</div>
        <div>Email : {{consultant.email|lower}}</div>
        <div>Nom : {{consultant.nom|upper }}</div>
        <div>Prenom :{{consultant.prenom|capitalize}}</div>        
    {% else %}
        <em>Données du consultant non trouvées.</em>
    {% endif %}

</div>
<br/><br/>
{# Si on vient de la home page #}
{% if back is defined and back is not same as 'consultants' %}
    <a href="{{ path('consultant_update', {'id': consultant.id, 'back': 'compte'}) }}" role="button" class="btn btn-primary">Modifier</a>
{# Si on vient de la liste des consultants #}
{% else %}
    {# Bouton retour à la liste des consultants #}
    <a href="{{ path('consultants') }}" role="button" class="btn btn-dark">Retour à la liste des consultants</a>
{% endif %}



{% endblock %}

-------------------------------------
Cale: templates//home/_annonces.html.twig
Nume: _annonces.html.twig
Continut:
{%for annonce in annonces %}
  {% if annonce.validation is same as true %}
    {% include 'home/_card.html.twig' with {annonce: annonce, candidat: candidat} only %}   
  {% endif %}
{% endfor %}   
-------------------------------------
Cale: templates//home/_card.html.twig
Nume: _card.html.twig
Continut:
<div class="card mb-3" id="annonce-{{ annonce.id }}">
  {% if app.user is not same as null %}
    {% if app.user.role is same as "candidat" %}
      <a href="{{ path('app_annonce', {'id': annonce.id})}}" ><h4 class="card-header">{{annonce.titre|capitalize}}</h4></a> 
    {% endif %}
  {% else %} 
      <h4 class="card-header">{{annonce.titre|capitalize}}</h4>
  {% endif %}
	<div class="card-body">
		<h5 class="card-title text-primary">Poste:
			{{annonce.poste|capitalize}}
		</h5>
		<h6 class="card-subtitle text-muted">Ville:
			{{annonce.ville|upper}}</h6>
		<h6 class="card-subtitle text-muted">Recruteur:
			{{annonce.recruteur.nom|upper}}
			
		</h6>
	</div>
	<img src="/images/people_working_1.jpg" width="100px" class="card-img-top" alt="People Working">
	<ul class="list-group list-group-flush">
		<li class="list-group-item">Type de contrat : {{annonce.typecontrat|upper}}</li>
		<li class="list-group-item">Date de début : {{annonce.datedebut|date('d-m-Y')}}</li>
		<li class="list-group-item"> {% if annonce.datefin is not same as null %} Date de fin : {{annonce.datefin|date('d-m-Y')}} {% else %} Pas de date de fin {% endif %}</li>
		<li class="list-group-item">Nombre d'heures semaine: {{annonce.nombreheures}}</li>
		<li class="list-group-item">Salaires mensuel : {{annonce.salaire}} €</li>
	</ul>
	<div class="card-body">
		<h5>Descrition:</h5>
		<p class="card-text">{{annonce.description|slice(0,60)}}...</p>
    {% if app.user is not same as null %}
      {% if app.user.role is same as "candidat" %}
        <a href="{{ path('candidature_create', {'annonce':annonce.id, 'candidat': candidat.id })}}" role="button" class="btn btn-success">Postuler</a> {# candidat.id #}
      {% endif %}
    {% endif %}
	</div>
	<div class="card-footer text-muted">Date d'ajout: {{annonce.dateajout|date('d-m-Y H:i:s') }}</div>
</div>

-------------------------------------
Cale: templates//home/_filter.html.twig
Nume: _filter.html.twig
Continut:
{{ form_start(form, {attr: {class: 'js-filter-form'}}) }} {# filter js-filter js-filter-form #}
  <h2 class="mb-3">Filtrer les annonces:</h2>
  {{ form_row(form.q) }}
  <h4 class="mt-3">Poste:</h4>
  <div class="row">
    <div class="col-md-12">
      {{ form_row(form.poste) }}
    </div>
  </div>

<a class="btn btn-primary mt-2 mb-3 w-100" href="{{path('home')}}">Réinitialiser les filtres</a>

{{ form_end(form) }}
-------------------------------------
Cale: templates//home/_pagination.html.twig
Nume: _pagination.html.twig
Continut:
{{ knp_pagination_render(annonces) }}
-------------------------------------
Cale: templates//home/index.html.twig
Nume: index.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Bienvenue chez TRT Conseil{% endblock %}
{#{% form_theme form 'bootstrap_5_layout.html.twig' %}#}
{% block body %}

<h1 class="mt-5 mb-3">Bienvenue chez TRT Conseil</h1>
<main>
  <section class="mt-4 ">
    <div class="row">
      <div class="col-lg-8 d-flex justify-content-center align-items-center">
        <p class="text-justify">
          <strong>Trouvez votre prochain emploi dans l'hôtellerie et la restauration</strong><br><br>
          <strong>TRT Conseil</strong>, votre partenaire pour une carrière réussie dans le secteur de l'hôtellerie et de la restauration. Que vous soyez recruteur à la recherche du candidat idéal, candidat à la recherche de votre prochaine opportunité professionnelle, consultant spécialisé ou administrateur assurant le bon fonctionnement de notre plateforme, nous sommes là pour vous accompagner.
          <br><br>
          Avec notre interface simple et sécurisée, découvrez des fonctionnalités conçues pour répondre à vos besoins :
          <br><br>
          Créez votre compte en toute simplicité et rejoignez notre communauté d'experts.<br>
          Connectez-vous rapidement pour accéder à votre espace personnalisé.<br>
          Publiez vos annonces d'emploi et trouvez les profils qui correspondent à vos besoins.<br>
          Postulez à des offres d'emploi attractives et lancez-vous dans une nouvelle aventure professionnelle.<br>
          Rejoignez-nous dès aujourd'hui et laissez TRT Conseil vous aider à réaliser vos objectifs de carrière !<br>
        </p>
      </div>
      <img class="col-lg-4 float-end img" src="/images/people_working_2.jpg" width="100px">
    </div>
  </section>
  <div class="js-filter">
    <div class="row">
      <h2 class="mt-5 mb-5">Offres d'emploi en cours</h2>
      <div class="col-md-3 mb-2">
        {% include "home/_filter.html.twig" %}
      </div>
      <div class="col-md-9 col-sm"> {#col-12#}
        <div class="grid js-filter-content">
        {% include "home/_annonces.html.twig" %}
        </div>
        <div class="mt-2 mb-2 js-filter-pagination">
          {% include "home/_pagination.html.twig" %}
        </div>
      </div>
    </div>
  </div>
</main>
{% endblock %}

-------------------------------------
Cale: templates//pages/apropos.html.twig
Nume: apropos.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}
	{{title}}
{% endblock %}

{% block body %}

	
		<h1 class="mt-5 mb-5">Bienvenue chez TRT Conseil !</h1>
		<p>TRT Conseil est une agence de recrutement spécialisée dans l'hôtellerie et la restauration. Fondée en 2014, notre société s'est développée pour devenir un acteur majeur du secteur, avec plus de 12 centres répartis dans toute la France.</p>
    <p>Notre mission est de connecter les recruteurs à des candidats talentueux et motivés, tout en offrant un service de qualité et une expérience utilisateur exceptionnelle.</p>
    <p>Nous nous engageons à fournir un environnement où les employeurs et les chercheurs d'emploi peuvent trouver les meilleures opportunités et réaliser leurs objectifs professionnels.</p>
    <p>Toute l'équipe du TRT Conseil</p>
	
{% endblock %}
-------------------------------------
Cale: templates//pages/cgu.html.twig
Nume: cgu.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}
	{{title}}
{% endblock %}

{% block body %}

	
		<h1 class="mt-5 mb-5">Conditions Générales d’Utilisation</h1>
		<p>Bienvenue sur TRT Conseil. En utilisant ce site, vous acceptez de vous conformer aux conditions générales d'utilisation énoncées ci-dessous. Ces conditions peuvent être modifiées périodiquement, et votre utilisation continue du site constitue votre accord avec ces modifications.</p>
		<p><strong>Compte Utilisateur :</strong> L'accès à certaines fonctionnalités du site nécessite la création d'un compte utilisateur. Vous êtes responsable du maintien de la confidentialité de vos informations d'identification et de toutes les activités qui se produisent sous votre compte.</p>
		<p><strong>Contenu du Site :</strong> Le contenu du site, y compris les textes, images, vidéos, et autres éléments, est la propriété du TRT Conseil et est protégé par les lois sur le droit d'auteur. Toute utilisation non autorisée du contenu est strictement interdite.</p>
		<p><strong>Utilisation Responsable :</strong> En utilisant ce site, vous vous engagez à ne pas violer les lois en vigueur, à ne pas perturber le fonctionnement du site, et à ne pas compromettre la sécurité du site ou de ses utilisateurs.</p>
		<p><strong>Protection des Données :</strong> Nous prenons la protection de vos données personnelles au sérieux. Les informations que vous nous fournissez seront traitées conformément à notre politique de confidentialité.</p>
		<p><strong>Responsabilité :</strong> TRT conseil ne peut être tenu responsable des dommages directs, indirects, spéciaux, consécutifs ou autres résultant de l'utilisation de ce site.</p>
		<p>En utilisant ce site, vous acceptez ces conditions générales d'utilisation. Si vous n'acceptez pas ces conditions, veuillez ne pas utiliser ce site.</p>
	
{% endblock %}
-------------------------------------
Cale: templates//pages/mentions.html.twig
Nume: mentions.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}
	{{title}}
{% endblock %}

{% block body %}

	
		<h1 class="mt-5 mb-5">Mentions Légales</h1>
		<p>Le site web TRT Conseil est édité par [Nom de l'entreprise], dont le siège social est situé à [Adresse]. Il est enregistré sous le numéro [Numéro d'enregistrement] et son numéro de TVA est [Numéro de TVA].</p>
		<p>Directeur de la publication : [Nom]</p>
		<p>Le site est hébergé par [Nom de l'hébergeur] dont le siège social est situé à [Adresse de l'hébergeur].</p>
		<p>Pour toute question ou réclamation, veuillez nous contacter à l'adresse électronique suivante : [Adresse e-mail].</p>
		<p>TRT Conseil est une entreprise enregistrée et opérant en conformité avec les lois en vigueur. Nous nous réservons le droit de modifier le contenu de ce site et ces mentions légales à tout moment. Il est de votre responsabilité de consulter régulièrement ces mentions pour être informé des mises à jour.</p>

{% endblock %}
-------------------------------------
Cale: templates//recruteur/all.html.twig
Nume: all.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Liste des recruteurs{% endblock %}



{% block body %}
<style>
    {# .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; } #}
    
    .locked { background-color : silver; }
    .validated { background-color : lightgray; }
</style>


<div class="example-wrapper locked mt-1 pb-1">
    <h1 class="px-2">Liste des recruteurs à valider</h1>
    <table class="pb-1 my-1">
        <tbody>
       {#} {{ dump(recruteurs) }} #}
            {%for r in recruteurs %}
                {# Liste des recruteurs à valider #}
                {% if r.recruteuruser.role is same as 'recruteur_tovalid' %}

                    <tr class="mb-1">
                        <td>
                        </td>
                        <td>
                            <a href="{{ path('app_recruteur', {'id': r.id})}}" class="btn btn-info mb-2 mx-1">Voir</a>
                        </td>
                        <td>
                            {{ r.recruteuruser.nom|upper }} {{r.recruteuruser.prenom|capitalize}}
                        </td>
                        <td>
                            <span class="mx-3 badge bg-dark"> {{r.recruteuruser.email|lower}} </span>
                        </td>
                        <td>
                            <a href="{{ path('recruteur_valider', {'id': r.id}) }}" class="btn btn-warning mx-1">Valider</a>
                            {#<a href="{{ path('recruteur_update', {'id': r.id}) }}" role="button" class="btn btn-primary mx-1">Modifier</a>#}
                            <a href="{{ path('recruteur_remove', {'id': r.id}) }}" role="button" class="btn btn-danger mx-1" 
                                onClick="return confirm('Confirmer la suppression de ce recruteur et de toutes ces annonces et leurs candidatures ? ')">Supprimer</a>
                        </td>
                    </tr>
                {% endif %}
            {% else %}
                <tr><td><em>Aucun recruteur trouvé.</em></td></tr>
            {% endfor %}
        </tbody>
    </table>
</div>

<div class="example-wrapper validated mb-4">
    <h1 class="px-2">Liste des recruteurs validés</h1>
    <table class="pb-1">
        <tbody>
            {%for r in recruteurs %}
            {#{{ dump(r.recruteuruser.role) }}
            {{ dump(r.recruteuruser.nom) }}
            {{ dump(r.recruteuruser.prenom) }}#}
                {# Liste des recruteurs déjà validés #}
                {% if r.recruteuruser.role is same as 'recruteur' %}
                <tr class="mb-1">
                    <td>
                        <a href="{{ path('app_recruteur', {'id': r.id})}}" class="btn btn-info mb-2 mx-1">Voir</a> 
                    </td>
                    <td>
                   {#} {{ dump(recruteurs) }} #}
                        {{ r.recruteuruser.nom|upper }} {{r.recruteuruser.prenom|capitalize}}
                    </td>
                    <td>
                        <span class="mx-3 badge bg-dark"> {{r.recruteuruser.email|lower}} </span>
                    </td>
                    <td>
                        <a href="{{ path('recruteur_bloquer', {'id': r.id}) }}" class="btn btn-warning mx-1">Bloquer</a>
                        {#<a href="{{ path('recruteur_update', {'id': r.id}) }}" role="button" class="btn btn-primary mx-1">Modifier</a> #}
                        <a href="{{ path('recruteur_remove', {'id': r.id}) }}" role="button" class="btn btn-danger mx-1" 
                            onClick="return confirm('Confirmer la suppression de ce recruteur et de toutes ces annonces et leurs candidatures ? ')">Supprimer</a>
                    </td>
                </tr>
                {% endif %}
            {% else %}
                <tr><td><em>Aucun recruteur trouvé.</em></td></tr>
            {% endfor %}
        </tbody>
    </table>
</div>
{% endblock %}

-------------------------------------
Cale: templates//recruteur/create.html.twig
Nume: create.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Recruteur{% endblock %}

{% form_theme formRecruteur 'bootstrap_5_layout.html.twig' %}

{% block body %}

<h1 class="mt-5">Gestion d'un recruteur</h1>
<h2>Données de l'entreprise</h2>
{{ form_start(formRecruteur) }}
    {{ form_errors(formRecruteur) }}

    {{ form_row(formRecruteur.nom, {label: 'Nom de l\'entrprise', 'attr' : { 'placeholder' : 'nom de l\'entreprise', 'minlength':'3', 'class':'entreprise'}}) }}
    {{ form_row(formRecruteur.adresse, {label: 'Rue', 'attr' : { 'placeholder' : 'adresse', 'class':'entreprise'}}) }}
    {{ form_row(formRecruteur.code_postal, {label: 'Code postal', 'attr' : { 'placeholder' : 'code postal (5 chiffres)', 'class':'entreprise'}}) }}
    {{ form_row(formRecruteur.ville, {label: 'Ville', 'attr' : { 'placeholder' : 'ville', 'class':'entreprise'}}) }}

    <button type="submit" class="btn btn-primary mt-3 mb-3 entreprise">
            Enregistrer les modifications
    </button>
    {#<button type="button" class="btn btn-secondary mx-1" id="switch">switch</button>#}
{{ form_end(formRecruteur) }}

{# -----------------  FORMULAIRE USER  --------------------------- #}
<h2 class="my-2">Données personnelles</h2>
  {{ form_start(formUser) }} 
    {{ form_errors(formUser) }}

    {{ form_row(formUser.nom, {label: 'Nom', 'attr' : { 'placeholder' : 'nom', 'class':'form-control mt-2 mb-2'}}) }}
    {{ form_row(formUser.prenom, {label: 'Prénom', 'attr' : { 'placeholder' : 'prenom', 'class':'form-control mt-2 mb-2'}}) }}
    {{ form_row(formUser.email, {label: 'Email', 'attr' : { 'placeholder' : 'mail', 'class':'form-control mt-2 mb-2'}}) }}
    {{ form_row(formUser.password, {label: 'Mot de passe:', 'type' : 'password', 'attr':{'class':'form-control mt-2 mb-2'}}) }}
    {{ form_row(formUser.role, {'type': 'hidden', 'label': false, 'attr' : { 'placeholder' : 'role', 'readonly' : 'true'}}) }}
    

    {# <input type="hidden" name="roles" placeholder="roles" value="[]"/> #}
    <button type="submit" class="btn btn-primary utilisateur">
        Enregistrer les modifications
    </button>

    {# Si on vient de la home page #}
    {% if back is defined and back is not same as 'recruteurs' %}
        <a href="{{ path('compte') }}" role="button" class="btn btn-dark mt-3 mb-3 mx-2">Retour</a>
    {# Si on vient de la liste des recruteurs #}
    {% else %}
        <a href="{{ path('recruteurs') }}" role="button" class="btn btn-dark mt-3 mb-3 mx-2">Retour à la liste des recruteurs</a>
    {% endif %}
{{ form_end(formUser) }} 
<div class="my-5">&nbsp;</div>
{% endblock %}
-------------------------------------
Cale: templates//recruteur/index.html.twig
Nume: index.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Recruteur 
    {% if recruteur %}
        {{recruteur.recruteuruser.nom}}
    {% endif %}
{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<h1 class="mt-5">Compte recruteur</h1>

<div>

    {% if recruteur %}
        <div>RECRUTEUR n°{{recruteur.id}}</div>
        <div>USER n°{{recruteur.recruteuruser.id}}</div>
        <div>Email : {{recruteur.recruteuruser.email|lower}}</div>
        <div>Nom : {{recruteur.recruteuruser.nom|upper }}</div>
        <div>Prenom : {{recruteur.recruteuruser.prenom|capitalize}}</div>  
        
        <h3 class="mt-5">ENTREPRISE</h3>
        <div>Société : {{recruteur.getNom()|upper}}</div>
        <div>Rue : {{recruteur.getAdresse()|capitalize}}</div>  
        <div>Code Postal : {{recruteur.getCodePostal()}}</div>  
        <div>Ville : {{recruteur.getVille()|upper}}</div>   
        {% if recruteur.recruteuruser.role is same as 'recruteur_tovalid' %}
          <h2>Votre compte doit être validé.</h2>      
        {% endif %}
    {% else %}
        <em>Données du recruteur non trouvées.</em>
    {% endif %}

</div>
<br/><br/>

{# Si on vient de la home page #}
{% if back is defined and back is not same as 'recruteurs' %}
  {% if recruteur.recruteuruser.role is same as 'recruteur' %}
          <a href="{{ path('recruteur_update', {'id': recruteur.id, 'back': 'compte'}) }}" role="button" class="btn btn-primary">Modifier</a>     
        {% endif %}
    {# Si on vient de la liste des recrteurs #}
  {% else %}
    {# Bouton retour à la liste des recrteurs #}
    <a href="{{ path('recruteurs') }}" role="button" class="btn btn-dark">Retour à la liste des recruteurs</a>
  {% endif %}
{% endblock %}

-------------------------------------
Cale: templates//registration/register.html.twig
Nume: register.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Créez votre compte{% endblock %}

{% block body %}
  <h1 class="mt-5">Créez votre compte</h1>
  <div class="registration-form">
  <div class="form-group mb-3">
    {{ form_start(registrationForm) }}
      <div class="form-group mt-3">
        {{ form_row(registrationForm.email, {label: 'Email', 'attr': {'class': 'form-control mt-2', 'placeholder' :'Votre email'}}) }}
      </div>
      <div class="form-group mt-3">  
        {{ form_row(registrationForm.role, {label: 'Rôle', 'attr': {'class': 'form-control mt-2'}}) }}
      </div>
      <div class="form-group mt-3">  
        {{ form_row(registrationForm.nom, {label: 'Nom', 'attr': {'class': 'form-control mt-2', 'placeholder' :'Votre nom'}} ) }}
      </div>
      <div class="form-group mt-3">  
        {{ form_row(registrationForm.prenom, {label: 'Prénom', 'attr': {'class': 'form-control mt-2', 'placeholder' :'Votre prenom'}} ) }}
      </div>  
      <div class="form-group mt-3">
        {{ form_row(registrationForm.plainPassword, {label: 'Mot de passe', 'attr': {'class': 'form-control mt-2'}}) }}
      </div>
      <div class="form-group mt-3">  
        {{ form_row(registrationForm.password_confirm, {label: 'Confirmer le mot de passe', 'attr': {'class': 'form-control mt-2'}}) }}
      </div>
      <div class="form-group mt-3">
        {{ form_row(registrationForm.agreeTerms, {label: 'Conditions Générales d\'Utilisation', 'attr': {'class': 'mx-2'}}) }}
      </div>    
      <div class="form-group mt-3">
        <button type="submit" class="btn btn-primary mt-3 mb-3">S'enregistrer</button>
      </div>
    {{ form_end(registrationForm) }}
  </div>
  </div>
{% endblock %}
-------------------------------------
Cale: templates//security/login.html.twig
Nume: login.html.twig
Continut:
{% extends 'base.html.twig' %}

{% block title %}Connexion !{% endblock %}

{% block body %}
<form method="post">
    {% if error %}
        <div class="alert alert-danger">{{ error.messageKey|trans(error.messageData, 'security') }}</div>
    {% endif %}

    {% if app.user %}
        <div class="mb-3">
            Vous êtes connecté en tant que: {{ app.user.userIdentifier }}, <a href="{{ path('app_logout') }}">Se déconnecter</a>
        </div>
    {% endif %}

    <h1 class="mt-5 mb-5">Veuillez vous connecter</h1>
    <label for="inputEmail">Email</label>
    <input type="email" value="{{ last_username }}" name="email" id="inputEmail" class="form-control" autocomplete="email" required autofocus>
    <label class="mt-3" for="inputPassword">Mot de passe</label>
    <input type="password" name="password" id="inputPassword" class="form-control" autocomplete="current-password" required>

    <input type="hidden" name="_csrf_token"
           value="{{ csrf_token('authenticate') }}"
    >

    <button class="btn btn-lg btn-primary mt-3 mb-3" type="submit">
        Connexion
    </button>
</form>
{% endblock %}

-------------------------------------
Cale: assets/app.js
Nume: app.js
Continut:
import './bootstrap.js';
/*
 * Welcome to your app's main JavaScript file!
 *
 * This file will be included onto the page via the importmap() Twig function,
 * which should already be in your base.html.twig.
 */
import './styles/app.css';

import Filter from './modules/Filter'

new Filter(document.querySelector('.js-filter'));
/*
document.addEventListener('DOMContentLoaded', () => {
  console.log('DOM content loaded');
  new Filter(document.querySelector('.js-filter'));
});*/
-------------------------------------
Cale: assets/bootstrap.js
Nume: bootstrap.js
Continut:
//import { startStimulusApp } from '@symfony/stimulus-bundle';

//const app = startStimulusApp();
// register any custom, 3rd party controllers here
// app.register('some_controller_name', SomeImportedController);

-------------------------------------
Cale: assets/controllers/hello_controller.js
Nume: hello_controller.js
Continut:
import { Controller } from '@hotwired/stimulus';

/*
 * This is an example Stimulus controller!
 *
 * Any element with a data-controller="hello" attribute will cause
 * this controller to be executed. The name "hello" comes from the filename:
 * hello_controller.js -> "hello"
 *
 * Delete this file or adapt it for your use!
 */
export default class extends Controller {
    connect() {
        this.element.textContent = 'Hello Stimulus! Edit me in assets/controllers/hello_controller.js';
    }
}

-------------------------------------
Cale: assets/controllers.json
Nume: controllers.json
Continut:
{
    "controllers": {
        "@symfony/ux-turbo": {
            "turbo-core": {
                "enabled": true,
                "fetch": "eager"
            },
            "mercure-turbo-stream": {
                "enabled": false,
                "fetch": "eager"
            }
        }
    },
    "entrypoints": []
}

-------------------------------------
Cale: assets/modules/Filter.js
Nume: Filter.js
Continut:
/**
 * Class responsible for handling filtering functionality and loading content based on filter selections.
 */
export default class Filter {
  /**
   * Constructs a new Filter instance, associating it with the provided element containing filter controls and content area.
   *
   * @param {HTMLElement|null} element - The root element for the filter component.
   */
  constructor(element) {
    if (!element) {
      return;
    }

    // Cache references to relevant DOM elements:
    this.pagination = element.querySelector('.js-filter-pagination');
    this.content = element.querySelector('.js-filter-content');
    this.form = element.querySelector('.js-filter-form');

    // Attach event listeners to handle user interactions:
    this.bindEvents();
  }

  /**
   * Binds event listeners to the pagination element and form elements to handle user interactions with the filter.
   */
  bindEvents() {
    // Handle clicks on pagination links to load new content based on selected page:
    const handlePaginationClick = (event) => {
      if (event.target.tagName === 'A') {
        event.preventDefault();
        this.loadUrl(event.target.getAttribute('href'));
      }
    };
    this.pagination.addEventListener('click', handlePaginationClick);

    // Handle changes and key presses on form inputs to submit the form and update content:
    this.form.querySelectorAll('input, select').forEach((input) => {
      input.addEventListener('change', this.loadForm.bind(this));
      input.addEventListener('keyup', this.loadForm.bind(this));
    });
  }

  /**
   * Gathers form data, constructs a URL with query parameters, and triggers content loading based on the updated form data.
   *
   * @returns {Promise<void>} - A promise that resolves when the content loading is complete.
   */
  async loadForm() {
    const data = new FormData(this.form);
    const url = new URL(this.form.getAttribute('action') || window.location.href);
    const params = new URLSearchParams();

    data.forEach((value, key) => {
      params.append(key, value);
    });

    return this.loadUrl(url.pathname + '?' + params.toString());
  }

  /**
   * Fetches content from the specified URL using AJAX and updates the content and pagination areas with the received data.
   *
   * @param {string} url - The URL to fetch content from.
   * @returns {Promise<void>} - A promise that resolves when the content update is complete.
   */
  async loadUrl(url) {
    const ajaxUrl = url + '&ajax=1'; // Add flag indicating AJAX request
    const response = await fetch(ajaxUrl, {
      headers: {
        'X-Requested-With': 'XMLHttpRequest',
      },
    });

    if (response.status >= 200 && response.status < 300) {
      const data = await response.json();
      this.content.innerHTML = data.content;
      this.pagination.innerHTML = data.pagination;

      // Update browser history to reflect the loaded content:
      history.replaceState({}, '', url);
    } else {
      console.error('Failed to load content:', response);
    }
  }
}

-------------------------------------
Cale: assets/modules/Filter2.js
Nume: Filter2.js
Continut:
/**
 * Class responsible for handling filtering functionality and loading content based on filter selections.
 * @property {HTMLElement} pagination
 * @property {HTMLElement} content
 * @property {HTMLFormElement} form
 */

export default class Filter {

  /**
   * @param {HTMLElement|null} element - The root element for the filter component.
   */
  constructor(element) {
    if (element === null) {
      return
    }
    // Cache references to relevant DOM elements:
    this.pagination = element.querySelector('.js-filter-pagination')
    this.content = element.querySelector('.js-filter-content')
    this.form = element.querySelector('.js-filter-form')

    // Attach event listeners to handle user interactions:
    this.bindEvents()
  }

  /**
  * Ajoute les comportements aux différents éléments
  * Binds event listeners to the pagination element and form elements to handle user interactions with the filter.
  */
  bindEvents() {
    // Handle clicks on pagination links to load new content based on selected page:
    const aClickListener = e => {
      if (e.target.tagName === 'A') {
        e.preventDefault()
        this.loadUrl(e.target.getAttribute('href'))
      }
    }

    this.pagination.addEventListener('click', aClickListener)
    // Handle changes and key presses on form inputs to submit the form and update content:
    // Add keyup listener for qInput
    const qInput = document.querySelector('.js-filter-form input[name="q"]')
    qInput.addEventListener('keyup', this.loadForm.bind(this))
    /*
    this.form.querySelector('input[name="q"]').forEach(input => {
      input.addEventListener('keyup', this.loadForm.bind(this))
    })*/
    // console.log(this.form);
    this.form.querySelectorAll('input').forEach(input => {
      input.addEventListener('change', this.loadForm.bind(this))
      // input.addEventListener('keyup', this.loadForm.bind(this))
    })
    this.form.querySelectorAll('select').forEach(select => {
      select.addEventListener('change', this.loadForm.bind(this))
    })
  }

  /**
   * Gathers form data, constructs a URL with query parameters, and triggers content loading based on the updated form data.
   *
   * @returns {Promise<void>} - A promise that resolves when the content loading is complete.
   */
  async loadForm() {
    //console.log(this.form);
    const data = new FormData(this.form)
    const url = new URL(this.form.getAttribute('action') || window.location.href)
    const params = new URLSearchParams()

    data.forEach((value, key) => {
      params.append(key, value)
    })
    //debugger;
    return this.loadUrl(url.pathname + '?' + params.toString())
  }

  /**
   * Fetches content from the specified URL using AJAX and updates the content and pagination areas with the received data.
   *
   * @param {string} url - The URL to fetch content from.
   * @returns {Promise<void>} - A promise that resolves when the content update is complete.
   */
  async loadUrl(url) {
    const ajaxUrl = url + '&ajax=1'
    const response = await fetch(ajaxUrl, {
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    if (response.status >= 200 && response.status < 300) {
      const data = await response.json()
      //console.log(data)
      this.content.innerHTML = data.content
      this.pagination.innerHTML = data.pagination

      // Update browser history to reflect the loaded content:
      history.replaceState({}, '', url)  // pushState pour l'historique
    } else {
      console.error(response)
    }
  }
}
-------------------------------------
Cale: assets/styles/app.css
Nume: app.css
Continut:
body {
    background-color: var(--platinum);
}

-------------------------------------
Cale: assets/styles/style.css
Nume: style.css
Continut:
:root {
    --red: #ef233c;
    --darkred: #c00424;
    --platinum: #e5e5e5;
    --black: #2b2d42;
    --white: #fff;
    --thumb: #edf2f4;
    --primary: #3193cc;
    --secondary: #81DD90;
    --success: #28a745;
    --danger: #dc3545;
    --warning: #fd7e14;
    --info: #17a2b8;
    --light: #f8f9fa;
    --dark: #343a40;
}

* {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
}

body {
    font: 14px / 24px "Roboto";
    color: var(--black);
    background: var(--platinum);
    margin: 50px 0;
}

.container {
    max-width: 2000px;
}

h1 {
  font: 40px "Georgia";
  font-size: 40px;
  margin-bottom: 1em;
}

h2 {
    font-size: 32px;
    margin-bottom: 1em;
}




@media (min-width: 500px) {
    
    .grid {
        display: grid;
        grid-template-columns: 1fr;
        grid-gap: 0px;
    }
}

@media (min-width: 700px) {
    .grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        grid-gap: 0px;
    }
}

@media (min-width: 1100px) {
    .grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        grid-gap: 0px;
    }
}

.icon{
  width: 30px
}
.locked { background-color : silver; }
.validated { background-color : lightgray; }

.invisible{
  display:none;
}
.container{
  width: 100%;
  border: 1px solid #ddd;
  padding-top: 13px;
  border-radius: 10px;
  background-color: #F9F9FA;
  color: #413C49;
  margin-top: 10px;
  padding-bottom: 13px;
  margin-bottom: 20px;
}

.error{
  color: red;
  font-weight: 600;
}

.has-error ul{
  color: red;
  list-style-type: none;
  padding-left: 0;
  padding-top: 5px;
  font-style: italic;
}

.btn-lg{
  color: #fff;
  margin: auto;
  margin-top: 30px;
}

.filter {
    display: block;
    position: sticky;
    top: 20px;
}

-------------------------------------
Cale: assets/vendor/@hotwired/stimulus/stimulus.index.js
Nume: stimulus.index.js
Continut:
/**
 * Bundled by jsDelivr using Rollup v2.79.1 and Terser v5.19.2.
 * Original file: /npm/@hotwired/stimulus@3.2.2/dist/stimulus.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
class e{constructor(e,t,s){this.eventTarget=e,this.eventName=t,this.eventOptions=s,this.unorderedBindings=new Set}connect(){this.eventTarget.addEventListener(this.eventName,this,this.eventOptions)}disconnect(){this.eventTarget.removeEventListener(this.eventName,this,this.eventOptions)}bindingConnected(e){this.unorderedBindings.add(e)}bindingDisconnected(e){this.unorderedBindings.delete(e)}handleEvent(e){const t=function(e){if("immediatePropagationStopped"in e)return e;{const{stopImmediatePropagation:t}=e;return Object.assign(e,{immediatePropagationStopped:!1,stopImmediatePropagation(){this.immediatePropagationStopped=!0,t.call(this)}})}}(e);for(const e of this.bindings){if(t.immediatePropagationStopped)break;e.handleEvent(t)}}hasBindings(){return this.unorderedBindings.size>0}get bindings(){return Array.from(this.unorderedBindings).sort(((e,t)=>{const s=e.index,r=t.index;return s<r?-1:s>r?1:0}))}}class t{constructor(e){this.application=e,this.eventListenerMaps=new Map,this.started=!1}start(){this.started||(this.started=!0,this.eventListeners.forEach((e=>e.connect())))}stop(){this.started&&(this.started=!1,this.eventListeners.forEach((e=>e.disconnect())))}get eventListeners(){return Array.from(this.eventListenerMaps.values()).reduce(((e,t)=>e.concat(Array.from(t.values()))),[])}bindingConnected(e){this.fetchEventListenerForBinding(e).bindingConnected(e)}bindingDisconnected(e,t=!1){this.fetchEventListenerForBinding(e).bindingDisconnected(e),t&&this.clearEventListenersForBinding(e)}handleError(e,t,s={}){this.application.handleError(e,`Error ${t}`,s)}clearEventListenersForBinding(e){const t=this.fetchEventListenerForBinding(e);t.hasBindings()||(t.disconnect(),this.removeMappedEventListenerFor(e))}removeMappedEventListenerFor(e){const{eventTarget:t,eventName:s,eventOptions:r}=e,n=this.fetchEventListenerMapForEventTarget(t),i=this.cacheKey(s,r);n.delete(i),0==n.size&&this.eventListenerMaps.delete(t)}fetchEventListenerForBinding(e){const{eventTarget:t,eventName:s,eventOptions:r}=e;return this.fetchEventListener(t,s,r)}fetchEventListener(e,t,s){const r=this.fetchEventListenerMapForEventTarget(e),n=this.cacheKey(t,s);let i=r.get(n);return i||(i=this.createEventListener(e,t,s),r.set(n,i)),i}createEventListener(t,s,r){const n=new e(t,s,r);return this.started&&n.connect(),n}fetchEventListenerMapForEventTarget(e){let t=this.eventListenerMaps.get(e);return t||(t=new Map,this.eventListenerMaps.set(e,t)),t}cacheKey(e,t){const s=[e];return Object.keys(t).sort().forEach((e=>{s.push(`${t[e]?"":"!"}${e}`)})),s.join(":")}}const s={stop:({event:e,value:t})=>(t&&e.stopPropagation(),!0),prevent:({event:e,value:t})=>(t&&e.preventDefault(),!0),self:({event:e,value:t,element:s})=>!t||s===e.target},r=/^(?:(?:([^.]+?)\+)?(.+?)(?:\.(.+?))?(?:@(window|document))?->)?(.+?)(?:#([^:]+?))(?::(.+))?$/;function n(e){return"window"==e?window:"document"==e?document:void 0}function i(e){return e.replace(/(?:[_-])([a-z0-9])/g,((e,t)=>t.toUpperCase()))}function o(e){return i(e.replace(/--/g,"-").replace(/__/g,"_"))}function a(e){return e.charAt(0).toUpperCase()+e.slice(1)}function c(e){return e.replace(/([A-Z])/g,((e,t)=>`-${t.toLowerCase()}`))}function l(e){return null!=e}function h(e,t){return Object.prototype.hasOwnProperty.call(e,t)}const u=["meta","ctrl","alt","shift"];class d{constructor(e,t,s,r){this.element=e,this.index=t,this.eventTarget=s.eventTarget||e,this.eventName=s.eventName||function(e){const t=e.tagName.toLowerCase();if(t in m)return m[t](e)}(e)||g("missing event name"),this.eventOptions=s.eventOptions||{},this.identifier=s.identifier||g("missing identifier"),this.methodName=s.methodName||g("missing method name"),this.keyFilter=s.keyFilter||"",this.schema=r}static forToken(e,t){return new this(e.element,e.index,function(e){const t=e.trim().match(r)||[];let s=t[2],i=t[3];return i&&!["keydown","keyup","keypress"].includes(s)&&(s+=`.${i}`,i=""),{eventTarget:n(t[4]),eventName:s,eventOptions:t[7]?(o=t[7],o.split(":").reduce(((e,t)=>Object.assign(e,{[t.replace(/^!/,"")]:!/^!/.test(t)})),{})):{},identifier:t[5],methodName:t[6],keyFilter:t[1]||i};var o}(e.content),t)}toString(){const e=this.keyFilter?`.${this.keyFilter}`:"",t=this.eventTargetName?`@${this.eventTargetName}`:"";return`${this.eventName}${e}${t}->${this.identifier}#${this.methodName}`}shouldIgnoreKeyboardEvent(e){if(!this.keyFilter)return!1;const t=this.keyFilter.split("+");if(this.keyFilterDissatisfied(e,t))return!0;const s=t.filter((e=>!u.includes(e)))[0];return!!s&&(h(this.keyMappings,s)||g(`contains unknown key filter: ${this.keyFilter}`),this.keyMappings[s].toLowerCase()!==e.key.toLowerCase())}shouldIgnoreMouseEvent(e){if(!this.keyFilter)return!1;const t=[this.keyFilter];return!!this.keyFilterDissatisfied(e,t)}get params(){const e={},t=new RegExp(`^data-${this.identifier}-(.+)-param$`,"i");for(const{name:s,value:r}of Array.from(this.element.attributes)){const n=s.match(t),o=n&&n[1];o&&(e[i(o)]=p(r))}return e}get eventTargetName(){return(e=this.eventTarget)==window?"window":e==document?"document":void 0;var e}get keyMappings(){return this.schema.keyMappings}keyFilterDissatisfied(e,t){const[s,r,n,i]=u.map((e=>t.includes(e)));return e.metaKey!==s||e.ctrlKey!==r||e.altKey!==n||e.shiftKey!==i}}const m={a:()=>"click",button:()=>"click",form:()=>"submit",details:()=>"toggle",input:e=>"submit"==e.getAttribute("type")?"click":"input",select:()=>"change",textarea:()=>"input"};function g(e){throw new Error(e)}function p(e){try{return JSON.parse(e)}catch(t){return e}}class f{constructor(e,t){this.context=e,this.action=t}get index(){return this.action.index}get eventTarget(){return this.action.eventTarget}get eventOptions(){return this.action.eventOptions}get identifier(){return this.context.identifier}handleEvent(e){const t=this.prepareActionEvent(e);this.willBeInvokedByEvent(e)&&this.applyEventModifiers(t)&&this.invokeWithEvent(t)}get eventName(){return this.action.eventName}get method(){const e=this.controller[this.methodName];if("function"==typeof e)return e;throw new Error(`Action "${this.action}" references undefined method "${this.methodName}"`)}applyEventModifiers(e){const{element:t}=this.action,{actionDescriptorFilters:s}=this.context.application,{controller:r}=this.context;let n=!0;for(const[i,o]of Object.entries(this.eventOptions))if(i in s){const a=s[i];n=n&&a({name:i,value:o,event:e,element:t,controller:r})}return n}prepareActionEvent(e){return Object.assign(e,{params:this.action.params})}invokeWithEvent(e){const{target:t,currentTarget:s}=e;try{this.method.call(this.controller,e),this.context.logDebugActivity(this.methodName,{event:e,target:t,currentTarget:s,action:this.methodName})}catch(t){const{identifier:s,controller:r,element:n,index:i}=this,o={identifier:s,controller:r,element:n,index:i,event:e};this.context.handleError(t,`invoking action "${this.action}"`,o)}}willBeInvokedByEvent(e){const t=e.target;return!(e instanceof KeyboardEvent&&this.action.shouldIgnoreKeyboardEvent(e))&&(!(e instanceof MouseEvent&&this.action.shouldIgnoreMouseEvent(e))&&(this.element===t||(t instanceof Element&&this.element.contains(t)?this.scope.containsElement(t):this.scope.containsElement(this.action.element))))}get controller(){return this.context.controller}get methodName(){return this.action.methodName}get element(){return this.scope.element}get scope(){return this.context.scope}}class b{constructor(e,t){this.mutationObserverInit={attributes:!0,childList:!0,subtree:!0},this.element=e,this.started=!1,this.delegate=t,this.elements=new Set,this.mutationObserver=new MutationObserver((e=>this.processMutations(e)))}start(){this.started||(this.started=!0,this.mutationObserver.observe(this.element,this.mutationObserverInit),this.refresh())}pause(e){this.started&&(this.mutationObserver.disconnect(),this.started=!1),e(),this.started||(this.mutationObserver.observe(this.element,this.mutationObserverInit),this.started=!0)}stop(){this.started&&(this.mutationObserver.takeRecords(),this.mutationObserver.disconnect(),this.started=!1)}refresh(){if(this.started){const e=new Set(this.matchElementsInTree());for(const t of Array.from(this.elements))e.has(t)||this.removeElement(t);for(const t of Array.from(e))this.addElement(t)}}processMutations(e){if(this.started)for(const t of e)this.processMutation(t)}processMutation(e){"attributes"==e.type?this.processAttributeChange(e.target,e.attributeName):"childList"==e.type&&(this.processRemovedNodes(e.removedNodes),this.processAddedNodes(e.addedNodes))}processAttributeChange(e,t){this.elements.has(e)?this.delegate.elementAttributeChanged&&this.matchElement(e)?this.delegate.elementAttributeChanged(e,t):this.removeElement(e):this.matchElement(e)&&this.addElement(e)}processRemovedNodes(e){for(const t of Array.from(e)){const e=this.elementFromNode(t);e&&this.processTree(e,this.removeElement)}}processAddedNodes(e){for(const t of Array.from(e)){const e=this.elementFromNode(t);e&&this.elementIsActive(e)&&this.processTree(e,this.addElement)}}matchElement(e){return this.delegate.matchElement(e)}matchElementsInTree(e=this.element){return this.delegate.matchElementsInTree(e)}processTree(e,t){for(const s of this.matchElementsInTree(e))t.call(this,s)}elementFromNode(e){if(e.nodeType==Node.ELEMENT_NODE)return e}elementIsActive(e){return e.isConnected==this.element.isConnected&&this.element.contains(e)}addElement(e){this.elements.has(e)||this.elementIsActive(e)&&(this.elements.add(e),this.delegate.elementMatched&&this.delegate.elementMatched(e))}removeElement(e){this.elements.has(e)&&(this.elements.delete(e),this.delegate.elementUnmatched&&this.delegate.elementUnmatched(e))}}class v{constructor(e,t,s){this.attributeName=t,this.delegate=s,this.elementObserver=new b(e,this)}get element(){return this.elementObserver.element}get selector(){return`[${this.attributeName}]`}start(){this.elementObserver.start()}pause(e){this.elementObserver.pause(e)}stop(){this.elementObserver.stop()}refresh(){this.elementObserver.refresh()}get started(){return this.elementObserver.started}matchElement(e){return e.hasAttribute(this.attributeName)}matchElementsInTree(e){const t=this.matchElement(e)?[e]:[],s=Array.from(e.querySelectorAll(this.selector));return t.concat(s)}elementMatched(e){this.delegate.elementMatchedAttribute&&this.delegate.elementMatchedAttribute(e,this.attributeName)}elementUnmatched(e){this.delegate.elementUnmatchedAttribute&&this.delegate.elementUnmatchedAttribute(e,this.attributeName)}elementAttributeChanged(e,t){this.delegate.elementAttributeValueChanged&&this.attributeName==t&&this.delegate.elementAttributeValueChanged(e,t)}}function y(e,t,s){A(e,t).add(s)}function O(e,t,s){A(e,t).delete(s),E(e,t)}function A(e,t){let s=e.get(t);return s||(s=new Set,e.set(t,s)),s}function E(e,t){const s=e.get(t);null!=s&&0==s.size&&e.delete(t)}class w{constructor(){this.valuesByKey=new Map}get keys(){return Array.from(this.valuesByKey.keys())}get values(){return Array.from(this.valuesByKey.values()).reduce(((e,t)=>e.concat(Array.from(t))),[])}get size(){return Array.from(this.valuesByKey.values()).reduce(((e,t)=>e+t.size),0)}add(e,t){y(this.valuesByKey,e,t)}delete(e,t){O(this.valuesByKey,e,t)}has(e,t){const s=this.valuesByKey.get(e);return null!=s&&s.has(t)}hasKey(e){return this.valuesByKey.has(e)}hasValue(e){return Array.from(this.valuesByKey.values()).some((t=>t.has(e)))}getValuesForKey(e){const t=this.valuesByKey.get(e);return t?Array.from(t):[]}getKeysForValue(e){return Array.from(this.valuesByKey).filter((([t,s])=>s.has(e))).map((([e,t])=>e))}}class M extends w{constructor(){super(),this.keysByValue=new Map}get values(){return Array.from(this.keysByValue.keys())}add(e,t){super.add(e,t),y(this.keysByValue,t,e)}delete(e,t){super.delete(e,t),O(this.keysByValue,t,e)}hasValue(e){return this.keysByValue.has(e)}getKeysForValue(e){const t=this.keysByValue.get(e);return t?Array.from(t):[]}}class k{constructor(e,t,s,r){this._selector=t,this.details=r,this.elementObserver=new b(e,this),this.delegate=s,this.matchesByElement=new w}get started(){return this.elementObserver.started}get selector(){return this._selector}set selector(e){this._selector=e,this.refresh()}start(){this.elementObserver.start()}pause(e){this.elementObserver.pause(e)}stop(){this.elementObserver.stop()}refresh(){this.elementObserver.refresh()}get element(){return this.elementObserver.element}matchElement(e){const{selector:t}=this;if(t){const s=e.matches(t);return this.delegate.selectorMatchElement?s&&this.delegate.selectorMatchElement(e,this.details):s}return!1}matchElementsInTree(e){const{selector:t}=this;if(t){const s=this.matchElement(e)?[e]:[],r=Array.from(e.querySelectorAll(t)).filter((e=>this.matchElement(e)));return s.concat(r)}return[]}elementMatched(e){const{selector:t}=this;t&&this.selectorMatched(e,t)}elementUnmatched(e){const t=this.matchesByElement.getKeysForValue(e);for(const s of t)this.selectorUnmatched(e,s)}elementAttributeChanged(e,t){const{selector:s}=this;if(s){const t=this.matchElement(e),r=this.matchesByElement.has(s,e);t&&!r?this.selectorMatched(e,s):!t&&r&&this.selectorUnmatched(e,s)}}selectorMatched(e,t){this.delegate.selectorMatched(e,t,this.details),this.matchesByElement.add(t,e)}selectorUnmatched(e,t){this.delegate.selectorUnmatched(e,t,this.details),this.matchesByElement.delete(t,e)}}class N{constructor(e,t){this.element=e,this.delegate=t,this.started=!1,this.stringMap=new Map,this.mutationObserver=new MutationObserver((e=>this.processMutations(e)))}start(){this.started||(this.started=!0,this.mutationObserver.observe(this.element,{attributes:!0,attributeOldValue:!0}),this.refresh())}stop(){this.started&&(this.mutationObserver.takeRecords(),this.mutationObserver.disconnect(),this.started=!1)}refresh(){if(this.started)for(const e of this.knownAttributeNames)this.refreshAttribute(e,null)}processMutations(e){if(this.started)for(const t of e)this.processMutation(t)}processMutation(e){const t=e.attributeName;t&&this.refreshAttribute(t,e.oldValue)}refreshAttribute(e,t){const s=this.delegate.getStringMapKeyForAttribute(e);if(null!=s){this.stringMap.has(e)||this.stringMapKeyAdded(s,e);const r=this.element.getAttribute(e);if(this.stringMap.get(e)!=r&&this.stringMapValueChanged(r,s,t),null==r){const t=this.stringMap.get(e);this.stringMap.delete(e),t&&this.stringMapKeyRemoved(s,e,t)}else this.stringMap.set(e,r)}}stringMapKeyAdded(e,t){this.delegate.stringMapKeyAdded&&this.delegate.stringMapKeyAdded(e,t)}stringMapValueChanged(e,t,s){this.delegate.stringMapValueChanged&&this.delegate.stringMapValueChanged(e,t,s)}stringMapKeyRemoved(e,t,s){this.delegate.stringMapKeyRemoved&&this.delegate.stringMapKeyRemoved(e,t,s)}get knownAttributeNames(){return Array.from(new Set(this.currentAttributeNames.concat(this.recordedAttributeNames)))}get currentAttributeNames(){return Array.from(this.element.attributes).map((e=>e.name))}get recordedAttributeNames(){return Array.from(this.stringMap.keys())}}class F{constructor(e,t,s){this.attributeObserver=new v(e,t,this),this.delegate=s,this.tokensByElement=new w}get started(){return this.attributeObserver.started}start(){this.attributeObserver.start()}pause(e){this.attributeObserver.pause(e)}stop(){this.attributeObserver.stop()}refresh(){this.attributeObserver.refresh()}get element(){return this.attributeObserver.element}get attributeName(){return this.attributeObserver.attributeName}elementMatchedAttribute(e){this.tokensMatched(this.readTokensForElement(e))}elementAttributeValueChanged(e){const[t,s]=this.refreshTokensForElement(e);this.tokensUnmatched(t),this.tokensMatched(s)}elementUnmatchedAttribute(e){this.tokensUnmatched(this.tokensByElement.getValuesForKey(e))}tokensMatched(e){e.forEach((e=>this.tokenMatched(e)))}tokensUnmatched(e){e.forEach((e=>this.tokenUnmatched(e)))}tokenMatched(e){this.delegate.tokenMatched(e),this.tokensByElement.add(e.element,e)}tokenUnmatched(e){this.delegate.tokenUnmatched(e),this.tokensByElement.delete(e.element,e)}refreshTokensForElement(e){const t=this.tokensByElement.getValuesForKey(e),s=this.readTokensForElement(e),r=function(e,t){const s=Math.max(e.length,t.length);return Array.from({length:s},((s,r)=>[e[r],t[r]]))}(t,s).findIndex((([e,t])=>{return r=t,!((s=e)&&r&&s.index==r.index&&s.content==r.content);var s,r}));return-1==r?[[],[]]:[t.slice(r),s.slice(r)]}readTokensForElement(e){const t=this.attributeName;return function(e,t,s){return e.trim().split(/\s+/).filter((e=>e.length)).map(((e,r)=>({element:t,attributeName:s,content:e,index:r})))}(e.getAttribute(t)||"",e,t)}}class B{constructor(e,t,s){this.tokenListObserver=new F(e,t,this),this.delegate=s,this.parseResultsByToken=new WeakMap,this.valuesByTokenByElement=new WeakMap}get started(){return this.tokenListObserver.started}start(){this.tokenListObserver.start()}stop(){this.tokenListObserver.stop()}refresh(){this.tokenListObserver.refresh()}get element(){return this.tokenListObserver.element}get attributeName(){return this.tokenListObserver.attributeName}tokenMatched(e){const{element:t}=e,{value:s}=this.fetchParseResultForToken(e);s&&(this.fetchValuesByTokenForElement(t).set(e,s),this.delegate.elementMatchedValue(t,s))}tokenUnmatched(e){const{element:t}=e,{value:s}=this.fetchParseResultForToken(e);s&&(this.fetchValuesByTokenForElement(t).delete(e),this.delegate.elementUnmatchedValue(t,s))}fetchParseResultForToken(e){let t=this.parseResultsByToken.get(e);return t||(t=this.parseToken(e),this.parseResultsByToken.set(e,t)),t}fetchValuesByTokenForElement(e){let t=this.valuesByTokenByElement.get(e);return t||(t=new Map,this.valuesByTokenByElement.set(e,t)),t}parseToken(e){try{return{value:this.delegate.parseValueForToken(e)}}catch(e){return{error:e}}}}class C{constructor(e,t){this.context=e,this.delegate=t,this.bindingsByAction=new Map}start(){this.valueListObserver||(this.valueListObserver=new B(this.element,this.actionAttribute,this),this.valueListObserver.start())}stop(){this.valueListObserver&&(this.valueListObserver.stop(),delete this.valueListObserver,this.disconnectAllActions())}get element(){return this.context.element}get identifier(){return this.context.identifier}get actionAttribute(){return this.schema.actionAttribute}get schema(){return this.context.schema}get bindings(){return Array.from(this.bindingsByAction.values())}connectAction(e){const t=new f(this.context,e);this.bindingsByAction.set(e,t),this.delegate.bindingConnected(t)}disconnectAction(e){const t=this.bindingsByAction.get(e);t&&(this.bindingsByAction.delete(e),this.delegate.bindingDisconnected(t))}disconnectAllActions(){this.bindings.forEach((e=>this.delegate.bindingDisconnected(e,!0))),this.bindingsByAction.clear()}parseValueForToken(e){const t=d.forToken(e,this.schema);if(t.identifier==this.identifier)return t}elementMatchedValue(e,t){this.connectAction(t)}elementUnmatchedValue(e,t){this.disconnectAction(t)}}class ${constructor(e,t){this.context=e,this.receiver=t,this.stringMapObserver=new N(this.element,this),this.valueDescriptorMap=this.controller.valueDescriptorMap}start(){this.stringMapObserver.start(),this.invokeChangedCallbacksForDefaultValues()}stop(){this.stringMapObserver.stop()}get element(){return this.context.element}get controller(){return this.context.controller}getStringMapKeyForAttribute(e){if(e in this.valueDescriptorMap)return this.valueDescriptorMap[e].name}stringMapKeyAdded(e,t){const s=this.valueDescriptorMap[t];this.hasValue(e)||this.invokeChangedCallback(e,s.writer(this.receiver[e]),s.writer(s.defaultValue))}stringMapValueChanged(e,t,s){const r=this.valueDescriptorNameMap[t];null!==e&&(null===s&&(s=r.writer(r.defaultValue)),this.invokeChangedCallback(t,e,s))}stringMapKeyRemoved(e,t,s){const r=this.valueDescriptorNameMap[e];this.hasValue(e)?this.invokeChangedCallback(e,r.writer(this.receiver[e]),s):this.invokeChangedCallback(e,r.writer(r.defaultValue),s)}invokeChangedCallbacksForDefaultValues(){for(const{key:e,name:t,defaultValue:s,writer:r}of this.valueDescriptors)null==s||this.controller.data.has(e)||this.invokeChangedCallback(t,r(s),void 0)}invokeChangedCallback(e,t,s){const r=`${e}Changed`,n=this.receiver[r];if("function"==typeof n){const r=this.valueDescriptorNameMap[e];try{const e=r.reader(t);let i=s;s&&(i=r.reader(s)),n.call(this.receiver,e,i)}catch(e){throw e instanceof TypeError&&(e.message=`Stimulus Value "${this.context.identifier}.${r.name}" - ${e.message}`),e}}}get valueDescriptors(){const{valueDescriptorMap:e}=this;return Object.keys(e).map((t=>e[t]))}get valueDescriptorNameMap(){const e={};return Object.keys(this.valueDescriptorMap).forEach((t=>{const s=this.valueDescriptorMap[t];e[s.name]=s})),e}hasValue(e){const t=`has${a(this.valueDescriptorNameMap[e].name)}`;return this.receiver[t]}}class T{constructor(e,t){this.context=e,this.delegate=t,this.targetsByName=new w}start(){this.tokenListObserver||(this.tokenListObserver=new F(this.element,this.attributeName,this),this.tokenListObserver.start())}stop(){this.tokenListObserver&&(this.disconnectAllTargets(),this.tokenListObserver.stop(),delete this.tokenListObserver)}tokenMatched({element:e,content:t}){this.scope.containsElement(e)&&this.connectTarget(e,t)}tokenUnmatched({element:e,content:t}){this.disconnectTarget(e,t)}connectTarget(e,t){var s;this.targetsByName.has(t,e)||(this.targetsByName.add(t,e),null===(s=this.tokenListObserver)||void 0===s||s.pause((()=>this.delegate.targetConnected(e,t))))}disconnectTarget(e,t){var s;this.targetsByName.has(t,e)&&(this.targetsByName.delete(t,e),null===(s=this.tokenListObserver)||void 0===s||s.pause((()=>this.delegate.targetDisconnected(e,t))))}disconnectAllTargets(){for(const e of this.targetsByName.keys)for(const t of this.targetsByName.getValuesForKey(e))this.disconnectTarget(t,e)}get attributeName(){return`data-${this.context.identifier}-target`}get element(){return this.context.element}get scope(){return this.context.scope}}function S(e,t){const s=D(e);return Array.from(s.reduce(((e,s)=>(function(e,t){const s=e[t];return Array.isArray(s)?s:[]}(s,t).forEach((t=>e.add(t))),e)),new Set))}function x(e,t){return D(e).reduce(((e,s)=>(e.push(...function(e,t){const s=e[t];return s?Object.keys(s).map((e=>[e,s[e]])):[]}(s,t)),e)),[])}function D(e){const t=[];for(;e;)t.push(e),e=Object.getPrototypeOf(e);return t.reverse()}class L{constructor(e,t){this.started=!1,this.context=e,this.delegate=t,this.outletsByName=new w,this.outletElementsByName=new w,this.selectorObserverMap=new Map,this.attributeObserverMap=new Map}start(){this.started||(this.outletDefinitions.forEach((e=>{this.setupSelectorObserverForOutlet(e),this.setupAttributeObserverForOutlet(e)})),this.started=!0,this.dependentContexts.forEach((e=>e.refresh())))}refresh(){this.selectorObserverMap.forEach((e=>e.refresh())),this.attributeObserverMap.forEach((e=>e.refresh()))}stop(){this.started&&(this.started=!1,this.disconnectAllOutlets(),this.stopSelectorObservers(),this.stopAttributeObservers())}stopSelectorObservers(){this.selectorObserverMap.size>0&&(this.selectorObserverMap.forEach((e=>e.stop())),this.selectorObserverMap.clear())}stopAttributeObservers(){this.attributeObserverMap.size>0&&(this.attributeObserverMap.forEach((e=>e.stop())),this.attributeObserverMap.clear())}selectorMatched(e,t,{outletName:s}){const r=this.getOutlet(e,s);r&&this.connectOutlet(r,e,s)}selectorUnmatched(e,t,{outletName:s}){const r=this.getOutletFromMap(e,s);r&&this.disconnectOutlet(r,e,s)}selectorMatchElement(e,{outletName:t}){const s=this.selector(t),r=this.hasOutlet(e,t),n=e.matches(`[${this.schema.controllerAttribute}~=${t}]`);return!!s&&(r&&n&&e.matches(s))}elementMatchedAttribute(e,t){const s=this.getOutletNameFromOutletAttributeName(t);s&&this.updateSelectorObserverForOutlet(s)}elementAttributeValueChanged(e,t){const s=this.getOutletNameFromOutletAttributeName(t);s&&this.updateSelectorObserverForOutlet(s)}elementUnmatchedAttribute(e,t){const s=this.getOutletNameFromOutletAttributeName(t);s&&this.updateSelectorObserverForOutlet(s)}connectOutlet(e,t,s){var r;this.outletElementsByName.has(s,t)||(this.outletsByName.add(s,e),this.outletElementsByName.add(s,t),null===(r=this.selectorObserverMap.get(s))||void 0===r||r.pause((()=>this.delegate.outletConnected(e,t,s))))}disconnectOutlet(e,t,s){var r;this.outletElementsByName.has(s,t)&&(this.outletsByName.delete(s,e),this.outletElementsByName.delete(s,t),null===(r=this.selectorObserverMap.get(s))||void 0===r||r.pause((()=>this.delegate.outletDisconnected(e,t,s))))}disconnectAllOutlets(){for(const e of this.outletElementsByName.keys)for(const t of this.outletElementsByName.getValuesForKey(e))for(const s of this.outletsByName.getValuesForKey(e))this.disconnectOutlet(s,t,e)}updateSelectorObserverForOutlet(e){const t=this.selectorObserverMap.get(e);t&&(t.selector=this.selector(e))}setupSelectorObserverForOutlet(e){const t=this.selector(e),s=new k(document.body,t,this,{outletName:e});this.selectorObserverMap.set(e,s),s.start()}setupAttributeObserverForOutlet(e){const t=this.attributeNameForOutletName(e),s=new v(this.scope.element,t,this);this.attributeObserverMap.set(e,s),s.start()}selector(e){return this.scope.outlets.getSelectorForOutletName(e)}attributeNameForOutletName(e){return this.scope.schema.outletAttributeForScope(this.identifier,e)}getOutletNameFromOutletAttributeName(e){return this.outletDefinitions.find((t=>this.attributeNameForOutletName(t)===e))}get outletDependencies(){const e=new w;return this.router.modules.forEach((t=>{S(t.definition.controllerConstructor,"outlets").forEach((s=>e.add(s,t.identifier)))})),e}get outletDefinitions(){return this.outletDependencies.getKeysForValue(this.identifier)}get dependentControllerIdentifiers(){return this.outletDependencies.getValuesForKey(this.identifier)}get dependentContexts(){const e=this.dependentControllerIdentifiers;return this.router.contexts.filter((t=>e.includes(t.identifier)))}hasOutlet(e,t){return!!this.getOutlet(e,t)||!!this.getOutletFromMap(e,t)}getOutlet(e,t){return this.application.getControllerForElementAndIdentifier(e,t)}getOutletFromMap(e,t){return this.outletsByName.getValuesForKey(t).find((t=>t.element===e))}get scope(){return this.context.scope}get schema(){return this.context.schema}get identifier(){return this.context.identifier}get application(){return this.context.application}get router(){return this.application.router}}class V{constructor(e,t){this.logDebugActivity=(e,t={})=>{const{identifier:s,controller:r,element:n}=this;t=Object.assign({identifier:s,controller:r,element:n},t),this.application.logDebugActivity(this.identifier,e,t)},this.module=e,this.scope=t,this.controller=new e.controllerConstructor(this),this.bindingObserver=new C(this,this.dispatcher),this.valueObserver=new $(this,this.controller),this.targetObserver=new T(this,this),this.outletObserver=new L(this,this);try{this.controller.initialize(),this.logDebugActivity("initialize")}catch(e){this.handleError(e,"initializing controller")}}connect(){this.bindingObserver.start(),this.valueObserver.start(),this.targetObserver.start(),this.outletObserver.start();try{this.controller.connect(),this.logDebugActivity("connect")}catch(e){this.handleError(e,"connecting controller")}}refresh(){this.outletObserver.refresh()}disconnect(){try{this.controller.disconnect(),this.logDebugActivity("disconnect")}catch(e){this.handleError(e,"disconnecting controller")}this.outletObserver.stop(),this.targetObserver.stop(),this.valueObserver.stop(),this.bindingObserver.stop()}get application(){return this.module.application}get identifier(){return this.module.identifier}get schema(){return this.application.schema}get dispatcher(){return this.application.dispatcher}get element(){return this.scope.element}get parentElement(){return this.element.parentElement}handleError(e,t,s={}){const{identifier:r,controller:n,element:i}=this;s=Object.assign({identifier:r,controller:n,element:i},s),this.application.handleError(e,`Error ${t}`,s)}targetConnected(e,t){this.invokeControllerMethod(`${t}TargetConnected`,e)}targetDisconnected(e,t){this.invokeControllerMethod(`${t}TargetDisconnected`,e)}outletConnected(e,t,s){this.invokeControllerMethod(`${o(s)}OutletConnected`,e,t)}outletDisconnected(e,t,s){this.invokeControllerMethod(`${o(s)}OutletDisconnected`,e,t)}invokeControllerMethod(e,...t){const s=this.controller;"function"==typeof s[e]&&s[e](...t)}}function K(e){return function(e,t){const s=j(e),r=function(e,t){return I(t).reduce(((s,r)=>{const n=function(e,t,s){const r=Object.getOwnPropertyDescriptor(e,s);if(!r||!("value"in r)){const e=Object.getOwnPropertyDescriptor(t,s).value;return r&&(e.get=r.get||e.get,e.set=r.set||e.set),e}}(e,t,r);return n&&Object.assign(s,{[r]:n}),s}),{})}(e.prototype,t);return Object.defineProperties(s.prototype,r),s}(e,function(e){const t=S(e,"blessings");return t.reduce(((t,s)=>{const r=s(e);for(const e in r){const s=t[e]||{};t[e]=Object.assign(s,r[e])}return t}),{})}(e))}const I="function"==typeof Object.getOwnPropertySymbols?e=>[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)]:Object.getOwnPropertyNames,j=(()=>{function e(e){function t(){return Reflect.construct(e,arguments,new.target)}return t.prototype=Object.create(e.prototype,{constructor:{value:t}}),Reflect.setPrototypeOf(t,e),t}try{return function(){const t=e((function(){this.a.call(this)}));t.prototype.a=function(){},new t}(),e}catch(e){return e=>class extends e{}}})();class U{constructor(e,t){this.application=e,this.definition=function(e){return{identifier:e.identifier,controllerConstructor:K(e.controllerConstructor)}}(t),this.contextsByScope=new WeakMap,this.connectedContexts=new Set}get identifier(){return this.definition.identifier}get controllerConstructor(){return this.definition.controllerConstructor}get contexts(){return Array.from(this.connectedContexts)}connectContextForScope(e){const t=this.fetchContextForScope(e);this.connectedContexts.add(t),t.connect()}disconnectContextForScope(e){const t=this.contextsByScope.get(e);t&&(this.connectedContexts.delete(t),t.disconnect())}fetchContextForScope(e){let t=this.contextsByScope.get(e);return t||(t=new V(this,e),this.contextsByScope.set(e,t)),t}}class P{constructor(e){this.scope=e}has(e){return this.data.has(this.getDataKey(e))}get(e){return this.getAll(e)[0]}getAll(e){const t=this.data.get(this.getDataKey(e))||"";return t.match(/[^\s]+/g)||[]}getAttributeName(e){return this.data.getAttributeNameForKey(this.getDataKey(e))}getDataKey(e){return`${e}-class`}get data(){return this.scope.data}}class R{constructor(e){this.scope=e}get element(){return this.scope.element}get identifier(){return this.scope.identifier}get(e){const t=this.getAttributeNameForKey(e);return this.element.getAttribute(t)}set(e,t){const s=this.getAttributeNameForKey(e);return this.element.setAttribute(s,t),this.get(e)}has(e){const t=this.getAttributeNameForKey(e);return this.element.hasAttribute(t)}delete(e){if(this.has(e)){const t=this.getAttributeNameForKey(e);return this.element.removeAttribute(t),!0}return!1}getAttributeNameForKey(e){return`data-${this.identifier}-${c(e)}`}}class z{constructor(e){this.warnedKeysByObject=new WeakMap,this.logger=e}warn(e,t,s){let r=this.warnedKeysByObject.get(e);r||(r=new Set,this.warnedKeysByObject.set(e,r)),r.has(t)||(r.add(t),this.logger.warn(s,e))}}function _(e,t){return`[${e}~="${t}"]`}class q{constructor(e){this.scope=e}get element(){return this.scope.element}get identifier(){return this.scope.identifier}get schema(){return this.scope.schema}has(e){return null!=this.find(e)}find(...e){return e.reduce(((e,t)=>e||this.findTarget(t)||this.findLegacyTarget(t)),void 0)}findAll(...e){return e.reduce(((e,t)=>[...e,...this.findAllTargets(t),...this.findAllLegacyTargets(t)]),[])}findTarget(e){const t=this.getSelectorForTargetName(e);return this.scope.findElement(t)}findAllTargets(e){const t=this.getSelectorForTargetName(e);return this.scope.findAllElements(t)}getSelectorForTargetName(e){return _(this.schema.targetAttributeForScope(this.identifier),e)}findLegacyTarget(e){const t=this.getLegacySelectorForTargetName(e);return this.deprecate(this.scope.findElement(t),e)}findAllLegacyTargets(e){const t=this.getLegacySelectorForTargetName(e);return this.scope.findAllElements(t).map((t=>this.deprecate(t,e)))}getLegacySelectorForTargetName(e){const t=`${this.identifier}.${e}`;return _(this.schema.targetAttribute,t)}deprecate(e,t){if(e){const{identifier:s}=this,r=this.schema.targetAttribute,n=this.schema.targetAttributeForScope(s);this.guide.warn(e,`target:${t}`,`Please replace ${r}="${s}.${t}" with ${n}="${t}". The ${r} attribute is deprecated and will be removed in a future version of Stimulus.`)}return e}get guide(){return this.scope.guide}}class W{constructor(e,t){this.scope=e,this.controllerElement=t}get element(){return this.scope.element}get identifier(){return this.scope.identifier}get schema(){return this.scope.schema}has(e){return null!=this.find(e)}find(...e){return e.reduce(((e,t)=>e||this.findOutlet(t)),void 0)}findAll(...e){return e.reduce(((e,t)=>[...e,...this.findAllOutlets(t)]),[])}getSelectorForOutletName(e){const t=this.schema.outletAttributeForScope(this.identifier,e);return this.controllerElement.getAttribute(t)}findOutlet(e){const t=this.getSelectorForOutletName(e);if(t)return this.findElement(t,e)}findAllOutlets(e){const t=this.getSelectorForOutletName(e);return t?this.findAllElements(t,e):[]}findElement(e,t){return this.scope.queryElements(e).filter((s=>this.matchesElement(s,e,t)))[0]}findAllElements(e,t){return this.scope.queryElements(e).filter((s=>this.matchesElement(s,e,t)))}matchesElement(e,t,s){const r=e.getAttribute(this.scope.schema.controllerAttribute)||"";return e.matches(t)&&r.split(" ").includes(s)}}class J{constructor(e,t,s,r){this.targets=new q(this),this.classes=new P(this),this.data=new R(this),this.containsElement=e=>e.closest(this.controllerSelector)===this.element,this.schema=e,this.element=t,this.identifier=s,this.guide=new z(r),this.outlets=new W(this.documentScope,t)}findElement(e){return this.element.matches(e)?this.element:this.queryElements(e).find(this.containsElement)}findAllElements(e){return[...this.element.matches(e)?[this.element]:[],...this.queryElements(e).filter(this.containsElement)]}queryElements(e){return Array.from(this.element.querySelectorAll(e))}get controllerSelector(){return _(this.schema.controllerAttribute,this.identifier)}get isDocumentScope(){return this.element===document.documentElement}get documentScope(){return this.isDocumentScope?this:new J(this.schema,document.documentElement,this.identifier,this.guide.logger)}}class H{constructor(e,t,s){this.element=e,this.schema=t,this.delegate=s,this.valueListObserver=new B(this.element,this.controllerAttribute,this),this.scopesByIdentifierByElement=new WeakMap,this.scopeReferenceCounts=new WeakMap}start(){this.valueListObserver.start()}stop(){this.valueListObserver.stop()}get controllerAttribute(){return this.schema.controllerAttribute}parseValueForToken(e){const{element:t,content:s}=e;return this.parseValueForElementAndIdentifier(t,s)}parseValueForElementAndIdentifier(e,t){const s=this.fetchScopesByIdentifierForElement(e);let r=s.get(t);return r||(r=this.delegate.createScopeForElementAndIdentifier(e,t),s.set(t,r)),r}elementMatchedValue(e,t){const s=(this.scopeReferenceCounts.get(t)||0)+1;this.scopeReferenceCounts.set(t,s),1==s&&this.delegate.scopeConnected(t)}elementUnmatchedValue(e,t){const s=this.scopeReferenceCounts.get(t);s&&(this.scopeReferenceCounts.set(t,s-1),1==s&&this.delegate.scopeDisconnected(t))}fetchScopesByIdentifierForElement(e){let t=this.scopesByIdentifierByElement.get(e);return t||(t=new Map,this.scopesByIdentifierByElement.set(e,t)),t}}class Z{constructor(e){this.application=e,this.scopeObserver=new H(this.element,this.schema,this),this.scopesByIdentifier=new w,this.modulesByIdentifier=new Map}get element(){return this.application.element}get schema(){return this.application.schema}get logger(){return this.application.logger}get controllerAttribute(){return this.schema.controllerAttribute}get modules(){return Array.from(this.modulesByIdentifier.values())}get contexts(){return this.modules.reduce(((e,t)=>e.concat(t.contexts)),[])}start(){this.scopeObserver.start()}stop(){this.scopeObserver.stop()}loadDefinition(e){this.unloadIdentifier(e.identifier);const t=new U(this.application,e);this.connectModule(t);const s=e.controllerConstructor.afterLoad;s&&s.call(e.controllerConstructor,e.identifier,this.application)}unloadIdentifier(e){const t=this.modulesByIdentifier.get(e);t&&this.disconnectModule(t)}getContextForElementAndIdentifier(e,t){const s=this.modulesByIdentifier.get(t);if(s)return s.contexts.find((t=>t.element==e))}proposeToConnectScopeForElementAndIdentifier(e,t){const s=this.scopeObserver.parseValueForElementAndIdentifier(e,t);s?this.scopeObserver.elementMatchedValue(s.element,s):console.error(`Couldn't find or create scope for identifier: "${t}" and element:`,e)}handleError(e,t,s){this.application.handleError(e,t,s)}createScopeForElementAndIdentifier(e,t){return new J(this.schema,e,t,this.logger)}scopeConnected(e){this.scopesByIdentifier.add(e.identifier,e);const t=this.modulesByIdentifier.get(e.identifier);t&&t.connectContextForScope(e)}scopeDisconnected(e){this.scopesByIdentifier.delete(e.identifier,e);const t=this.modulesByIdentifier.get(e.identifier);t&&t.disconnectContextForScope(e)}connectModule(e){this.modulesByIdentifier.set(e.identifier,e);this.scopesByIdentifier.getValuesForKey(e.identifier).forEach((t=>e.connectContextForScope(t)))}disconnectModule(e){this.modulesByIdentifier.delete(e.identifier);this.scopesByIdentifier.getValuesForKey(e.identifier).forEach((t=>e.disconnectContextForScope(t)))}}const G={controllerAttribute:"data-controller",actionAttribute:"data-action",targetAttribute:"data-target",targetAttributeForScope:e=>`data-${e}-target`,outletAttributeForScope:(e,t)=>`data-${e}-${t}-outlet`,keyMappings:Object.assign(Object.assign({enter:"Enter",tab:"Tab",esc:"Escape",space:" ",up:"ArrowUp",down:"ArrowDown",left:"ArrowLeft",right:"ArrowRight",home:"Home",end:"End",page_up:"PageUp",page_down:"PageDown"},Q("abcdefghijklmnopqrstuvwxyz".split("").map((e=>[e,e])))),Q("0123456789".split("").map((e=>[e,e]))))};function Q(e){return e.reduce(((e,[t,s])=>Object.assign(Object.assign({},e),{[t]:s})),{})}class X{constructor(e=document.documentElement,r=G){this.logger=console,this.debug=!1,this.logDebugActivity=(e,t,s={})=>{this.debug&&this.logFormattedMessage(e,t,s)},this.element=e,this.schema=r,this.dispatcher=new t(this),this.router=new Z(this),this.actionDescriptorFilters=Object.assign({},s)}static start(e,t){const s=new this(e,t);return s.start(),s}async start(){await new Promise((e=>{"loading"==document.readyState?document.addEventListener("DOMContentLoaded",(()=>e())):e()})),this.logDebugActivity("application","starting"),this.dispatcher.start(),this.router.start(),this.logDebugActivity("application","start")}stop(){this.logDebugActivity("application","stopping"),this.dispatcher.stop(),this.router.stop(),this.logDebugActivity("application","stop")}register(e,t){this.load({identifier:e,controllerConstructor:t})}registerActionOption(e,t){this.actionDescriptorFilters[e]=t}load(e,...t){(Array.isArray(e)?e:[e,...t]).forEach((e=>{e.controllerConstructor.shouldLoad&&this.router.loadDefinition(e)}))}unload(e,...t){(Array.isArray(e)?e:[e,...t]).forEach((e=>this.router.unloadIdentifier(e)))}get controllers(){return this.router.contexts.map((e=>e.controller))}getControllerForElementAndIdentifier(e,t){const s=this.router.getContextForElementAndIdentifier(e,t);return s?s.controller:null}handleError(e,t,s){var r;this.logger.error("%s\n\n%o\n\n%o",t,e,s),null===(r=window.onerror)||void 0===r||r.call(window,t,"",0,0,e)}logFormattedMessage(e,t,s={}){s=Object.assign({application:this},s),this.logger.groupCollapsed(`${e} #${t}`),this.logger.log("details:",Object.assign({},s)),this.logger.groupEnd()}}function Y(e,t,s){return e.application.getControllerForElementAndIdentifier(t,s)}function ee(e,t,s){let r=Y(e,t,s);return r||(e.application.router.proposeToConnectScopeForElementAndIdentifier(t,s),r=Y(e,t,s),r||void 0)}function te([e,t],s){return function(e){const{token:t,typeDefinition:s}=e,r=`${c(t)}-value`,n=function(e){const{controller:t,token:s,typeDefinition:r}=e,n={controller:t,token:s,typeObject:r},i=function(e){const{controller:t,token:s,typeObject:r}=e,n=l(r.type),i=l(r.default),o=n&&i,a=n&&!i,c=!n&&i,h=se(r.type),u=re(e.typeObject.default);if(a)return h;if(c)return u;if(h!==u){throw new Error(`The specified default value for the Stimulus Value "${t?`${t}.${s}`:s}" must match the defined type "${h}". The provided default value of "${r.default}" is of type "${u}".`)}if(o)return h}(n),o=re(r),a=se(r),c=i||o||a;if(c)return c;const h=t?`${t}.${r}`:s;throw new Error(`Unknown value type "${h}" for "${s}" value`)}(e);return{type:n,key:r,name:i(r),get defaultValue(){return function(e){const t=se(e);if(t)return ne[t];const s=h(e,"default"),r=h(e,"type"),n=e;if(s)return n.default;if(r){const{type:e}=n,t=se(e);if(t)return ne[t]}return e}(s)},get hasCustomDefaultValue(){return void 0!==re(s)},reader:ie[n],writer:oe[n]||oe.default}}({controller:s,token:e,typeDefinition:t})}function se(e){switch(e){case Array:return"array";case Boolean:return"boolean";case Number:return"number";case Object:return"object";case String:return"string"}}function re(e){switch(typeof e){case"boolean":return"boolean";case"number":return"number";case"string":return"string"}return Array.isArray(e)?"array":"[object Object]"===Object.prototype.toString.call(e)?"object":void 0}const ne={get array(){return[]},boolean:!1,number:0,get object(){return{}},string:""},ie={array(e){const t=JSON.parse(e);if(!Array.isArray(t))throw new TypeError(`expected value of type "array" but instead got value "${e}" of type "${re(t)}"`);return t},boolean:e=>!("0"==e||"false"==String(e).toLowerCase()),number:e=>Number(e.replace(/_/g,"")),object(e){const t=JSON.parse(e);if(null===t||"object"!=typeof t||Array.isArray(t))throw new TypeError(`expected value of type "object" but instead got value "${e}" of type "${re(t)}"`);return t},string:e=>e},oe={default:function(e){return`${e}`},array:ae,object:ae};function ae(e){return JSON.stringify(e)}class ce{constructor(e){this.context=e}static get shouldLoad(){return!0}static afterLoad(e,t){}get application(){return this.context.application}get scope(){return this.context.scope}get element(){return this.scope.element}get identifier(){return this.scope.identifier}get targets(){return this.scope.targets}get outlets(){return this.scope.outlets}get classes(){return this.scope.classes}get data(){return this.scope.data}initialize(){}connect(){}disconnect(){}dispatch(e,{target:t=this.element,detail:s={},prefix:r=this.identifier,bubbles:n=!0,cancelable:i=!0}={}){const o=new CustomEvent(r?`${r}:${e}`:e,{detail:s,bubbles:n,cancelable:i});return t.dispatchEvent(o),o}}ce.blessings=[function(e){return S(e,"classes").reduce(((e,t)=>{return Object.assign(e,{[`${s=t}Class`]:{get(){const{classes:e}=this;if(e.has(s))return e.get(s);{const t=e.getAttributeName(s);throw new Error(`Missing attribute "${t}"`)}}},[`${s}Classes`]:{get(){return this.classes.getAll(s)}},[`has${a(s)}Class`]:{get(){return this.classes.has(s)}}});var s}),{})},function(e){return S(e,"targets").reduce(((e,t)=>{return Object.assign(e,{[`${s=t}Target`]:{get(){const e=this.targets.find(s);if(e)return e;throw new Error(`Missing target element "${s}" for "${this.identifier}" controller`)}},[`${s}Targets`]:{get(){return this.targets.findAll(s)}},[`has${a(s)}Target`]:{get(){return this.targets.has(s)}}});var s}),{})},function(e){const t=x(e,"values"),s={valueDescriptorMap:{get(){return t.reduce(((e,t)=>{const s=te(t,this.identifier),r=this.data.getAttributeNameForKey(s.key);return Object.assign(e,{[r]:s})}),{})}}};return t.reduce(((e,t)=>Object.assign(e,function(e,t){const s=te(e,t),{key:r,name:n,reader:i,writer:o}=s;return{[n]:{get(){const e=this.data.get(r);return null!==e?i(e):s.defaultValue},set(e){void 0===e?this.data.delete(r):this.data.set(r,o(e))}},[`has${a(n)}`]:{get(){return this.data.has(r)||s.hasCustomDefaultValue}}}}(t))),s)},function(e){return S(e,"outlets").reduce(((e,t)=>Object.assign(e,function(e){const t=o(e);return{[`${t}Outlet`]:{get(){const t=this.outlets.find(e),s=this.outlets.getSelectorForOutletName(e);if(t){const s=ee(this,t,e);if(s)return s;throw new Error(`The provided outlet element is missing an outlet controller "${e}" instance for host controller "${this.identifier}"`)}throw new Error(`Missing outlet element "${e}" for host controller "${this.identifier}". Stimulus couldn't find a matching outlet element using selector "${s}".`)}},[`${t}Outlets`]:{get(){const t=this.outlets.findAll(e);return t.length>0?t.map((t=>{const s=ee(this,t,e);if(s)return s;console.warn(`The provided outlet element is missing an outlet controller "${e}" instance for host controller "${this.identifier}"`,t)})).filter((e=>e)):[]}},[`${t}OutletElement`]:{get(){const t=this.outlets.find(e),s=this.outlets.getSelectorForOutletName(e);if(t)return t;throw new Error(`Missing outlet element "${e}" for host controller "${this.identifier}". Stimulus couldn't find a matching outlet element using selector "${s}".`)}},[`${t}OutletElements`]:{get(){return this.outlets.findAll(e)}},[`has${a(t)}Outlet`]:{get(){return this.outlets.has(e)}}}}(t))),{})}],ce.targets=[],ce.outlets=[],ce.values={};export{X as Application,v as AttributeObserver,V as Context,ce as Controller,b as ElementObserver,M as IndexedMultimap,w as Multimap,k as SelectorObserver,N as StringMapObserver,F as TokenListObserver,B as ValueListObserver,y as add,G as defaultSchema,O as del,A as fetch,E as prune};export default null;

-------------------------------------
Cale: assets/vendor/@hotwired/turbo/turbo.index.js
Nume: turbo.index.js
Continut:
/**
 * Bundled by jsDelivr using Rollup v2.79.1 and Terser v5.19.2.
 * Original file: /npm/@hotwired/turbo@7.3.0/dist/turbo.es2017-esm.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
!function(){if(void 0===window.Reflect||void 0===window.customElements||window.customElements.polyfillWrapFlushCallback)return;const e=HTMLElement,t=function(){return Reflect.construct(e,[],this.constructor)};window.HTMLElement=t,HTMLElement.prototype=e.prototype,HTMLElement.prototype.constructor=HTMLElement,Object.setPrototypeOf(HTMLElement,e)}(),function(e){function t(e,t,s){throw new e("Failed to execute 'requestSubmit' on 'HTMLFormElement': "+t+".",s)}"function"!=typeof e.requestSubmit&&(e.requestSubmit=function(e){e?(!function(e,s){e instanceof HTMLElement||t(TypeError,"parameter 1 is not of type 'HTMLElement'"),"submit"==e.type||t(TypeError,"The specified element is not a submit button"),e.form==s||t(DOMException,"The specified element is not owned by this form element","NotFoundError")}(e,this),e.click()):((e=document.createElement("input")).type="submit",e.hidden=!0,this.appendChild(e),e.click(),this.removeChild(e))})}(HTMLFormElement.prototype);const e=new WeakMap;function t(t){const s=function(e){const t=e instanceof Element?e:e instanceof Node?e.parentElement:null,s=t?t.closest("input, button"):null;return"submit"==(null==s?void 0:s.type)?s:null}(t.target);s&&s.form&&e.set(s.form,s)}var s,i,r,n,o,a;!function(){if("submitter"in Event.prototype)return;let s=window.Event.prototype;if("SubmitEvent"in window&&/Apple Computer/.test(navigator.vendor))s=window.SubmitEvent.prototype;else if("SubmitEvent"in window)return;addEventListener("click",t,!0),Object.defineProperty(s,"submitter",{get(){if("submit"==this.type&&this.target instanceof HTMLFormElement)return e.get(this.target)}})}(),function(e){e.eager="eager",e.lazy="lazy"}(s||(s={}));class l extends HTMLElement{static get observedAttributes(){return["disabled","complete","loading","src"]}constructor(){super(),this.loaded=Promise.resolve(),this.delegate=new l.delegateConstructor(this)}connectedCallback(){this.delegate.connect()}disconnectedCallback(){this.delegate.disconnect()}reload(){return this.delegate.sourceURLReloaded()}attributeChangedCallback(e){"loading"==e?this.delegate.loadingStyleChanged():"complete"==e?this.delegate.completeChanged():"src"==e?this.delegate.sourceURLChanged():this.delegate.disabledChanged()}get src(){return this.getAttribute("src")}set src(e){e?this.setAttribute("src",e):this.removeAttribute("src")}get loading(){return function(e){if("lazy"===e.toLowerCase())return s.lazy;return s.eager}(this.getAttribute("loading")||"")}set loading(e){e?this.setAttribute("loading",e):this.removeAttribute("loading")}get disabled(){return this.hasAttribute("disabled")}set disabled(e){e?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get autoscroll(){return this.hasAttribute("autoscroll")}set autoscroll(e){e?this.setAttribute("autoscroll",""):this.removeAttribute("autoscroll")}get complete(){return!this.delegate.isLoading}get isActive(){return this.ownerDocument===document&&!this.isPreview}get isPreview(){var e,t;return null===(t=null===(e=this.ownerDocument)||void 0===e?void 0:e.documentElement)||void 0===t?void 0:t.hasAttribute("data-turbo-preview")}}function h(e){return new URL(e.toString(),document.baseURI)}function c(e){let t;return e.hash?e.hash.slice(1):(t=e.href.match(/#(.*)$/))?t[1]:void 0}function d(e,t){return h((null==t?void 0:t.getAttribute("formaction"))||e.getAttribute("action")||e.action)}function u(e){return(function(e){return function(e){return e.pathname.split("/").slice(1)}(e).slice(-1)[0]}(e).match(/\.[^.]*$/)||[])[0]||""}function m(e,t){const s=function(e){return t=e.origin+e.pathname,t.endsWith("/")?t:t+"/";var t}(t);return e.href===h(s).href||e.href.startsWith(s)}function p(e,t){return m(e,t)&&!!u(e).match(/^(?:|\.(?:htm|html|xhtml|php))$/)}function g(e){const t=c(e);return null!=t?e.href.slice(0,-(t.length+1)):e.href}function f(e){return g(e)}class v{constructor(e){this.response=e}get succeeded(){return this.response.ok}get failed(){return!this.succeeded}get clientError(){return this.statusCode>=400&&this.statusCode<=499}get serverError(){return this.statusCode>=500&&this.statusCode<=599}get redirected(){return this.response.redirected}get location(){return h(this.response.url)}get isHTML(){return this.contentType&&this.contentType.match(/^(?:text\/([^\s;,]+\b)?html|application\/xhtml\+xml)\b/)}get statusCode(){return this.response.status}get contentType(){return this.header("Content-Type")}get responseText(){return this.response.clone().text()}get responseHTML(){return this.isHTML?this.response.clone().text():Promise.resolve(void 0)}header(e){return this.response.headers.get(e)}}function b(e){if("false"==e.getAttribute("data-turbo-eval"))return e;{const t=document.createElement("script"),s=M("csp-nonce");return s&&(t.nonce=s),t.textContent=e.textContent,t.async=!1,function(e,t){for(const{name:s,value:i}of t.attributes)e.setAttribute(s,i)}(t,e),t}}function w(e,{target:t,cancelable:s,detail:i}={}){const r=new CustomEvent(e,{cancelable:s,bubbles:!0,composed:!0,detail:i});return t&&t.isConnected?t.dispatchEvent(r):document.documentElement.dispatchEvent(r),r}function S(){return new Promise((e=>requestAnimationFrame((()=>e()))))}function E(e=""){return(new DOMParser).parseFromString(e,"text/html")}function y(e,...t){const s=function(e,t){return e.reduce(((e,s,i)=>e+s+(null==t[i]?"":t[i])),"")}(e,t).replace(/^\n/,"").split("\n"),i=s[0].match(/^\s+/),r=i?i[0].length:0;return s.map((e=>e.slice(r))).join("\n")}function L(){return Array.from({length:36}).map(((e,t)=>8==t||13==t||18==t||23==t?"-":14==t?"4":19==t?(Math.floor(4*Math.random())+8).toString(16):Math.floor(15*Math.random()).toString(16))).join("")}function R(e,...t){for(const s of t.map((t=>null==t?void 0:t.getAttribute(e))))if("string"==typeof s)return s;return null}function C(...e){for(const t of e)"turbo-frame"==t.localName&&t.setAttribute("busy",""),t.setAttribute("aria-busy","true")}function T(...e){for(const t of e)"turbo-frame"==t.localName&&t.removeAttribute("busy"),t.removeAttribute("aria-busy")}function A(e,t=2e3){return new Promise((s=>{const i=()=>{e.removeEventListener("error",i),e.removeEventListener("load",i),s()};e.addEventListener("load",i,{once:!0}),e.addEventListener("error",i,{once:!0}),setTimeout(s,t)}))}function P(e){switch(e){case"replace":return history.replaceState;case"advance":case"restore":return history.pushState}}function F(...e){const t=R("data-turbo-action",...e);return function(e){return"advance"==e||"replace"==e||"restore"==e}(t)?t:null}function k(e){return document.querySelector(`meta[name="${e}"]`)}function M(e){const t=k(e);return t&&t.content}function I(e,t){var s;if(e instanceof Element)return e.closest(t)||I(e.assignedSlot||(null===(s=e.getRootNode())||void 0===s?void 0:s.host),t)}!function(e){e[e.get=0]="get",e[e.post=1]="post",e[e.put=2]="put",e[e.patch=3]="patch",e[e.delete=4]="delete"}(i||(i={}));class H{constructor(e,t,s,i=new URLSearchParams,r=null){this.abortController=new AbortController,this.resolveRequestPromise=e=>{},this.delegate=e,this.method=t,this.headers=this.defaultHeaders,this.body=i,this.url=s,this.target=r}get location(){return this.url}get params(){return this.url.searchParams}get entries(){return this.body?Array.from(this.body.entries()):[]}cancel(){this.abortController.abort()}async perform(){const{fetchOptions:e}=this;this.delegate.prepareRequest(this),await this.allowRequestToBeIntercepted(e);try{this.delegate.requestStarted(this);const t=await fetch(this.url.href,e);return await this.receive(t)}catch(e){if("AbortError"!==e.name)throw this.willDelegateErrorHandling(e)&&this.delegate.requestErrored(this,e),e}finally{this.delegate.requestFinished(this)}}async receive(e){const t=new v(e);return w("turbo:before-fetch-response",{cancelable:!0,detail:{fetchResponse:t},target:this.target}).defaultPrevented?this.delegate.requestPreventedHandlingResponse(this,t):t.succeeded?this.delegate.requestSucceededWithResponse(this,t):this.delegate.requestFailedWithResponse(this,t),t}get fetchOptions(){var e;return{method:i[this.method].toUpperCase(),credentials:"same-origin",headers:this.headers,redirect:"follow",body:this.isSafe?null:this.body,signal:this.abortSignal,referrer:null===(e=this.delegate.referrer)||void 0===e?void 0:e.href}}get defaultHeaders(){return{Accept:"text/html, application/xhtml+xml"}}get isSafe(){return this.method===i.get}get abortSignal(){return this.abortController.signal}acceptResponseType(e){this.headers.Accept=[e,this.headers.Accept].join(", ")}async allowRequestToBeIntercepted(e){const t=new Promise((e=>this.resolveRequestPromise=e));w("turbo:before-fetch-request",{cancelable:!0,detail:{fetchOptions:e,url:this.url,resume:this.resolveRequestPromise},target:this.target}).defaultPrevented&&await t}willDelegateErrorHandling(e){return!w("turbo:fetch-request-error",{target:this.target,cancelable:!0,detail:{request:this,error:e}}).defaultPrevented}}class q{constructor(e,t){this.started=!1,this.intersect=e=>{const t=e.slice(-1)[0];(null==t?void 0:t.isIntersecting)&&this.delegate.elementAppearedInViewport(this.element)},this.delegate=e,this.element=t,this.intersectionObserver=new IntersectionObserver(this.intersect)}start(){this.started||(this.started=!0,this.intersectionObserver.observe(this.element))}stop(){this.started&&(this.started=!1,this.intersectionObserver.unobserve(this.element))}}class B{static wrap(e){return"string"==typeof e?new this(function(e){const t=document.createElement("template");return t.innerHTML=e,t.content}(e)):e}constructor(e){this.fragment=function(e){for(const t of e.querySelectorAll("turbo-stream")){const e=document.importNode(t,!0);for(const t of e.templateElement.content.querySelectorAll("script"))t.replaceWith(b(t));t.replaceWith(e)}return e}(e)}}B.contentType="text/vnd.turbo-stream.html",function(e){e[e.initialized=0]="initialized",e[e.requesting=1]="requesting",e[e.waiting=2]="waiting",e[e.receiving=3]="receiving",e[e.stopping=4]="stopping",e[e.stopped=5]="stopped"}(r||(r={})),function(e){e.urlEncoded="application/x-www-form-urlencoded",e.multipart="multipart/form-data",e.plain="text/plain"}(n||(n={}));class O{static confirmMethod(e,t,s){return Promise.resolve(confirm(e))}constructor(e,t,s,n=!1){this.state=r.initialized,this.delegate=e,this.formElement=t,this.submitter=s,this.formData=function(e,t){const s=new FormData(e),i=null==t?void 0:t.getAttribute("name"),r=null==t?void 0:t.getAttribute("value");i&&s.append(i,r||"");return s}(t,s),this.location=h(this.action),this.method==i.get&&function(e,t){const s=new URLSearchParams;for(const[e,i]of t)i instanceof File||s.append(e,i);e.search=s.toString()}(this.location,[...this.body.entries()]),this.fetchRequest=new H(this,this.method,this.location,this.body,this.formElement),this.mustRedirect=n}get method(){var e;return function(e){switch(e.toLowerCase()){case"get":return i.get;case"post":return i.post;case"put":return i.put;case"patch":return i.patch;case"delete":return i.delete}}(((null===(e=this.submitter)||void 0===e?void 0:e.getAttribute("formmethod"))||this.formElement.getAttribute("method")||"").toLowerCase())||i.get}get action(){var e;const t="string"==typeof this.formElement.action?this.formElement.action:null;return(null===(e=this.submitter)||void 0===e?void 0:e.hasAttribute("formaction"))?this.submitter.getAttribute("formaction")||"":this.formElement.getAttribute("action")||t||""}get body(){return this.enctype==n.urlEncoded||this.method==i.get?new URLSearchParams(this.stringFormData):this.formData}get enctype(){var e;return function(e){switch(e.toLowerCase()){case n.multipart:return n.multipart;case n.plain:return n.plain;default:return n.urlEncoded}}((null===(e=this.submitter)||void 0===e?void 0:e.getAttribute("formenctype"))||this.formElement.enctype)}get isSafe(){return this.fetchRequest.isSafe}get stringFormData(){return[...this.formData].reduce(((e,[t,s])=>e.concat("string"==typeof s?[[t,s]]:[])),[])}async start(){const{initialized:e,requesting:t}=r,s=R("data-turbo-confirm",this.submitter,this.formElement);if("string"==typeof s){if(!await O.confirmMethod(s,this.formElement,this.submitter))return}if(this.state==e)return this.state=t,this.fetchRequest.perform()}stop(){const{stopping:e,stopped:t}=r;if(this.state!=e&&this.state!=t)return this.state=e,this.fetchRequest.cancel(),!0}prepareRequest(e){if(!e.isSafe){const t=function(e){if(null!=e){const t=(document.cookie?document.cookie.split("; "):[]).find((t=>t.startsWith(e)));if(t){const e=t.split("=").slice(1).join("=");return e?decodeURIComponent(e):void 0}}}(M("csrf-param"))||M("csrf-token");t&&(e.headers["X-CSRF-Token"]=t)}this.requestAcceptsTurboStreamResponse(e)&&e.acceptResponseType(B.contentType)}requestStarted(e){var t;this.state=r.waiting,null===(t=this.submitter)||void 0===t||t.setAttribute("disabled",""),this.setSubmitsWith(),w("turbo:submit-start",{target:this.formElement,detail:{formSubmission:this}}),this.delegate.formSubmissionStarted(this)}requestPreventedHandlingResponse(e,t){this.result={success:t.succeeded,fetchResponse:t}}requestSucceededWithResponse(e,t){if(t.clientError||t.serverError)this.delegate.formSubmissionFailedWithResponse(this,t);else if(this.requestMustRedirect(e)&&function(e){return 200==e.statusCode&&!e.redirected}(t)){const e=new Error("Form responses must redirect to another location");this.delegate.formSubmissionErrored(this,e)}else this.state=r.receiving,this.result={success:!0,fetchResponse:t},this.delegate.formSubmissionSucceededWithResponse(this,t)}requestFailedWithResponse(e,t){this.result={success:!1,fetchResponse:t},this.delegate.formSubmissionFailedWithResponse(this,t)}requestErrored(e,t){this.result={success:!1,error:t},this.delegate.formSubmissionErrored(this,t)}requestFinished(e){var t;this.state=r.stopped,null===(t=this.submitter)||void 0===t||t.removeAttribute("disabled"),this.resetSubmitterText(),w("turbo:submit-end",{target:this.formElement,detail:Object.assign({formSubmission:this},this.result)}),this.delegate.formSubmissionFinished(this)}setSubmitsWith(){if(this.submitter&&this.submitsWith)if(this.submitter.matches("button"))this.originalSubmitText=this.submitter.innerHTML,this.submitter.innerHTML=this.submitsWith;else if(this.submitter.matches("input")){const e=this.submitter;this.originalSubmitText=e.value,e.value=this.submitsWith}}resetSubmitterText(){if(this.submitter&&this.originalSubmitText)if(this.submitter.matches("button"))this.submitter.innerHTML=this.originalSubmitText;else if(this.submitter.matches("input")){this.submitter.value=this.originalSubmitText}}requestMustRedirect(e){return!e.isSafe&&this.mustRedirect}requestAcceptsTurboStreamResponse(e){return!e.isSafe||function(e,...t){return t.some((t=>t&&t.hasAttribute(e)))}("data-turbo-stream",this.submitter,this.formElement)}get submitsWith(){var e;return null===(e=this.submitter)||void 0===e?void 0:e.getAttribute("data-turbo-submits-with")}}class N{constructor(e){this.element=e}get activeElement(){return this.element.ownerDocument.activeElement}get children(){return[...this.element.children]}hasAnchor(e){return null!=this.getElementForAnchor(e)}getElementForAnchor(e){return e?this.element.querySelector(`[id='${e}'], a[name='${e}']`):null}get isConnected(){return this.element.isConnected}get firstAutofocusableElement(){for(const e of this.element.querySelectorAll("[autofocus]"))if(null==e.closest("[inert], :disabled, [hidden], details:not([open]), dialog:not([open])"))return e;return null}get permanentElements(){return W(this.element)}getPermanentElementById(e){return V(this.element,e)}getPermanentElementMapForSnapshot(e){const t={};for(const s of this.permanentElements){const{id:i}=s,r=e.getPermanentElementById(i);r&&(t[i]=[s,r])}return t}}function V(e,t){return e.querySelector(`#${t}[data-turbo-permanent]`)}function W(e){return e.querySelectorAll("[id][data-turbo-permanent]")}class D{constructor(e,t){this.started=!1,this.submitCaptured=()=>{this.eventTarget.removeEventListener("submit",this.submitBubbled,!1),this.eventTarget.addEventListener("submit",this.submitBubbled,!1)},this.submitBubbled=e=>{if(!e.defaultPrevented){const t=e.target instanceof HTMLFormElement?e.target:void 0,s=e.submitter||void 0;t&&function(e,t){const s=(null==t?void 0:t.getAttribute("formmethod"))||e.getAttribute("method");return"dialog"!=s}(t,s)&&function(e,t){if((null==t?void 0:t.hasAttribute("formtarget"))||e.hasAttribute("target")){const s=(null==t?void 0:t.getAttribute("formtarget"))||e.target;for(const e of document.getElementsByName(s))if(e instanceof HTMLIFrameElement)return!1;return!0}return!0}(t,s)&&this.delegate.willSubmitForm(t,s)&&(e.preventDefault(),e.stopImmediatePropagation(),this.delegate.formSubmitted(t,s))}},this.delegate=e,this.eventTarget=t}start(){this.started||(this.eventTarget.addEventListener("submit",this.submitCaptured,!0),this.started=!0)}stop(){this.started&&(this.eventTarget.removeEventListener("submit",this.submitCaptured,!0),this.started=!1)}}class x{constructor(e,t){this.resolveRenderPromise=e=>{},this.resolveInterceptionPromise=e=>{},this.delegate=e,this.element=t}scrollToAnchor(e){const t=this.snapshot.getElementForAnchor(e);t?(this.scrollToElement(t),this.focusElement(t)):this.scrollToPosition({x:0,y:0})}scrollToAnchorFromLocation(e){this.scrollToAnchor(c(e))}scrollToElement(e){e.scrollIntoView()}focusElement(e){e instanceof HTMLElement&&(e.hasAttribute("tabindex")?e.focus():(e.setAttribute("tabindex","-1"),e.focus(),e.removeAttribute("tabindex")))}scrollToPosition({x:e,y:t}){this.scrollRoot.scrollTo(e,t)}scrollToTop(){this.scrollToPosition({x:0,y:0})}get scrollRoot(){return window}async render(e){const{isPreview:t,shouldRender:s,newSnapshot:i}=e;if(s)try{this.renderPromise=new Promise((e=>this.resolveRenderPromise=e)),this.renderer=e,await this.prepareToRenderSnapshot(e);const s=new Promise((e=>this.resolveInterceptionPromise=e)),r={resume:this.resolveInterceptionPromise,render:this.renderer.renderElement};this.delegate.allowsImmediateRender(i,r)||await s,await this.renderSnapshot(e),this.delegate.viewRenderedSnapshot(i,t),this.delegate.preloadOnLoadLinksForView(this.element),this.finishRenderingSnapshot(e)}finally{delete this.renderer,this.resolveRenderPromise(void 0),delete this.renderPromise}else this.invalidate(e.reloadReason)}invalidate(e){this.delegate.viewInvalidated(e)}async prepareToRenderSnapshot(e){this.markAsPreview(e.isPreview),await e.prepareToRender()}markAsPreview(e){e?this.element.setAttribute("data-turbo-preview",""):this.element.removeAttribute("data-turbo-preview")}async renderSnapshot(e){await e.render()}finishRenderingSnapshot(e){e.finishRendering()}}class U extends x{missing(){this.element.innerHTML='<strong class="turbo-frame-error">Content missing</strong>'}get snapshot(){return new N(this.element)}}class j{constructor(e,t){this.clickBubbled=e=>{this.respondsToEventTarget(e.target)?this.clickEvent=e:delete this.clickEvent},this.linkClicked=e=>{this.clickEvent&&this.respondsToEventTarget(e.target)&&e.target instanceof Element&&this.delegate.shouldInterceptLinkClick(e.target,e.detail.url,e.detail.originalEvent)&&(this.clickEvent.preventDefault(),e.preventDefault(),this.delegate.linkClickIntercepted(e.target,e.detail.url,e.detail.originalEvent)),delete this.clickEvent},this.willVisit=e=>{delete this.clickEvent},this.delegate=e,this.element=t}start(){this.element.addEventListener("click",this.clickBubbled),document.addEventListener("turbo:click",this.linkClicked),document.addEventListener("turbo:before-visit",this.willVisit)}stop(){this.element.removeEventListener("click",this.clickBubbled),document.removeEventListener("turbo:click",this.linkClicked),document.removeEventListener("turbo:before-visit",this.willVisit)}respondsToEventTarget(e){const t=e instanceof Element?e:e instanceof Node?e.parentElement:null;return t&&t.closest("turbo-frame, html")==this.element}}class ${constructor(e,t){this.started=!1,this.clickCaptured=()=>{this.eventTarget.removeEventListener("click",this.clickBubbled,!1),this.eventTarget.addEventListener("click",this.clickBubbled,!1)},this.clickBubbled=e=>{if(e instanceof MouseEvent&&this.clickEventIsSignificant(e)){const t=e.composedPath&&e.composedPath()[0]||e.target,s=this.findLinkFromClickTarget(t);if(s&&function(e){if(e.hasAttribute("target")){for(const t of document.getElementsByName(e.target))if(t instanceof HTMLIFrameElement)return!1;return!0}return!0}(s)){const t=this.getLocationForLink(s);this.delegate.willFollowLinkToLocation(s,t,e)&&(e.preventDefault(),this.delegate.followedLinkToLocation(s,t))}}},this.delegate=e,this.eventTarget=t}start(){this.started||(this.eventTarget.addEventListener("click",this.clickCaptured,!0),this.started=!0)}stop(){this.started&&(this.eventTarget.removeEventListener("click",this.clickCaptured,!0),this.started=!1)}clickEventIsSignificant(e){return!(e.target&&e.target.isContentEditable||e.defaultPrevented||e.which>1||e.altKey||e.ctrlKey||e.metaKey||e.shiftKey)}findLinkFromClickTarget(e){return I(e,"a[href]:not([target^=_]):not([download])")}getLocationForLink(e){return h(e.getAttribute("href")||"")}}class z{constructor(e,t){this.delegate=e,this.linkInterceptor=new $(this,t)}start(){this.linkInterceptor.start()}stop(){this.linkInterceptor.stop()}willFollowLinkToLocation(e,t,s){return this.delegate.willSubmitFormLinkToLocation(e,t,s)&&e.hasAttribute("data-turbo-method")}followedLinkToLocation(e,t){const s=document.createElement("form");for(const[e,i]of t.searchParams)s.append(Object.assign(document.createElement("input"),{type:"hidden",name:e,value:i}));const i=Object.assign(t,{search:""});s.setAttribute("data-turbo","true"),s.setAttribute("action",i.href),s.setAttribute("hidden","");const r=e.getAttribute("data-turbo-method");r&&s.setAttribute("method",r);const n=e.getAttribute("data-turbo-frame");n&&s.setAttribute("data-turbo-frame",n);const o=F(e);o&&s.setAttribute("data-turbo-action",o);const a=e.getAttribute("data-turbo-confirm");a&&s.setAttribute("data-turbo-confirm",a);e.hasAttribute("data-turbo-stream")&&s.setAttribute("data-turbo-stream",""),this.delegate.submittedFormLinkToLocation(e,t,s),document.body.appendChild(s),s.addEventListener("turbo:submit-end",(()=>s.remove()),{once:!0}),requestAnimationFrame((()=>s.requestSubmit()))}}class _{static async preservingPermanentElements(e,t,s){const i=new this(e,t);i.enter(),await s(),i.leave()}constructor(e,t){this.delegate=e,this.permanentElementMap=t}enter(){for(const e in this.permanentElementMap){const[t,s]=this.permanentElementMap[e];this.delegate.enteringBardo(t,s),this.replaceNewPermanentElementWithPlaceholder(s)}}leave(){for(const e in this.permanentElementMap){const[t]=this.permanentElementMap[e];this.replaceCurrentPermanentElementWithClone(t),this.replacePlaceholderWithPermanentElement(t),this.delegate.leavingBardo(t)}}replaceNewPermanentElementWithPlaceholder(e){const t=function(e){const t=document.createElement("meta");return t.setAttribute("name","turbo-permanent-placeholder"),t.setAttribute("content",e.id),t}(e);e.replaceWith(t)}replaceCurrentPermanentElementWithClone(e){const t=e.cloneNode(!0);e.replaceWith(t)}replacePlaceholderWithPermanentElement(e){const t=this.getPlaceholderById(e.id);null==t||t.replaceWith(e)}getPlaceholderById(e){return this.placeholders.find((t=>t.content==e))}get placeholders(){return[...document.querySelectorAll("meta[name=turbo-permanent-placeholder][content]")]}}class K{constructor(e,t,s,i,r=!0){this.activeElement=null,this.currentSnapshot=e,this.newSnapshot=t,this.isPreview=i,this.willRender=r,this.renderElement=s,this.promise=new Promise(((e,t)=>this.resolvingFunctions={resolve:e,reject:t}))}get shouldRender(){return!0}get reloadReason(){}prepareToRender(){}finishRendering(){this.resolvingFunctions&&(this.resolvingFunctions.resolve(),delete this.resolvingFunctions)}async preservingPermanentElements(e){await _.preservingPermanentElements(this,this.permanentElementMap,e)}focusFirstAutofocusableElement(){const e=this.connectedSnapshot.firstAutofocusableElement;(function(e){return e&&"function"==typeof e.focus})(e)&&e.focus()}enteringBardo(e){this.activeElement||e.contains(this.currentSnapshot.activeElement)&&(this.activeElement=this.currentSnapshot.activeElement)}leavingBardo(e){e.contains(this.activeElement)&&this.activeElement instanceof HTMLElement&&(this.activeElement.focus(),this.activeElement=null)}get connectedSnapshot(){return this.newSnapshot.isConnected?this.newSnapshot:this.currentSnapshot}get currentElement(){return this.currentSnapshot.element}get newElement(){return this.newSnapshot.element}get permanentElementMap(){return this.currentSnapshot.getPermanentElementMapForSnapshot(this.newSnapshot)}}class Q extends K{static renderElement(e,t){var s;const i=document.createRange();i.selectNodeContents(e),i.deleteContents();const r=t,n=null===(s=r.ownerDocument)||void 0===s?void 0:s.createRange();n&&(n.selectNodeContents(r),e.appendChild(n.extractContents()))}constructor(e,t,s,i,r,n=!0){super(t,s,i,r,n),this.delegate=e}get shouldRender(){return!0}async render(){await S(),this.preservingPermanentElements((()=>{this.loadFrameElement()})),this.scrollFrameIntoView(),await S(),this.focusFirstAutofocusableElement(),await S(),this.activateScriptElements()}loadFrameElement(){this.delegate.willRenderFrame(this.currentElement,this.newElement),this.renderElement(this.currentElement,this.newElement)}scrollFrameIntoView(){if(this.currentElement.autoscroll||this.newElement.autoscroll){const s=this.currentElement.firstElementChild,i=(e=this.currentElement.getAttribute("data-autoscroll-block"),t="end","end"==e||"start"==e||"center"==e||"nearest"==e?e:t),r=function(e,t){return"auto"==e||"smooth"==e?e:t}(this.currentElement.getAttribute("data-autoscroll-behavior"),"auto");if(s)return s.scrollIntoView({block:i,behavior:r}),!0}var e,t;return!1}activateScriptElements(){for(const e of this.newScriptElements){const t=b(e);e.replaceWith(t)}}get newScriptElements(){return this.currentElement.querySelectorAll("script")}}class X{static get defaultCSS(){return y`
      .turbo-progress-bar {
        position: fixed;
        display: block;
        top: 0;
        left: 0;
        height: 3px;
        background: #0076ff;
        z-index: 2147483647;
        transition:
          width ${X.animationDuration}ms ease-out,
          opacity ${X.animationDuration/2}ms ${X.animationDuration/2}ms ease-in;
        transform: translate3d(0, 0, 0);
      }
    `}constructor(){this.hiding=!1,this.value=0,this.visible=!1,this.trickle=()=>{this.setValue(this.value+Math.random()/100)},this.stylesheetElement=this.createStylesheetElement(),this.progressElement=this.createProgressElement(),this.installStylesheetElement(),this.setValue(0)}show(){this.visible||(this.visible=!0,this.installProgressElement(),this.startTrickling())}hide(){this.visible&&!this.hiding&&(this.hiding=!0,this.fadeProgressElement((()=>{this.uninstallProgressElement(),this.stopTrickling(),this.visible=!1,this.hiding=!1})))}setValue(e){this.value=e,this.refresh()}installStylesheetElement(){document.head.insertBefore(this.stylesheetElement,document.head.firstChild)}installProgressElement(){this.progressElement.style.width="0",this.progressElement.style.opacity="1",document.documentElement.insertBefore(this.progressElement,document.body),this.refresh()}fadeProgressElement(e){this.progressElement.style.opacity="0",setTimeout(e,1.5*X.animationDuration)}uninstallProgressElement(){this.progressElement.parentNode&&document.documentElement.removeChild(this.progressElement)}startTrickling(){this.trickleInterval||(this.trickleInterval=window.setInterval(this.trickle,X.animationDuration))}stopTrickling(){window.clearInterval(this.trickleInterval),delete this.trickleInterval}refresh(){requestAnimationFrame((()=>{this.progressElement.style.width=10+90*this.value+"%"}))}createStylesheetElement(){const e=document.createElement("style");return e.type="text/css",e.textContent=X.defaultCSS,this.cspNonce&&(e.nonce=this.cspNonce),e}createProgressElement(){const e=document.createElement("div");return e.className="turbo-progress-bar",e}get cspNonce(){return M("csp-nonce")}}X.animationDuration=300;class Y extends N{constructor(){super(...arguments),this.detailsByOuterHTML=this.children.filter((e=>!function(e){const t=e.localName;return"noscript"==t}(e))).map((e=>function(e){e.hasAttribute("nonce")&&e.setAttribute("nonce","");return e}(e))).reduce(((e,t)=>{const{outerHTML:s}=t,i=s in e?e[s]:{type:J(t),tracked:G(t),elements:[]};return Object.assign(Object.assign({},e),{[s]:Object.assign(Object.assign({},i),{elements:[...i.elements,t]})})}),{})}get trackedElementSignature(){return Object.keys(this.detailsByOuterHTML).filter((e=>this.detailsByOuterHTML[e].tracked)).join("")}getScriptElementsNotInSnapshot(e){return this.getElementsMatchingTypeNotInSnapshot("script",e)}getStylesheetElementsNotInSnapshot(e){return this.getElementsMatchingTypeNotInSnapshot("stylesheet",e)}getElementsMatchingTypeNotInSnapshot(e,t){return Object.keys(this.detailsByOuterHTML).filter((e=>!(e in t.detailsByOuterHTML))).map((e=>this.detailsByOuterHTML[e])).filter((({type:t})=>t==e)).map((({elements:[e]})=>e))}get provisionalElements(){return Object.keys(this.detailsByOuterHTML).reduce(((e,t)=>{const{type:s,tracked:i,elements:r}=this.detailsByOuterHTML[t];return null!=s||i?r.length>1?[...e,...r.slice(1)]:e:[...e,...r]}),[])}getMetaValue(e){const t=this.findMetaElementByName(e);return t?t.getAttribute("content"):null}findMetaElementByName(e){return Object.keys(this.detailsByOuterHTML).reduce(((t,s)=>{const{elements:[i]}=this.detailsByOuterHTML[s];return function(e,t){const s=e.localName;return"meta"==s&&e.getAttribute("name")==t}(i,e)?i:t}),void 0)}}function J(e){return function(e){const t=e.localName;return"script"==t}(e)?"script":function(e){const t=e.localName;return"style"==t||"link"==t&&"stylesheet"==e.getAttribute("rel")}(e)?"stylesheet":void 0}function G(e){return"reload"==e.getAttribute("data-turbo-track")}class Z extends N{static fromHTMLString(e=""){return this.fromDocument(E(e))}static fromElement(e){return this.fromDocument(e.ownerDocument)}static fromDocument({head:e,body:t}){return new this(t,new Y(e))}constructor(e,t){super(e),this.headSnapshot=t}clone(){const e=this.element.cloneNode(!0),t=this.element.querySelectorAll("select"),s=e.querySelectorAll("select");for(const[e,i]of t.entries()){const t=s[e];for(const e of t.selectedOptions)e.selected=!1;for(const e of i.selectedOptions)t.options[e.index].selected=!0}for(const t of e.querySelectorAll('input[type="password"]'))t.value="";return new Z(e,this.headSnapshot)}get headElement(){return this.headSnapshot.element}get rootLocation(){var e;return h(null!==(e=this.getSetting("root"))&&void 0!==e?e:"/")}get cacheControlValue(){return this.getSetting("cache-control")}get isPreviewable(){return"no-preview"!=this.cacheControlValue}get isCacheable(){return"no-cache"!=this.cacheControlValue}get isVisitable(){return"reload"!=this.getSetting("visit-control")}getSetting(e){return this.headSnapshot.getMetaValue(`turbo-${e}`)}}!function(e){e.visitStart="visitStart",e.requestStart="requestStart",e.requestEnd="requestEnd",e.visitEnd="visitEnd"}(o||(o={})),function(e){e.initialized="initialized",e.started="started",e.canceled="canceled",e.failed="failed",e.completed="completed"}(a||(a={}));const ee={action:"advance",historyChanged:!1,visitCachedSnapshot:()=>{},willRender:!0,updateHistory:!0,shouldCacheSnapshot:!0,acceptsStreamResponse:!1};var te,se;!function(e){e[e.networkFailure=0]="networkFailure",e[e.timeoutFailure=-1]="timeoutFailure",e[e.contentTypeMismatch=-2]="contentTypeMismatch"}(te||(te={}));class ie{constructor(e,t,s,i={}){this.identifier=L(),this.timingMetrics={},this.followedRedirect=!1,this.historyChanged=!1,this.scrolled=!1,this.shouldCacheSnapshot=!0,this.acceptsStreamResponse=!1,this.snapshotCached=!1,this.state=a.initialized,this.delegate=e,this.location=t,this.restorationIdentifier=s||L();const{action:r,historyChanged:n,referrer:o,snapshot:l,snapshotHTML:h,response:c,visitCachedSnapshot:d,willRender:u,updateHistory:m,shouldCacheSnapshot:p,acceptsStreamResponse:g}=Object.assign(Object.assign({},ee),i);this.action=r,this.historyChanged=n,this.referrer=o,this.snapshot=l,this.snapshotHTML=h,this.response=c,this.isSamePage=this.delegate.locationWithActionIsSamePage(this.location,this.action),this.visitCachedSnapshot=d,this.willRender=u,this.updateHistory=m,this.scrolled=!u,this.shouldCacheSnapshot=p,this.acceptsStreamResponse=g}get adapter(){return this.delegate.adapter}get view(){return this.delegate.view}get history(){return this.delegate.history}get restorationData(){return this.history.getRestorationDataForIdentifier(this.restorationIdentifier)}get silent(){return this.isSamePage}start(){this.state==a.initialized&&(this.recordTimingMetric(o.visitStart),this.state=a.started,this.adapter.visitStarted(this),this.delegate.visitStarted(this))}cancel(){this.state==a.started&&(this.request&&this.request.cancel(),this.cancelRender(),this.state=a.canceled)}complete(){this.state==a.started&&(this.recordTimingMetric(o.visitEnd),this.state=a.completed,this.followRedirect(),this.followedRedirect||(this.adapter.visitCompleted(this),this.delegate.visitCompleted(this)))}fail(){this.state==a.started&&(this.state=a.failed,this.adapter.visitFailed(this))}changeHistory(){var e;if(!this.historyChanged&&this.updateHistory){const t=P(this.location.href===(null===(e=this.referrer)||void 0===e?void 0:e.href)?"replace":this.action);this.history.update(t,this.location,this.restorationIdentifier),this.historyChanged=!0}}issueRequest(){this.hasPreloadedResponse()?this.simulateRequest():this.shouldIssueRequest()&&!this.request&&(this.request=new H(this,i.get,this.location),this.request.perform())}simulateRequest(){this.response&&(this.startRequest(),this.recordResponse(),this.finishRequest())}startRequest(){this.recordTimingMetric(o.requestStart),this.adapter.visitRequestStarted(this)}recordResponse(e=this.response){if(this.response=e,e){const{statusCode:t}=e;re(t)?this.adapter.visitRequestCompleted(this):this.adapter.visitRequestFailedWithStatusCode(this,t)}}finishRequest(){this.recordTimingMetric(o.requestEnd),this.adapter.visitRequestFinished(this)}loadResponse(){if(this.response){const{statusCode:e,responseHTML:t}=this.response;this.render((async()=>{this.shouldCacheSnapshot&&this.cacheSnapshot(),this.view.renderPromise&&await this.view.renderPromise,re(e)&&null!=t?(await this.view.renderPage(Z.fromHTMLString(t),!1,this.willRender,this),this.performScroll(),this.adapter.visitRendered(this),this.complete()):(await this.view.renderError(Z.fromHTMLString(t),this),this.adapter.visitRendered(this),this.fail())}))}}getCachedSnapshot(){const e=this.view.getCachedSnapshotForLocation(this.location)||this.getPreloadedSnapshot();if(e&&(!c(this.location)||e.hasAnchor(c(this.location)))&&("restore"==this.action||e.isPreviewable))return e}getPreloadedSnapshot(){if(this.snapshotHTML)return Z.fromHTMLString(this.snapshotHTML)}hasCachedSnapshot(){return null!=this.getCachedSnapshot()}loadCachedSnapshot(){const e=this.getCachedSnapshot();if(e){const t=this.shouldIssueRequest();this.render((async()=>{this.cacheSnapshot(),this.isSamePage?this.adapter.visitRendered(this):(this.view.renderPromise&&await this.view.renderPromise,await this.view.renderPage(e,t,this.willRender,this),this.performScroll(),this.adapter.visitRendered(this),t||this.complete())}))}}followRedirect(){var e;this.redirectedToLocation&&!this.followedRedirect&&(null===(e=this.response)||void 0===e?void 0:e.redirected)&&(this.adapter.visitProposedToLocation(this.redirectedToLocation,{action:"replace",response:this.response,shouldCacheSnapshot:!1,willRender:!1}),this.followedRedirect=!0)}goToSamePageAnchor(){this.isSamePage&&this.render((async()=>{this.cacheSnapshot(),this.performScroll(),this.changeHistory(),this.adapter.visitRendered(this)}))}prepareRequest(e){this.acceptsStreamResponse&&e.acceptResponseType(B.contentType)}requestStarted(){this.startRequest()}requestPreventedHandlingResponse(e,t){}async requestSucceededWithResponse(e,t){const s=await t.responseHTML,{redirected:i,statusCode:r}=t;null==s?this.recordResponse({statusCode:te.contentTypeMismatch,redirected:i}):(this.redirectedToLocation=t.redirected?t.location:void 0,this.recordResponse({statusCode:r,responseHTML:s,redirected:i}))}async requestFailedWithResponse(e,t){const s=await t.responseHTML,{redirected:i,statusCode:r}=t;null==s?this.recordResponse({statusCode:te.contentTypeMismatch,redirected:i}):this.recordResponse({statusCode:r,responseHTML:s,redirected:i})}requestErrored(e,t){this.recordResponse({statusCode:te.networkFailure,redirected:!1})}requestFinished(){this.finishRequest()}performScroll(){this.scrolled||this.view.forceReloaded||("restore"==this.action?this.scrollToRestoredPosition()||this.scrollToAnchor()||this.view.scrollToTop():this.scrollToAnchor()||this.view.scrollToTop(),this.isSamePage&&this.delegate.visitScrolledToSamePageLocation(this.view.lastRenderedLocation,this.location),this.scrolled=!0)}scrollToRestoredPosition(){const{scrollPosition:e}=this.restorationData;if(e)return this.view.scrollToPosition(e),!0}scrollToAnchor(){const e=c(this.location);if(null!=e)return this.view.scrollToAnchor(e),!0}recordTimingMetric(e){this.timingMetrics[e]=(new Date).getTime()}getTimingMetrics(){return Object.assign({},this.timingMetrics)}getHistoryMethodForAction(e){switch(e){case"replace":return history.replaceState;case"advance":case"restore":return history.pushState}}hasPreloadedResponse(){return"object"==typeof this.response}shouldIssueRequest(){return!this.isSamePage&&("restore"==this.action?!this.hasCachedSnapshot():this.willRender)}cacheSnapshot(){this.snapshotCached||(this.view.cacheSnapshot(this.snapshot).then((e=>e&&this.visitCachedSnapshot(e))),this.snapshotCached=!0)}async render(e){this.cancelRender(),await new Promise((e=>{this.frame=requestAnimationFrame((()=>e()))})),await e(),delete this.frame}cancelRender(){this.frame&&(cancelAnimationFrame(this.frame),delete this.frame)}}function re(e){return e>=200&&e<300}class ne{constructor(e){this.progressBar=new X,this.showProgressBar=()=>{this.progressBar.show()},this.session=e}visitProposedToLocation(e,t){this.navigator.startVisit(e,(null==t?void 0:t.restorationIdentifier)||L(),t)}visitStarted(e){this.location=e.location,e.loadCachedSnapshot(),e.issueRequest(),e.goToSamePageAnchor()}visitRequestStarted(e){this.progressBar.setValue(0),e.hasCachedSnapshot()||"restore"!=e.action?this.showVisitProgressBarAfterDelay():this.showProgressBar()}visitRequestCompleted(e){e.loadResponse()}visitRequestFailedWithStatusCode(e,t){switch(t){case te.networkFailure:case te.timeoutFailure:case te.contentTypeMismatch:return this.reload({reason:"request_failed",context:{statusCode:t}});default:return e.loadResponse()}}visitRequestFinished(e){this.progressBar.setValue(1),this.hideVisitProgressBar()}visitCompleted(e){}pageInvalidated(e){this.reload(e)}visitFailed(e){}visitRendered(e){}formSubmissionStarted(e){this.progressBar.setValue(0),this.showFormProgressBarAfterDelay()}formSubmissionFinished(e){this.progressBar.setValue(1),this.hideFormProgressBar()}showVisitProgressBarAfterDelay(){this.visitProgressBarTimeout=window.setTimeout(this.showProgressBar,this.session.progressBarDelay)}hideVisitProgressBar(){this.progressBar.hide(),null!=this.visitProgressBarTimeout&&(window.clearTimeout(this.visitProgressBarTimeout),delete this.visitProgressBarTimeout)}showFormProgressBarAfterDelay(){null==this.formProgressBarTimeout&&(this.formProgressBarTimeout=window.setTimeout(this.showProgressBar,this.session.progressBarDelay))}hideFormProgressBar(){this.progressBar.hide(),null!=this.formProgressBarTimeout&&(window.clearTimeout(this.formProgressBarTimeout),delete this.formProgressBarTimeout)}reload(e){var t;w("turbo:reload",{detail:e}),window.location.href=(null===(t=this.location)||void 0===t?void 0:t.toString())||window.location.href}get navigator(){return this.session.navigator}}class oe{constructor(){this.selector="[data-turbo-temporary]",this.deprecatedSelector="[data-turbo-cache=false]",this.started=!1,this.removeTemporaryElements=e=>{for(const e of this.temporaryElements)e.remove()}}start(){this.started||(this.started=!0,addEventListener("turbo:before-cache",this.removeTemporaryElements,!1))}stop(){this.started&&(this.started=!1,removeEventListener("turbo:before-cache",this.removeTemporaryElements,!1))}get temporaryElements(){return[...document.querySelectorAll(this.selector),...this.temporaryElementsWithDeprecation]}get temporaryElementsWithDeprecation(){const e=document.querySelectorAll(this.deprecatedSelector);return e.length&&console.warn(`The ${this.deprecatedSelector} selector is deprecated and will be removed in a future version. Use ${this.selector} instead.`),[...e]}}class ae{constructor(e,t){this.session=e,this.element=t,this.linkInterceptor=new j(this,t),this.formSubmitObserver=new D(this,t)}start(){this.linkInterceptor.start(),this.formSubmitObserver.start()}stop(){this.linkInterceptor.stop(),this.formSubmitObserver.stop()}shouldInterceptLinkClick(e,t,s){return this.shouldRedirect(e)}linkClickIntercepted(e,t,s){const i=this.findFrameElement(e);i&&i.delegate.linkClickIntercepted(e,t,s)}willSubmitForm(e,t){return null==e.closest("turbo-frame")&&this.shouldSubmit(e,t)&&this.shouldRedirect(e,t)}formSubmitted(e,t){const s=this.findFrameElement(e,t);s&&s.delegate.formSubmitted(e,t)}shouldSubmit(e,t){var s;const i=d(e,t),r=this.element.ownerDocument.querySelector('meta[name="turbo-root"]'),n=h(null!==(s=null==r?void 0:r.content)&&void 0!==s?s:"/");return this.shouldRedirect(e,t)&&p(i,n)}shouldRedirect(e,t){if(e instanceof HTMLFormElement?this.session.submissionIsNavigatable(e,t):this.session.elementIsNavigatable(e)){const s=this.findFrameElement(e,t);return!!s&&s!=e.closest("turbo-frame")}return!1}findFrameElement(e,t){const s=(null==t?void 0:t.getAttribute("data-turbo-frame"))||e.getAttribute("data-turbo-frame");if(s&&"_top"!=s){const e=this.element.querySelector(`#${s}:not([disabled])`);if(e instanceof l)return e}}}class le{constructor(e){this.restorationIdentifier=L(),this.restorationData={},this.started=!1,this.pageLoaded=!1,this.onPopState=e=>{if(this.shouldHandlePopState()){const{turbo:t}=e.state||{};if(t){this.location=new URL(window.location.href);const{restorationIdentifier:e}=t;this.restorationIdentifier=e,this.delegate.historyPoppedToLocationWithRestorationIdentifier(this.location,e)}}},this.onPageLoad=async e=>{await Promise.resolve(),this.pageLoaded=!0},this.delegate=e}start(){this.started||(addEventListener("popstate",this.onPopState,!1),addEventListener("load",this.onPageLoad,!1),this.started=!0,this.replace(new URL(window.location.href)))}stop(){this.started&&(removeEventListener("popstate",this.onPopState,!1),removeEventListener("load",this.onPageLoad,!1),this.started=!1)}push(e,t){this.update(history.pushState,e,t)}replace(e,t){this.update(history.replaceState,e,t)}update(e,t,s=L()){const i={turbo:{restorationIdentifier:s}};e.call(history,i,"",t.href),this.location=t,this.restorationIdentifier=s}getRestorationDataForIdentifier(e){return this.restorationData[e]||{}}updateRestorationData(e){const{restorationIdentifier:t}=this,s=this.restorationData[t];this.restorationData[t]=Object.assign(Object.assign({},s),e)}assumeControlOfScrollRestoration(){var e;this.previousScrollRestoration||(this.previousScrollRestoration=null!==(e=history.scrollRestoration)&&void 0!==e?e:"auto",history.scrollRestoration="manual")}relinquishControlOfScrollRestoration(){this.previousScrollRestoration&&(history.scrollRestoration=this.previousScrollRestoration,delete this.previousScrollRestoration)}shouldHandlePopState(){return this.pageIsLoaded()}pageIsLoaded(){return this.pageLoaded||"complete"==document.readyState}}class he{constructor(e){this.delegate=e}proposeVisit(e,t={}){this.delegate.allowsVisitingLocationWithAction(e,t.action)&&(p(e,this.view.snapshot.rootLocation)?this.delegate.visitProposedToLocation(e,t):window.location.href=e.toString())}startVisit(e,t,s={}){this.stop(),this.currentVisit=new ie(this,h(e),t,Object.assign({referrer:this.location},s)),this.currentVisit.start()}submitForm(e,t){this.stop(),this.formSubmission=new O(this,e,t,!0),this.formSubmission.start()}stop(){this.formSubmission&&(this.formSubmission.stop(),delete this.formSubmission),this.currentVisit&&(this.currentVisit.cancel(),delete this.currentVisit)}get adapter(){return this.delegate.adapter}get view(){return this.delegate.view}get history(){return this.delegate.history}formSubmissionStarted(e){"function"==typeof this.adapter.formSubmissionStarted&&this.adapter.formSubmissionStarted(e)}async formSubmissionSucceededWithResponse(e,t){if(e==this.formSubmission){const s=await t.responseHTML;if(s){const i=e.isSafe;i||this.view.clearSnapshotCache();const{statusCode:r,redirected:n}=t,o={action:this.getActionForFormSubmission(e),shouldCacheSnapshot:i,response:{statusCode:r,responseHTML:s,redirected:n}};this.proposeVisit(t.location,o)}}}async formSubmissionFailedWithResponse(e,t){const s=await t.responseHTML;if(s){const e=Z.fromHTMLString(s);t.serverError?await this.view.renderError(e,this.currentVisit):await this.view.renderPage(e,!1,!0,this.currentVisit),this.view.scrollToTop(),this.view.clearSnapshotCache()}}formSubmissionErrored(e,t){console.error(t)}formSubmissionFinished(e){"function"==typeof this.adapter.formSubmissionFinished&&this.adapter.formSubmissionFinished(e)}visitStarted(e){this.delegate.visitStarted(e)}visitCompleted(e){this.delegate.visitCompleted(e)}locationWithActionIsSamePage(e,t){const s=c(e),i=c(this.view.lastRenderedLocation),r="restore"===t&&void 0===s;return"replace"!==t&&g(e)===g(this.view.lastRenderedLocation)&&(r||null!=s&&s!==i)}visitScrolledToSamePageLocation(e,t){this.delegate.visitScrolledToSamePageLocation(e,t)}get location(){return this.history.location}get restorationIdentifier(){return this.history.restorationIdentifier}getActionForFormSubmission({submitter:e,formElement:t}){return F(e,t)||"advance"}}!function(e){e[e.initial=0]="initial",e[e.loading=1]="loading",e[e.interactive=2]="interactive",e[e.complete=3]="complete"}(se||(se={}));class ce{constructor(e){this.stage=se.initial,this.started=!1,this.interpretReadyState=()=>{const{readyState:e}=this;"interactive"==e?this.pageIsInteractive():"complete"==e&&this.pageIsComplete()},this.pageWillUnload=()=>{this.delegate.pageWillUnload()},this.delegate=e}start(){this.started||(this.stage==se.initial&&(this.stage=se.loading),document.addEventListener("readystatechange",this.interpretReadyState,!1),addEventListener("pagehide",this.pageWillUnload,!1),this.started=!0)}stop(){this.started&&(document.removeEventListener("readystatechange",this.interpretReadyState,!1),removeEventListener("pagehide",this.pageWillUnload,!1),this.started=!1)}pageIsInteractive(){this.stage==se.loading&&(this.stage=se.interactive,this.delegate.pageBecameInteractive())}pageIsComplete(){this.pageIsInteractive(),this.stage==se.interactive&&(this.stage=se.complete,this.delegate.pageLoaded())}get readyState(){return document.readyState}}class de{constructor(e){this.started=!1,this.onScroll=()=>{this.updatePosition({x:window.pageXOffset,y:window.pageYOffset})},this.delegate=e}start(){this.started||(addEventListener("scroll",this.onScroll,!1),this.onScroll(),this.started=!0)}stop(){this.started&&(removeEventListener("scroll",this.onScroll,!1),this.started=!1)}updatePosition(e){this.delegate.scrollPositionChanged(e)}}class ue{render({fragment:e}){_.preservingPermanentElements(this,function(e){const t=W(document.documentElement),s={};for(const i of t){const{id:t}=i;for(const r of e.querySelectorAll("turbo-stream")){const e=V(r.templateElement.content,t);e&&(s[t]=[i,e])}}return s}(e),(()=>document.documentElement.appendChild(e)))}enteringBardo(e,t){t.replaceWith(e.cloneNode(!0))}leavingBardo(){}}class me{constructor(e){this.sources=new Set,this.started=!1,this.inspectFetchResponse=e=>{const t=function(e){var t;const s=null===(t=e.detail)||void 0===t?void 0:t.fetchResponse;if(s instanceof v)return s}(e);t&&function(e){var t;const s=null!==(t=e.contentType)&&void 0!==t?t:"";return s.startsWith(B.contentType)}(t)&&(e.preventDefault(),this.receiveMessageResponse(t))},this.receiveMessageEvent=e=>{this.started&&"string"==typeof e.data&&this.receiveMessageHTML(e.data)},this.delegate=e}start(){this.started||(this.started=!0,addEventListener("turbo:before-fetch-response",this.inspectFetchResponse,!1))}stop(){this.started&&(this.started=!1,removeEventListener("turbo:before-fetch-response",this.inspectFetchResponse,!1))}connectStreamSource(e){this.streamSourceIsConnected(e)||(this.sources.add(e),e.addEventListener("message",this.receiveMessageEvent,!1))}disconnectStreamSource(e){this.streamSourceIsConnected(e)&&(this.sources.delete(e),e.removeEventListener("message",this.receiveMessageEvent,!1))}streamSourceIsConnected(e){return this.sources.has(e)}async receiveMessageResponse(e){const t=await e.responseHTML;t&&this.receiveMessageHTML(t)}receiveMessageHTML(e){this.delegate.receivedMessageFromStream(B.wrap(e))}}class pe extends K{static renderElement(e,t){const{documentElement:s,body:i}=document;s.replaceChild(t,i)}async render(){this.replaceHeadAndBody(),this.activateScriptElements()}replaceHeadAndBody(){const{documentElement:e,head:t}=document;e.replaceChild(this.newHead,t),this.renderElement(this.currentElement,this.newElement)}activateScriptElements(){for(const e of this.scriptElements){const t=e.parentNode;if(t){const s=b(e);t.replaceChild(s,e)}}}get newHead(){return this.newSnapshot.headSnapshot.element}get scriptElements(){return document.documentElement.querySelectorAll("script")}}class ge extends K{static renderElement(e,t){document.body&&t instanceof HTMLBodyElement?document.body.replaceWith(t):document.documentElement.appendChild(t)}get shouldRender(){return this.newSnapshot.isVisitable&&this.trackedElementsAreIdentical}get reloadReason(){return this.newSnapshot.isVisitable?this.trackedElementsAreIdentical?void 0:{reason:"tracked_element_mismatch"}:{reason:"turbo_visit_control_is_reload"}}async prepareToRender(){await this.mergeHead()}async render(){this.willRender&&await this.replaceBody()}finishRendering(){super.finishRendering(),this.isPreview||this.focusFirstAutofocusableElement()}get currentHeadSnapshot(){return this.currentSnapshot.headSnapshot}get newHeadSnapshot(){return this.newSnapshot.headSnapshot}get newElement(){return this.newSnapshot.element}async mergeHead(){const e=this.mergeProvisionalElements(),t=this.copyNewHeadStylesheetElements();this.copyNewHeadScriptElements(),await e,await t}async replaceBody(){await this.preservingPermanentElements((async()=>{this.activateNewBody(),await this.assignNewBody()}))}get trackedElementsAreIdentical(){return this.currentHeadSnapshot.trackedElementSignature==this.newHeadSnapshot.trackedElementSignature}async copyNewHeadStylesheetElements(){const e=[];for(const t of this.newHeadStylesheetElements)e.push(A(t)),document.head.appendChild(t);await Promise.all(e)}copyNewHeadScriptElements(){for(const e of this.newHeadScriptElements)document.head.appendChild(b(e))}async mergeProvisionalElements(){const e=[...this.newHeadProvisionalElements];for(const t of this.currentHeadProvisionalElements)this.isCurrentElementInElementList(t,e)||document.head.removeChild(t);for(const t of e)document.head.appendChild(t)}isCurrentElementInElementList(e,t){for(const[s,i]of t.entries()){if("TITLE"==e.tagName){if("TITLE"!=i.tagName)continue;if(e.innerHTML==i.innerHTML)return t.splice(s,1),!0}if(i.isEqualNode(e))return t.splice(s,1),!0}return!1}removeCurrentHeadProvisionalElements(){for(const e of this.currentHeadProvisionalElements)document.head.removeChild(e)}copyNewHeadProvisionalElements(){for(const e of this.newHeadProvisionalElements)document.head.appendChild(e)}activateNewBody(){document.adoptNode(this.newElement),this.activateNewBodyScriptElements()}activateNewBodyScriptElements(){for(const e of this.newBodyScriptElements){const t=b(e);e.replaceWith(t)}}async assignNewBody(){await this.renderElement(this.currentElement,this.newElement)}get newHeadStylesheetElements(){return this.newHeadSnapshot.getStylesheetElementsNotInSnapshot(this.currentHeadSnapshot)}get newHeadScriptElements(){return this.newHeadSnapshot.getScriptElementsNotInSnapshot(this.currentHeadSnapshot)}get currentHeadProvisionalElements(){return this.currentHeadSnapshot.provisionalElements}get newHeadProvisionalElements(){return this.newHeadSnapshot.provisionalElements}get newBodyScriptElements(){return this.newElement.querySelectorAll("script")}}class fe{constructor(e){this.keys=[],this.snapshots={},this.size=e}has(e){return f(e)in this.snapshots}get(e){if(this.has(e)){const t=this.read(e);return this.touch(e),t}}put(e,t){return this.write(e,t),this.touch(e),t}clear(){this.snapshots={}}read(e){return this.snapshots[f(e)]}write(e,t){this.snapshots[f(e)]=t}touch(e){const t=f(e),s=this.keys.indexOf(t);s>-1&&this.keys.splice(s,1),this.keys.unshift(t),this.trim()}trim(){for(const e of this.keys.splice(this.size))delete this.snapshots[e]}}class ve extends x{constructor(){super(...arguments),this.snapshotCache=new fe(10),this.lastRenderedLocation=new URL(location.href),this.forceReloaded=!1}renderPage(e,t=!1,s=!0,i){const r=new ge(this.snapshot,e,ge.renderElement,t,s);return r.shouldRender?null==i||i.changeHistory():this.forceReloaded=!0,this.render(r)}renderError(e,t){null==t||t.changeHistory();const s=new pe(this.snapshot,e,pe.renderElement,!1);return this.render(s)}clearSnapshotCache(){this.snapshotCache.clear()}async cacheSnapshot(e=this.snapshot){if(e.isCacheable){this.delegate.viewWillCacheSnapshot();const{lastRenderedLocation:t}=this;await new Promise((e=>setTimeout((()=>e()),0)));const s=e.clone();return this.snapshotCache.put(t,s),s}}getCachedSnapshotForLocation(e){return this.snapshotCache.get(e)}get snapshot(){return Z.fromElement(this.element)}}class be{constructor(e){this.selector="a[data-turbo-preload]",this.delegate=e}get snapshotCache(){return this.delegate.navigator.view.snapshotCache}start(){if("loading"===document.readyState)return document.addEventListener("DOMContentLoaded",(()=>{this.preloadOnLoadLinksForView(document.body)}));this.preloadOnLoadLinksForView(document.body)}preloadOnLoadLinksForView(e){for(const t of e.querySelectorAll(this.selector))this.preloadURL(t)}async preloadURL(e){const t=new URL(e.href);if(!this.snapshotCache.has(t))try{const e=await fetch(t.toString(),{headers:{"VND.PREFETCH":"true",Accept:"text/html"}}),s=await e.text(),i=Z.fromHTMLString(s);this.snapshotCache.put(t,i)}catch(e){}}}function we(e){Object.defineProperties(e,Se)}const Se={absoluteURL:{get(){return this.toString()}}};const Ee={after(){this.targetElements.forEach((e=>{var t;return null===(t=e.parentElement)||void 0===t?void 0:t.insertBefore(this.templateContent,e.nextSibling)}))},append(){this.removeDuplicateTargetChildren(),this.targetElements.forEach((e=>e.append(this.templateContent)))},before(){this.targetElements.forEach((e=>{var t;return null===(t=e.parentElement)||void 0===t?void 0:t.insertBefore(this.templateContent,e)}))},prepend(){this.removeDuplicateTargetChildren(),this.targetElements.forEach((e=>e.prepend(this.templateContent)))},remove(){this.targetElements.forEach((e=>e.remove()))},replace(){this.targetElements.forEach((e=>e.replaceWith(this.templateContent)))},update(){this.targetElements.forEach((e=>{e.innerHTML="",e.append(this.templateContent)}))}},ye=new class{constructor(){this.navigator=new he(this),this.history=new le(this),this.preloader=new be(this),this.view=new ve(this,document.documentElement),this.adapter=new ne(this),this.pageObserver=new ce(this),this.cacheObserver=new oe,this.linkClickObserver=new $(this,window),this.formSubmitObserver=new D(this,document),this.scrollObserver=new de(this),this.streamObserver=new me(this),this.formLinkClickObserver=new z(this,document.documentElement),this.frameRedirector=new ae(this,document.documentElement),this.streamMessageRenderer=new ue,this.drive=!0,this.enabled=!0,this.progressBarDelay=500,this.started=!1,this.formMode="on"}start(){this.started||(this.pageObserver.start(),this.cacheObserver.start(),this.formLinkClickObserver.start(),this.linkClickObserver.start(),this.formSubmitObserver.start(),this.scrollObserver.start(),this.streamObserver.start(),this.frameRedirector.start(),this.history.start(),this.preloader.start(),this.started=!0,this.enabled=!0)}disable(){this.enabled=!1}stop(){this.started&&(this.pageObserver.stop(),this.cacheObserver.stop(),this.formLinkClickObserver.stop(),this.linkClickObserver.stop(),this.formSubmitObserver.stop(),this.scrollObserver.stop(),this.streamObserver.stop(),this.frameRedirector.stop(),this.history.stop(),this.started=!1)}registerAdapter(e){this.adapter=e}visit(e,t={}){const s=t.frame?document.getElementById(t.frame):null;s instanceof l?(s.src=e.toString(),s.loaded):this.navigator.proposeVisit(h(e),t)}connectStreamSource(e){this.streamObserver.connectStreamSource(e)}disconnectStreamSource(e){this.streamObserver.disconnectStreamSource(e)}renderStreamMessage(e){this.streamMessageRenderer.render(B.wrap(e))}clearCache(){this.view.clearSnapshotCache()}setProgressBarDelay(e){this.progressBarDelay=e}setFormMode(e){this.formMode=e}get location(){return this.history.location}get restorationIdentifier(){return this.history.restorationIdentifier}historyPoppedToLocationWithRestorationIdentifier(e,t){this.enabled?this.navigator.startVisit(e,t,{action:"restore",historyChanged:!0}):this.adapter.pageInvalidated({reason:"turbo_disabled"})}scrollPositionChanged(e){this.history.updateRestorationData({scrollPosition:e})}willSubmitFormLinkToLocation(e,t){return this.elementIsNavigatable(e)&&p(t,this.snapshot.rootLocation)}submittedFormLinkToLocation(){}willFollowLinkToLocation(e,t,s){return this.elementIsNavigatable(e)&&p(t,this.snapshot.rootLocation)&&this.applicationAllowsFollowingLinkToLocation(e,t,s)}followedLinkToLocation(e,t){const s=this.getActionForLink(e),i=e.hasAttribute("data-turbo-stream");this.visit(t.href,{action:s,acceptsStreamResponse:i})}allowsVisitingLocationWithAction(e,t){return this.locationWithActionIsSamePage(e,t)||this.applicationAllowsVisitingLocation(e)}visitProposedToLocation(e,t){we(e),this.adapter.visitProposedToLocation(e,t)}visitStarted(e){e.acceptsStreamResponse||C(document.documentElement),we(e.location),e.silent||this.notifyApplicationAfterVisitingLocation(e.location,e.action)}visitCompleted(e){T(document.documentElement),this.notifyApplicationAfterPageLoad(e.getTimingMetrics())}locationWithActionIsSamePage(e,t){return this.navigator.locationWithActionIsSamePage(e,t)}visitScrolledToSamePageLocation(e,t){this.notifyApplicationAfterVisitingSamePageLocation(e,t)}willSubmitForm(e,t){const s=d(e,t);return this.submissionIsNavigatable(e,t)&&p(h(s),this.snapshot.rootLocation)}formSubmitted(e,t){this.navigator.submitForm(e,t)}pageBecameInteractive(){this.view.lastRenderedLocation=this.location,this.notifyApplicationAfterPageLoad()}pageLoaded(){this.history.assumeControlOfScrollRestoration()}pageWillUnload(){this.history.relinquishControlOfScrollRestoration()}receivedMessageFromStream(e){this.renderStreamMessage(e)}viewWillCacheSnapshot(){var e;(null===(e=this.navigator.currentVisit)||void 0===e?void 0:e.silent)||this.notifyApplicationBeforeCachingSnapshot()}allowsImmediateRender({element:e},t){const s=this.notifyApplicationBeforeRender(e,t),{defaultPrevented:i,detail:{render:r}}=s;return this.view.renderer&&r&&(this.view.renderer.renderElement=r),!i}viewRenderedSnapshot(e,t){this.view.lastRenderedLocation=this.history.location,this.notifyApplicationAfterRender()}preloadOnLoadLinksForView(e){this.preloader.preloadOnLoadLinksForView(e)}viewInvalidated(e){this.adapter.pageInvalidated(e)}frameLoaded(e){this.notifyApplicationAfterFrameLoad(e)}frameRendered(e,t){this.notifyApplicationAfterFrameRender(e,t)}applicationAllowsFollowingLinkToLocation(e,t,s){return!this.notifyApplicationAfterClickingLinkToLocation(e,t,s).defaultPrevented}applicationAllowsVisitingLocation(e){return!this.notifyApplicationBeforeVisitingLocation(e).defaultPrevented}notifyApplicationAfterClickingLinkToLocation(e,t,s){return w("turbo:click",{target:e,detail:{url:t.href,originalEvent:s},cancelable:!0})}notifyApplicationBeforeVisitingLocation(e){return w("turbo:before-visit",{detail:{url:e.href},cancelable:!0})}notifyApplicationAfterVisitingLocation(e,t){return w("turbo:visit",{detail:{url:e.href,action:t}})}notifyApplicationBeforeCachingSnapshot(){return w("turbo:before-cache")}notifyApplicationBeforeRender(e,t){return w("turbo:before-render",{detail:Object.assign({newBody:e},t),cancelable:!0})}notifyApplicationAfterRender(){return w("turbo:render")}notifyApplicationAfterPageLoad(e={}){return w("turbo:load",{detail:{url:this.location.href,timing:e}})}notifyApplicationAfterVisitingSamePageLocation(e,t){dispatchEvent(new HashChangeEvent("hashchange",{oldURL:e.toString(),newURL:t.toString()}))}notifyApplicationAfterFrameLoad(e){return w("turbo:frame-load",{target:e})}notifyApplicationAfterFrameRender(e,t){return w("turbo:frame-render",{detail:{fetchResponse:e},target:t,cancelable:!0})}submissionIsNavigatable(e,t){if("off"==this.formMode)return!1;{const s=!t||this.elementIsNavigatable(t);return"optin"==this.formMode?s&&null!=e.closest('[data-turbo="true"]'):s&&this.elementIsNavigatable(e)}}elementIsNavigatable(e){const t=I(e,"[data-turbo]"),s=I(e,"turbo-frame");return this.drive||s?!t||"false"!=t.getAttribute("data-turbo"):!!t&&"true"==t.getAttribute("data-turbo")}getActionForLink(e){return F(e)||"advance"}get snapshot(){return this.view.snapshot}},Le=new class{constructor(e){this.session=e}clear(){this.session.clearCache()}resetCacheControl(){this.setCacheControl("")}exemptPageFromCache(){this.setCacheControl("no-cache")}exemptPageFromPreview(){this.setCacheControl("no-preview")}setCacheControl(e){!function(e,t){let s=k(e);s||(s=document.createElement("meta"),s.setAttribute("name",e),document.head.appendChild(s)),s.setAttribute("content",t)}("turbo-cache-control",e)}}(ye),{navigator:Re}=ye;function Ce(){ye.start()}function Te(e){ye.registerAdapter(e)}function Ae(e,t){ye.visit(e,t)}function Pe(e){ye.connectStreamSource(e)}function Fe(e){ye.disconnectStreamSource(e)}function ke(e){ye.renderStreamMessage(e)}function Me(){console.warn("Please replace `Turbo.clearCache()` with `Turbo.cache.clear()`. The top-level function is deprecated and will be removed in a future version of Turbo.`"),ye.clearCache()}function Ie(e){ye.setProgressBarDelay(e)}function He(e){O.confirmMethod=e}function qe(e){ye.setFormMode(e)}var Be=Object.freeze({__proto__:null,navigator:Re,session:ye,cache:Le,PageRenderer:ge,PageSnapshot:Z,FrameRenderer:Q,start:Ce,registerAdapter:Te,visit:Ae,connectStreamSource:Pe,disconnectStreamSource:Fe,renderStreamMessage:ke,clearCache:Me,setProgressBarDelay:Ie,setConfirmMethod:He,setFormMode:qe,StreamActions:Ee});class Oe extends Error{}function Ne(e){if(null!=e){const t=document.getElementById(e);if(t instanceof l)return t}}function Ve(e,t){if(e){const i=e.getAttribute("src");if(null!=i&&null!=t&&(s=t,h(i).href==h(s).href))throw new Error(`Matching <turbo-frame id="${e.id}"> element has a source URL which references itself`);if(e.ownerDocument!==document&&(e=document.importNode(e,!0)),e instanceof l)return e.connectedCallback(),e.disconnectedCallback(),e}var s}class We extends HTMLElement{static async renderElement(e){await e.performAction()}async connectedCallback(){try{await this.render()}catch(e){console.error(e)}finally{this.disconnect()}}async render(){var e;return null!==(e=this.renderPromise)&&void 0!==e?e:this.renderPromise=(async()=>{const e=this.beforeRenderEvent;this.dispatchEvent(e)&&(await S(),await e.detail.render(this))})()}disconnect(){try{this.remove()}catch(e){}}removeDuplicateTargetChildren(){this.duplicateChildren.forEach((e=>e.remove()))}get duplicateChildren(){var e;const t=this.targetElements.flatMap((e=>[...e.children])).filter((e=>!!e.id)),s=[...(null===(e=this.templateContent)||void 0===e?void 0:e.children)||[]].filter((e=>!!e.id)).map((e=>e.id));return t.filter((e=>s.includes(e.id)))}get performAction(){if(this.action){const e=Ee[this.action];if(e)return e;this.raise("unknown action")}this.raise("action attribute is missing")}get targetElements(){return this.target?this.targetElementsById:this.targets?this.targetElementsByQuery:void this.raise("target or targets attribute is missing")}get templateContent(){return this.templateElement.content.cloneNode(!0)}get templateElement(){if(null===this.firstElementChild){const e=this.ownerDocument.createElement("template");return this.appendChild(e),e}if(this.firstElementChild instanceof HTMLTemplateElement)return this.firstElementChild;this.raise("first child element must be a <template> element")}get action(){return this.getAttribute("action")}get target(){return this.getAttribute("target")}get targets(){return this.getAttribute("targets")}raise(e){throw new Error(`${this.description}: ${e}`)}get description(){var e,t;return null!==(t=(null!==(e=this.outerHTML.match(/<[^>]+>/))&&void 0!==e?e:[])[0])&&void 0!==t?t:"<turbo-stream>"}get beforeRenderEvent(){return new CustomEvent("turbo:before-stream-render",{bubbles:!0,cancelable:!0,detail:{newStream:this,render:We.renderElement}})}get targetElementsById(){var e;const t=null===(e=this.ownerDocument)||void 0===e?void 0:e.getElementById(this.target);return null!==t?[t]:[]}get targetElementsByQuery(){var e;const t=null===(e=this.ownerDocument)||void 0===e?void 0:e.querySelectorAll(this.targets);return 0!==t.length?Array.prototype.slice.call(t):[]}}class De extends HTMLElement{constructor(){super(...arguments),this.streamSource=null}connectedCallback(){this.streamSource=this.src.match(/^ws{1,2}:/)?new WebSocket(this.src):new EventSource(this.src),Pe(this.streamSource)}disconnectedCallback(){this.streamSource&&Fe(this.streamSource)}get src(){return this.getAttribute("src")||""}}l.delegateConstructor=class{constructor(e){this.fetchResponseLoaded=e=>{},this.currentFetchRequest=null,this.resolveVisitPromise=()=>{},this.connected=!1,this.hasBeenLoaded=!1,this.ignoredAttributes=new Set,this.action=null,this.visitCachedSnapshot=({element:e})=>{const t=e.querySelector("#"+this.element.id);t&&this.previousFrameElement&&t.replaceChildren(...this.previousFrameElement.children),delete this.previousFrameElement},this.element=e,this.view=new U(this,this.element),this.appearanceObserver=new q(this,this.element),this.formLinkClickObserver=new z(this,this.element),this.linkInterceptor=new j(this,this.element),this.restorationIdentifier=L(),this.formSubmitObserver=new D(this,this.element)}connect(){this.connected||(this.connected=!0,this.loadingStyle==s.lazy?this.appearanceObserver.start():this.loadSourceURL(),this.formLinkClickObserver.start(),this.linkInterceptor.start(),this.formSubmitObserver.start())}disconnect(){this.connected&&(this.connected=!1,this.appearanceObserver.stop(),this.formLinkClickObserver.stop(),this.linkInterceptor.stop(),this.formSubmitObserver.stop())}disabledChanged(){this.loadingStyle==s.eager&&this.loadSourceURL()}sourceURLChanged(){this.isIgnoringChangesTo("src")||(this.element.isConnected&&(this.complete=!1),(this.loadingStyle==s.eager||this.hasBeenLoaded)&&this.loadSourceURL())}sourceURLReloaded(){const{src:e}=this.element;return this.ignoringChangesToAttribute("complete",(()=>{this.element.removeAttribute("complete")})),this.element.src=null,this.element.src=e,this.element.loaded}completeChanged(){this.isIgnoringChangesTo("complete")||this.loadSourceURL()}loadingStyleChanged(){this.loadingStyle==s.lazy?this.appearanceObserver.start():(this.appearanceObserver.stop(),this.loadSourceURL())}async loadSourceURL(){this.enabled&&this.isActive&&!this.complete&&this.sourceURL&&(this.element.loaded=this.visit(h(this.sourceURL)),this.appearanceObserver.stop(),await this.element.loaded,this.hasBeenLoaded=!0)}async loadResponse(e){(e.redirected||e.succeeded&&e.isHTML)&&(this.sourceURL=e.response.url);try{const t=await e.responseHTML;if(t){const s=E(t);Z.fromDocument(s).isVisitable?await this.loadFrameResponse(e,s):await this.handleUnvisitableFrameResponse(e)}}finally{this.fetchResponseLoaded=()=>{}}}elementAppearedInViewport(e){this.proposeVisitIfNavigatedWithAction(e,e),this.loadSourceURL()}willSubmitFormLinkToLocation(e){return this.shouldInterceptNavigation(e)}submittedFormLinkToLocation(e,t,s){const i=this.findFrameElement(e);i&&s.setAttribute("data-turbo-frame",i.id)}shouldInterceptLinkClick(e,t,s){return this.shouldInterceptNavigation(e)}linkClickIntercepted(e,t){this.navigateFrame(e,t)}willSubmitForm(e,t){return e.closest("turbo-frame")==this.element&&this.shouldInterceptNavigation(e,t)}formSubmitted(e,t){this.formSubmission&&this.formSubmission.stop(),this.formSubmission=new O(this,e,t);const{fetchRequest:s}=this.formSubmission;this.prepareRequest(s),this.formSubmission.start()}prepareRequest(e){var t;e.headers["Turbo-Frame"]=this.id,(null===(t=this.currentNavigationElement)||void 0===t?void 0:t.hasAttribute("data-turbo-stream"))&&e.acceptResponseType(B.contentType)}requestStarted(e){C(this.element)}requestPreventedHandlingResponse(e,t){this.resolveVisitPromise()}async requestSucceededWithResponse(e,t){await this.loadResponse(t),this.resolveVisitPromise()}async requestFailedWithResponse(e,t){await this.loadResponse(t),this.resolveVisitPromise()}requestErrored(e,t){console.error(t),this.resolveVisitPromise()}requestFinished(e){T(this.element)}formSubmissionStarted({formElement:e}){C(e,this.findFrameElement(e))}formSubmissionSucceededWithResponse(e,t){const s=this.findFrameElement(e.formElement,e.submitter);s.delegate.proposeVisitIfNavigatedWithAction(s,e.formElement,e.submitter),s.delegate.loadResponse(t),e.isSafe||ye.clearCache()}formSubmissionFailedWithResponse(e,t){this.element.delegate.loadResponse(t),ye.clearCache()}formSubmissionErrored(e,t){console.error(t)}formSubmissionFinished({formElement:e}){T(e,this.findFrameElement(e))}allowsImmediateRender({element:e},t){const s=w("turbo:before-frame-render",{target:this.element,detail:Object.assign({newFrame:e},t),cancelable:!0}),{defaultPrevented:i,detail:{render:r}}=s;return this.view.renderer&&r&&(this.view.renderer.renderElement=r),!i}viewRenderedSnapshot(e,t){}preloadOnLoadLinksForView(e){ye.preloadOnLoadLinksForView(e)}viewInvalidated(){}willRenderFrame(e,t){this.previousFrameElement=e.cloneNode(!0)}async loadFrameResponse(e,t){const s=await this.extractForeignFrameElement(t.body);if(s){const t=new N(s),i=new Q(this,this.view.snapshot,t,Q.renderElement,!1,!1);this.view.renderPromise&&await this.view.renderPromise,this.changeHistory(),await this.view.render(i),this.complete=!0,ye.frameRendered(e,this.element),ye.frameLoaded(this.element),this.fetchResponseLoaded(e)}else this.willHandleFrameMissingFromResponse(e)&&this.handleFrameMissingFromResponse(e)}async visit(e){var t;const s=new H(this,i.get,e,new URLSearchParams,this.element);return null===(t=this.currentFetchRequest)||void 0===t||t.cancel(),this.currentFetchRequest=s,new Promise((e=>{this.resolveVisitPromise=()=>{this.resolveVisitPromise=()=>{},this.currentFetchRequest=null,e()},s.perform()}))}navigateFrame(e,t,s){const i=this.findFrameElement(e,s);i.delegate.proposeVisitIfNavigatedWithAction(i,e,s),this.withCurrentNavigationElement(e,(()=>{i.src=t}))}proposeVisitIfNavigatedWithAction(e,t,s){if(this.action=F(s,t,e),this.action){const t=Z.fromElement(e).clone(),{visitCachedSnapshot:s}=e.delegate;e.delegate.fetchResponseLoaded=i=>{if(e.src){const{statusCode:r,redirected:n}=i,o={response:{statusCode:r,redirected:n,responseHTML:e.ownerDocument.documentElement.outerHTML},visitCachedSnapshot:s,willRender:!1,updateHistory:!1,restorationIdentifier:this.restorationIdentifier,snapshot:t};this.action&&(o.action=this.action),ye.visit(e.src,o)}}}}changeHistory(){if(this.action){const e=P(this.action);ye.history.update(e,h(this.element.src||""),this.restorationIdentifier)}}async handleUnvisitableFrameResponse(e){console.warn(`The response (${e.statusCode}) from <turbo-frame id="${this.element.id}"> is performing a full page visit due to turbo-visit-control.`),await this.visitResponse(e.response)}willHandleFrameMissingFromResponse(e){this.element.setAttribute("complete","");const t=e.response;return!w("turbo:frame-missing",{target:this.element,detail:{response:t,visit:async(e,t={})=>{e instanceof Response?this.visitResponse(e):ye.visit(e,t)}},cancelable:!0}).defaultPrevented}handleFrameMissingFromResponse(e){this.view.missing(),this.throwFrameMissingError(e)}throwFrameMissingError(e){const t=`The response (${e.statusCode}) did not contain the expected <turbo-frame id="${this.element.id}"> and will be ignored. To perform a full page visit instead, set turbo-visit-control to reload.`;throw new Oe(t)}async visitResponse(e){const t=new v(e),s=await t.responseHTML,{location:i,redirected:r,statusCode:n}=t;return ye.visit(i,{response:{redirected:r,statusCode:n,responseHTML:s}})}findFrameElement(e,t){var s;return null!==(s=Ne(R("data-turbo-frame",t,e)||this.element.getAttribute("target")))&&void 0!==s?s:this.element}async extractForeignFrameElement(e){let t;const s=CSS.escape(this.id);try{if(t=Ve(e.querySelector(`turbo-frame#${s}`),this.sourceURL),t)return t;if(t=Ve(e.querySelector(`turbo-frame[src][recurse~=${s}]`),this.sourceURL),t)return await t.loaded,await this.extractForeignFrameElement(t)}catch(e){return console.error(e),new l}return null}formActionIsVisitable(e,t){return p(h(d(e,t)),this.rootLocation)}shouldInterceptNavigation(e,t){const s=R("data-turbo-frame",t,e)||this.element.getAttribute("target");if(e instanceof HTMLFormElement&&!this.formActionIsVisitable(e,t))return!1;if(!this.enabled||"_top"==s)return!1;if(s){const e=Ne(s);if(e)return!e.disabled}return!!ye.elementIsNavigatable(e)&&!(t&&!ye.elementIsNavigatable(t))}get id(){return this.element.id}get enabled(){return!this.element.disabled}get sourceURL(){if(this.element.src)return this.element.src}set sourceURL(e){this.ignoringChangesToAttribute("src",(()=>{this.element.src=null!=e?e:null}))}get loadingStyle(){return this.element.loading}get isLoading(){return void 0!==this.formSubmission||void 0!==this.resolveVisitPromise()}get complete(){return this.element.hasAttribute("complete")}set complete(e){this.ignoringChangesToAttribute("complete",(()=>{e?this.element.setAttribute("complete",""):this.element.removeAttribute("complete")}))}get isActive(){return this.element.isActive&&this.connected}get rootLocation(){var e;const t=this.element.ownerDocument.querySelector('meta[name="turbo-root"]');return h(null!==(e=null==t?void 0:t.content)&&void 0!==e?e:"/")}isIgnoringChangesTo(e){return this.ignoredAttributes.has(e)}ignoringChangesToAttribute(e,t){this.ignoredAttributes.add(e),t(),this.ignoredAttributes.delete(e)}withCurrentNavigationElement(e,t){this.currentNavigationElement=e,t(),delete this.currentNavigationElement}},void 0===customElements.get("turbo-frame")&&customElements.define("turbo-frame",l),void 0===customElements.get("turbo-stream")&&customElements.define("turbo-stream",We),void 0===customElements.get("turbo-stream-source")&&customElements.define("turbo-stream-source",De),(()=>{let e=document.currentScript;if(e&&!e.hasAttribute("data-turbo-suppress-warning"))for(e=e.parentElement;e;){if(e==document.body)return console.warn(y`
        You are loading Turbo from a <script> element inside the <body> element. This is probably not what you meant to do!

        Load your application’s JavaScript bundle inside the <head> element instead. <script> elements in <body> are evaluated with each page change.

        For more information, see: https://turbo.hotwired.dev/handbook/building#working-with-script-elements

        ——
        Suppress this warning by adding a "data-turbo-suppress-warning" attribute to: %s
      `,e.outerHTML);e=e.parentElement}})(),window.Turbo=Be,Ce();export{l as FrameElement,s as FrameLoadingStyle,Q as FrameRenderer,ge as PageRenderer,Z as PageSnapshot,Ee as StreamActions,We as StreamElement,De as StreamSourceElement,Le as cache,Me as clearCache,Pe as connectStreamSource,Fe as disconnectStreamSource,Re as navigator,Te as registerAdapter,ke as renderStreamMessage,ye as session,He as setConfirmMethod,qe as setFormMode,Ie as setProgressBarDelay,Ce as start,Ae as visit};export default null;

-------------------------------------
Cale: assets/vendor/installed.php
Nume: installed.php
Continut:
<?php return array (
  '@hotwired/stimulus' => 
  array (
    'version' => '3.2.2',
    'dependencies' => 
    array (
    ),
    'extraFiles' => 
    array (
    ),
  ),
  '@hotwired/turbo' => 
  array (
    'version' => '7.3.0',
    'dependencies' => 
    array (
    ),
    'extraFiles' => 
    array (
    ),
  ),
);
-------------------------------------
Cale: migrations/.gitignore
Nume: .gitignore
Continut:

-------------------------------------
Cale: migrations/Version20241212060426.php
Nume: Version20241212060426.php
Continut:
<?php

declare(strict_types=1);

namespace DoctrineMigrations;

use Doctrine\DBAL\Schema\Schema;
use Doctrine\Migrations\AbstractMigration;

/**
 * Auto-generated Migration: Please modify to your needs!
 */
final class Version20241212060426 extends AbstractMigration
{
    public function getDescription(): string
    {
        return '';
    }

    public function up(Schema $schema): void
    {
        // this up() migration is auto-generated, please modify it to your needs
        $this->addSql('CREATE TABLE annonce (id INT AUTO_INCREMENT NOT NULL, poste_id INT NOT NULL, recruteur_id INT NOT NULL, consultant_id INT DEFAULT NULL, titre VARCHAR(100) NOT NULL, typecontrat VARCHAR(20) NOT NULL, ville VARCHAR(60) NOT NULL, datedebut DATE NOT NULL, datefin DATE DEFAULT NULL, nombreheures INT NOT NULL, salaire INT NOT NULL, description LONGTEXT NOT NULL, dateajout DATETIME NOT NULL, validation TINYINT(1) NOT NULL, INDEX IDX_F65593E5A0905086 (poste_id), INDEX IDX_F65593E5BB0859F1 (recruteur_id), INDEX IDX_F65593E544F779A2 (consultant_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('CREATE TABLE candidat (id INT AUTO_INCREMENT NOT NULL, candidat_user_id INT NOT NULL, consultant_id INT DEFAULT NULL, cv VARCHAR(255) DEFAULT NULL, INDEX IDX_6AB5B471FE63257F (candidat_user_id), INDEX IDX_6AB5B47144F779A2 (consultant_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('CREATE TABLE candidature (id INT AUTO_INCREMENT NOT NULL, annonce_id INT NOT NULL, candidat_id INT NOT NULL, consultant_approval_id INT DEFAULT NULL, etat VARCHAR(10) NOT NULL, INDEX IDX_E33BD3B88805AB2F (annonce_id), INDEX IDX_E33BD3B88D0EB82 (candidat_id), INDEX IDX_E33BD3B8CC233509 (consultant_approval_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('CREATE TABLE poste (id INT AUTO_INCREMENT NOT NULL, libelle VARCHAR(80) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('CREATE TABLE recruteur (id INT AUTO_INCREMENT NOT NULL, recruteur_user_id INT NOT NULL, consultant_id INT DEFAULT NULL, nom VARCHAR(255) DEFAULT NULL, adresse VARCHAR(255) DEFAULT NULL, code_postal INT DEFAULT NULL, ville VARCHAR(255) DEFAULT NULL, INDEX IDX_2BD3678CBB18A082 (recruteur_user_id), INDEX IDX_2BD3678C44F779A2 (consultant_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('CREATE TABLE `user` (id INT AUTO_INCREMENT NOT NULL, email VARCHAR(180) NOT NULL, roles JSON NOT NULL COMMENT \'(DC2Type:json)\', password VARCHAR(255) NOT NULL, nom VARCHAR(50) NOT NULL, prenom VARCHAR(50) NOT NULL, role VARCHAR(40) NOT NULL, UNIQUE INDEX UNIQ_IDENTIFIER_EMAIL (email), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('CREATE TABLE messenger_messages (id BIGINT AUTO_INCREMENT NOT NULL, body LONGTEXT NOT NULL, headers LONGTEXT NOT NULL, queue_name VARCHAR(190) NOT NULL, created_at DATETIME NOT NULL COMMENT \'(DC2Type:datetime_immutable)\', available_at DATETIME NOT NULL COMMENT \'(DC2Type:datetime_immutable)\', delivered_at DATETIME DEFAULT NULL COMMENT \'(DC2Type:datetime_immutable)\', INDEX IDX_75EA56E0FB7336F0 (queue_name), INDEX IDX_75EA56E0E3BD61CE (available_at), INDEX IDX_75EA56E016BA31DB (delivered_at), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
        $this->addSql('ALTER TABLE annonce ADD CONSTRAINT FK_F65593E5A0905086 FOREIGN KEY (poste_id) REFERENCES poste (id)');
        $this->addSql('ALTER TABLE annonce ADD CONSTRAINT FK_F65593E5BB0859F1 FOREIGN KEY (recruteur_id) REFERENCES recruteur (id)');
        $this->addSql('ALTER TABLE annonce ADD CONSTRAINT FK_F65593E544F779A2 FOREIGN KEY (consultant_id) REFERENCES `user` (id)');
        $this->addSql('ALTER TABLE candidat ADD CONSTRAINT FK_6AB5B471FE63257F FOREIGN KEY (candidat_user_id) REFERENCES `user` (id)');
        $this->addSql('ALTER TABLE candidat ADD CONSTRAINT FK_6AB5B47144F779A2 FOREIGN KEY (consultant_id) REFERENCES `user` (id)');
        $this->addSql('ALTER TABLE candidature ADD CONSTRAINT FK_E33BD3B88805AB2F FOREIGN KEY (annonce_id) REFERENCES annonce (id)');
        $this->addSql('ALTER TABLE candidature ADD CONSTRAINT FK_E33BD3B88D0EB82 FOREIGN KEY (candidat_id) REFERENCES candidat (id)');
        $this->addSql('ALTER TABLE candidature ADD CONSTRAINT FK_E33BD3B8CC233509 FOREIGN KEY (consultant_approval_id) REFERENCES `user` (id)');
        $this->addSql('ALTER TABLE recruteur ADD CONSTRAINT FK_2BD3678CBB18A082 FOREIGN KEY (recruteur_user_id) REFERENCES `user` (id)');
        $this->addSql('ALTER TABLE recruteur ADD CONSTRAINT FK_2BD3678C44F779A2 FOREIGN KEY (consultant_id) REFERENCES `user` (id)');
    }

    public function down(Schema $schema): void
    {
        // this down() migration is auto-generated, please modify it to your needs
        $this->addSql('ALTER TABLE annonce DROP FOREIGN KEY FK_F65593E5A0905086');
        $this->addSql('ALTER TABLE annonce DROP FOREIGN KEY FK_F65593E5BB0859F1');
        $this->addSql('ALTER TABLE annonce DROP FOREIGN KEY FK_F65593E544F779A2');
        $this->addSql('ALTER TABLE candidat DROP FOREIGN KEY FK_6AB5B471FE63257F');
        $this->addSql('ALTER TABLE candidat DROP FOREIGN KEY FK_6AB5B47144F779A2');
        $this->addSql('ALTER TABLE candidature DROP FOREIGN KEY FK_E33BD3B88805AB2F');
        $this->addSql('ALTER TABLE candidature DROP FOREIGN KEY FK_E33BD3B88D0EB82');
        $this->addSql('ALTER TABLE candidature DROP FOREIGN KEY FK_E33BD3B8CC233509');
        $this->addSql('ALTER TABLE recruteur DROP FOREIGN KEY FK_2BD3678CBB18A082');
        $this->addSql('ALTER TABLE recruteur DROP FOREIGN KEY FK_2BD3678C44F779A2');
        $this->addSql('DROP TABLE annonce');
        $this->addSql('DROP TABLE candidat');
        $this->addSql('DROP TABLE candidature');
        $this->addSql('DROP TABLE poste');
        $this->addSql('DROP TABLE recruteur');
        $this->addSql('DROP TABLE `user`');
        $this->addSql('DROP TABLE messenger_messages');
    }
}

-------------------------------------
